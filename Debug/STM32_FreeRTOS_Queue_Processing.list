
STM32_FreeRTOS_Queue_Processing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fbc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000390  08008170  08008170  00018170  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008500  08008500  00020ac4  2**0
                  CONTENTS
  4 .ARM          00000008  08008500  08008500  00018500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008508  08008508  00020ac4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08008508  08008508  00018508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008510  08008510  00018510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000ac4  20000000  08008514  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012f34  20000ac4  08008fd8  00020ac4  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  200139f8  08008fd8  000239f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020ac4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cdb1  00000000  00000000  00020af4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001fd0  00000000  00000000  0002d8a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c20  00000000  00000000  0002f878  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b38  00000000  00000000  00030498  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000031cb  00000000  00000000  00030fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009d7b  00000000  00000000  0003419b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007ba27  00000000  00000000  0003df16  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b993d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042d8  00000000  00000000  000b99b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000ac4 	.word	0x20000ac4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008154 	.word	0x08008154

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000ac8 	.word	0x20000ac8
 80001ec:	08008154 	.word	0x08008154

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b972 	b.w	8000ec4 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9e08      	ldr	r6, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	4688      	mov	r8, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d14b      	bne.n	8000c9e <__udivmoddi4+0xa6>
 8000c06:	428a      	cmp	r2, r1
 8000c08:	4615      	mov	r5, r2
 8000c0a:	d967      	bls.n	8000cdc <__udivmoddi4+0xe4>
 8000c0c:	fab2 f282 	clz	r2, r2
 8000c10:	b14a      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c12:	f1c2 0720 	rsb	r7, r2, #32
 8000c16:	fa01 f302 	lsl.w	r3, r1, r2
 8000c1a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c1e:	4095      	lsls	r5, r2
 8000c20:	ea47 0803 	orr.w	r8, r7, r3
 8000c24:	4094      	lsls	r4, r2
 8000c26:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c2a:	0c23      	lsrs	r3, r4, #16
 8000c2c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c30:	fa1f fc85 	uxth.w	ip, r5
 8000c34:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c38:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c3c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c40:	4299      	cmp	r1, r3
 8000c42:	d909      	bls.n	8000c58 <__udivmoddi4+0x60>
 8000c44:	18eb      	adds	r3, r5, r3
 8000c46:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c4a:	f080 811b 	bcs.w	8000e84 <__udivmoddi4+0x28c>
 8000c4e:	4299      	cmp	r1, r3
 8000c50:	f240 8118 	bls.w	8000e84 <__udivmoddi4+0x28c>
 8000c54:	3f02      	subs	r7, #2
 8000c56:	442b      	add	r3, r5
 8000c58:	1a5b      	subs	r3, r3, r1
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c68:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c6c:	45a4      	cmp	ip, r4
 8000c6e:	d909      	bls.n	8000c84 <__udivmoddi4+0x8c>
 8000c70:	192c      	adds	r4, r5, r4
 8000c72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c76:	f080 8107 	bcs.w	8000e88 <__udivmoddi4+0x290>
 8000c7a:	45a4      	cmp	ip, r4
 8000c7c:	f240 8104 	bls.w	8000e88 <__udivmoddi4+0x290>
 8000c80:	3802      	subs	r0, #2
 8000c82:	442c      	add	r4, r5
 8000c84:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c88:	eba4 040c 	sub.w	r4, r4, ip
 8000c8c:	2700      	movs	r7, #0
 8000c8e:	b11e      	cbz	r6, 8000c98 <__udivmoddi4+0xa0>
 8000c90:	40d4      	lsrs	r4, r2
 8000c92:	2300      	movs	r3, #0
 8000c94:	e9c6 4300 	strd	r4, r3, [r6]
 8000c98:	4639      	mov	r1, r7
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d909      	bls.n	8000cb6 <__udivmoddi4+0xbe>
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	f000 80eb 	beq.w	8000e7e <__udivmoddi4+0x286>
 8000ca8:	2700      	movs	r7, #0
 8000caa:	e9c6 0100 	strd	r0, r1, [r6]
 8000cae:	4638      	mov	r0, r7
 8000cb0:	4639      	mov	r1, r7
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	fab3 f783 	clz	r7, r3
 8000cba:	2f00      	cmp	r7, #0
 8000cbc:	d147      	bne.n	8000d4e <__udivmoddi4+0x156>
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d302      	bcc.n	8000cc8 <__udivmoddi4+0xd0>
 8000cc2:	4282      	cmp	r2, r0
 8000cc4:	f200 80fa 	bhi.w	8000ebc <__udivmoddi4+0x2c4>
 8000cc8:	1a84      	subs	r4, r0, r2
 8000cca:	eb61 0303 	sbc.w	r3, r1, r3
 8000cce:	2001      	movs	r0, #1
 8000cd0:	4698      	mov	r8, r3
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	d0e0      	beq.n	8000c98 <__udivmoddi4+0xa0>
 8000cd6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cda:	e7dd      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000cdc:	b902      	cbnz	r2, 8000ce0 <__udivmoddi4+0xe8>
 8000cde:	deff      	udf	#255	; 0xff
 8000ce0:	fab2 f282 	clz	r2, r2
 8000ce4:	2a00      	cmp	r2, #0
 8000ce6:	f040 808f 	bne.w	8000e08 <__udivmoddi4+0x210>
 8000cea:	1b49      	subs	r1, r1, r5
 8000cec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cf0:	fa1f f885 	uxth.w	r8, r5
 8000cf4:	2701      	movs	r7, #1
 8000cf6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d04:	fb08 f10c 	mul.w	r1, r8, ip
 8000d08:	4299      	cmp	r1, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x124>
 8000d0c:	18eb      	adds	r3, r5, r3
 8000d0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x122>
 8000d14:	4299      	cmp	r1, r3
 8000d16:	f200 80cd 	bhi.w	8000eb4 <__udivmoddi4+0x2bc>
 8000d1a:	4684      	mov	ip, r0
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	b2a3      	uxth	r3, r4
 8000d20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d24:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d28:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d2c:	fb08 f800 	mul.w	r8, r8, r0
 8000d30:	45a0      	cmp	r8, r4
 8000d32:	d907      	bls.n	8000d44 <__udivmoddi4+0x14c>
 8000d34:	192c      	adds	r4, r5, r4
 8000d36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x14a>
 8000d3c:	45a0      	cmp	r8, r4
 8000d3e:	f200 80b6 	bhi.w	8000eae <__udivmoddi4+0x2b6>
 8000d42:	4618      	mov	r0, r3
 8000d44:	eba4 0408 	sub.w	r4, r4, r8
 8000d48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d4c:	e79f      	b.n	8000c8e <__udivmoddi4+0x96>
 8000d4e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d52:	40bb      	lsls	r3, r7
 8000d54:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d58:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d5c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d60:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d64:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d68:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d6c:	4325      	orrs	r5, r4
 8000d6e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d72:	0c2c      	lsrs	r4, r5, #16
 8000d74:	fb08 3319 	mls	r3, r8, r9, r3
 8000d78:	fa1f fa8e 	uxth.w	sl, lr
 8000d7c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d80:	fb09 f40a 	mul.w	r4, r9, sl
 8000d84:	429c      	cmp	r4, r3
 8000d86:	fa02 f207 	lsl.w	r2, r2, r7
 8000d8a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d8e:	d90b      	bls.n	8000da8 <__udivmoddi4+0x1b0>
 8000d90:	eb1e 0303 	adds.w	r3, lr, r3
 8000d94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d98:	f080 8087 	bcs.w	8000eaa <__udivmoddi4+0x2b2>
 8000d9c:	429c      	cmp	r4, r3
 8000d9e:	f240 8084 	bls.w	8000eaa <__udivmoddi4+0x2b2>
 8000da2:	f1a9 0902 	sub.w	r9, r9, #2
 8000da6:	4473      	add	r3, lr
 8000da8:	1b1b      	subs	r3, r3, r4
 8000daa:	b2ad      	uxth	r5, r5
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000db8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dbc:	45a2      	cmp	sl, r4
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x1da>
 8000dc0:	eb1e 0404 	adds.w	r4, lr, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	d26b      	bcs.n	8000ea2 <__udivmoddi4+0x2aa>
 8000dca:	45a2      	cmp	sl, r4
 8000dcc:	d969      	bls.n	8000ea2 <__udivmoddi4+0x2aa>
 8000dce:	3802      	subs	r0, #2
 8000dd0:	4474      	add	r4, lr
 8000dd2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dd6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dda:	eba4 040a 	sub.w	r4, r4, sl
 8000dde:	454c      	cmp	r4, r9
 8000de0:	46c2      	mov	sl, r8
 8000de2:	464b      	mov	r3, r9
 8000de4:	d354      	bcc.n	8000e90 <__udivmoddi4+0x298>
 8000de6:	d051      	beq.n	8000e8c <__udivmoddi4+0x294>
 8000de8:	2e00      	cmp	r6, #0
 8000dea:	d069      	beq.n	8000ec0 <__udivmoddi4+0x2c8>
 8000dec:	ebb1 050a 	subs.w	r5, r1, sl
 8000df0:	eb64 0403 	sbc.w	r4, r4, r3
 8000df4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000df8:	40fd      	lsrs	r5, r7
 8000dfa:	40fc      	lsrs	r4, r7
 8000dfc:	ea4c 0505 	orr.w	r5, ip, r5
 8000e00:	e9c6 5400 	strd	r5, r4, [r6]
 8000e04:	2700      	movs	r7, #0
 8000e06:	e747      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000e08:	f1c2 0320 	rsb	r3, r2, #32
 8000e0c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e10:	4095      	lsls	r5, r2
 8000e12:	fa01 f002 	lsl.w	r0, r1, r2
 8000e16:	fa21 f303 	lsr.w	r3, r1, r3
 8000e1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e1e:	4338      	orrs	r0, r7
 8000e20:	0c01      	lsrs	r1, r0, #16
 8000e22:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e26:	fa1f f885 	uxth.w	r8, r5
 8000e2a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb07 f308 	mul.w	r3, r7, r8
 8000e36:	428b      	cmp	r3, r1
 8000e38:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3c:	d907      	bls.n	8000e4e <__udivmoddi4+0x256>
 8000e3e:	1869      	adds	r1, r5, r1
 8000e40:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e44:	d22f      	bcs.n	8000ea6 <__udivmoddi4+0x2ae>
 8000e46:	428b      	cmp	r3, r1
 8000e48:	d92d      	bls.n	8000ea6 <__udivmoddi4+0x2ae>
 8000e4a:	3f02      	subs	r7, #2
 8000e4c:	4429      	add	r1, r5
 8000e4e:	1acb      	subs	r3, r1, r3
 8000e50:	b281      	uxth	r1, r0
 8000e52:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e56:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e5e:	fb00 f308 	mul.w	r3, r0, r8
 8000e62:	428b      	cmp	r3, r1
 8000e64:	d907      	bls.n	8000e76 <__udivmoddi4+0x27e>
 8000e66:	1869      	adds	r1, r5, r1
 8000e68:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e6c:	d217      	bcs.n	8000e9e <__udivmoddi4+0x2a6>
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d915      	bls.n	8000e9e <__udivmoddi4+0x2a6>
 8000e72:	3802      	subs	r0, #2
 8000e74:	4429      	add	r1, r5
 8000e76:	1ac9      	subs	r1, r1, r3
 8000e78:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e7c:	e73b      	b.n	8000cf6 <__udivmoddi4+0xfe>
 8000e7e:	4637      	mov	r7, r6
 8000e80:	4630      	mov	r0, r6
 8000e82:	e709      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000e84:	4607      	mov	r7, r0
 8000e86:	e6e7      	b.n	8000c58 <__udivmoddi4+0x60>
 8000e88:	4618      	mov	r0, r3
 8000e8a:	e6fb      	b.n	8000c84 <__udivmoddi4+0x8c>
 8000e8c:	4541      	cmp	r1, r8
 8000e8e:	d2ab      	bcs.n	8000de8 <__udivmoddi4+0x1f0>
 8000e90:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e94:	eb69 020e 	sbc.w	r2, r9, lr
 8000e98:	3801      	subs	r0, #1
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	e7a4      	b.n	8000de8 <__udivmoddi4+0x1f0>
 8000e9e:	4660      	mov	r0, ip
 8000ea0:	e7e9      	b.n	8000e76 <__udivmoddi4+0x27e>
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	e795      	b.n	8000dd2 <__udivmoddi4+0x1da>
 8000ea6:	4667      	mov	r7, ip
 8000ea8:	e7d1      	b.n	8000e4e <__udivmoddi4+0x256>
 8000eaa:	4681      	mov	r9, r0
 8000eac:	e77c      	b.n	8000da8 <__udivmoddi4+0x1b0>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	442c      	add	r4, r5
 8000eb2:	e747      	b.n	8000d44 <__udivmoddi4+0x14c>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	442b      	add	r3, r5
 8000eba:	e72f      	b.n	8000d1c <__udivmoddi4+0x124>
 8000ebc:	4638      	mov	r0, r7
 8000ebe:	e708      	b.n	8000cd2 <__udivmoddi4+0xda>
 8000ec0:	4637      	mov	r7, r6
 8000ec2:	e6e9      	b.n	8000c98 <__udivmoddi4+0xa0>

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8000ed4:	4b34      	ldr	r3, [pc, #208]	; (8000fa8 <EXTI_Init+0xe0>)
 8000ed6:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	799b      	ldrb	r3, [r3, #6]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d04f      	beq.n	8000f80 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8000ee0:	4b31      	ldr	r3, [pc, #196]	; (8000fa8 <EXTI_Init+0xe0>)
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	492f      	ldr	r1, [pc, #188]	; (8000fa8 <EXTI_Init+0xe0>)
 8000eec:	4013      	ands	r3, r2
 8000eee:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8000ef0:	4b2d      	ldr	r3, [pc, #180]	; (8000fa8 <EXTI_Init+0xe0>)
 8000ef2:	685a      	ldr	r2, [r3, #4]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	492b      	ldr	r1, [pc, #172]	; (8000fa8 <EXTI_Init+0xe0>)
 8000efc:	4013      	ands	r3, r2
 8000efe:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	791b      	ldrb	r3, [r3, #4]
 8000f04:	461a      	mov	r2, r3
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	4413      	add	r3, r2
 8000f0a:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	6819      	ldr	r1, [r3, #0]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	430a      	orrs	r2, r1
 8000f18:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000f1a:	4b23      	ldr	r3, [pc, #140]	; (8000fa8 <EXTI_Init+0xe0>)
 8000f1c:	689a      	ldr	r2, [r3, #8]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	43db      	mvns	r3, r3
 8000f24:	4920      	ldr	r1, [pc, #128]	; (8000fa8 <EXTI_Init+0xe0>)
 8000f26:	4013      	ands	r3, r2
 8000f28:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000f2a:	4b1f      	ldr	r3, [pc, #124]	; (8000fa8 <EXTI_Init+0xe0>)
 8000f2c:	68da      	ldr	r2, [r3, #12]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	43db      	mvns	r3, r3
 8000f34:	491c      	ldr	r1, [pc, #112]	; (8000fa8 <EXTI_Init+0xe0>)
 8000f36:	4013      	ands	r3, r2
 8000f38:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	795b      	ldrb	r3, [r3, #5]
 8000f3e:	2b10      	cmp	r3, #16
 8000f40:	d10e      	bne.n	8000f60 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8000f42:	4b19      	ldr	r3, [pc, #100]	; (8000fa8 <EXTI_Init+0xe0>)
 8000f44:	689a      	ldr	r2, [r3, #8]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4917      	ldr	r1, [pc, #92]	; (8000fa8 <EXTI_Init+0xe0>)
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8000f50:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <EXTI_Init+0xe0>)
 8000f52:	68da      	ldr	r2, [r3, #12]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4913      	ldr	r1, [pc, #76]	; (8000fa8 <EXTI_Init+0xe0>)
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8000f5e:	e01d      	b.n	8000f9c <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
 8000f60:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <EXTI_Init+0xe0>)
 8000f62:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	795b      	ldrb	r3, [r3, #5]
 8000f68:	461a      	mov	r2, r3
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	6819      	ldr	r1, [r3, #0]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	430a      	orrs	r2, r1
 8000f7c:	601a      	str	r2, [r3, #0]
}
 8000f7e:	e00d      	b.n	8000f9c <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	791b      	ldrb	r3, [r3, #4]
 8000f84:	461a      	mov	r2, r3
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	4413      	add	r3, r2
 8000f8a:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	6819      	ldr	r1, [r3, #0]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	43da      	mvns	r2, r3
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	400a      	ands	r2, r1
 8000f9a:	601a      	str	r2, [r3, #0]
}
 8000f9c:	bf00      	nop
 8000f9e:	3714      	adds	r7, #20
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	40013c00 	.word	0x40013c00

08000fac <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b087      	sub	sp, #28
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]
 8000fba:	2300      	movs	r3, #0
 8000fbc:	613b      	str	r3, [r7, #16]
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	617b      	str	r3, [r7, #20]
 8000fc6:	e076      	b.n	80010b6 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000fc8:	2201      	movs	r2, #1
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000fdc:	68fa      	ldr	r2, [r7, #12]
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d165      	bne.n	80010b0 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	2103      	movs	r1, #3
 8000fee:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	401a      	ands	r2, r3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	791b      	ldrb	r3, [r3, #4]
 8001002:	4619      	mov	r1, r3
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	fa01 f303 	lsl.w	r3, r1, r3
 800100c:	431a      	orrs	r2, r3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	791b      	ldrb	r3, [r3, #4]
 8001016:	2b01      	cmp	r3, #1
 8001018:	d003      	beq.n	8001022 <GPIO_Init+0x76>
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	791b      	ldrb	r3, [r3, #4]
 800101e:	2b02      	cmp	r3, #2
 8001020:	d12e      	bne.n	8001080 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	689a      	ldr	r2, [r3, #8]
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	2103      	movs	r1, #3
 800102c:	fa01 f303 	lsl.w	r3, r1, r3
 8001030:	43db      	mvns	r3, r3
 8001032:	401a      	ands	r2, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	689a      	ldr	r2, [r3, #8]
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	795b      	ldrb	r3, [r3, #5]
 8001040:	4619      	mov	r1, r3
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	fa01 f303 	lsl.w	r3, r1, r3
 800104a:	431a      	orrs	r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	685a      	ldr	r2, [r3, #4]
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	b29b      	uxth	r3, r3
 8001058:	4619      	mov	r1, r3
 800105a:	2301      	movs	r3, #1
 800105c:	408b      	lsls	r3, r1
 800105e:	43db      	mvns	r3, r3
 8001060:	401a      	ands	r2, r3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	683a      	ldr	r2, [r7, #0]
 800106c:	7992      	ldrb	r2, [r2, #6]
 800106e:	4611      	mov	r1, r2
 8001070:	697a      	ldr	r2, [r7, #20]
 8001072:	b292      	uxth	r2, r2
 8001074:	fa01 f202 	lsl.w	r2, r1, r2
 8001078:	b292      	uxth	r2, r2
 800107a:	431a      	orrs	r2, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	68da      	ldr	r2, [r3, #12]
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	b29b      	uxth	r3, r3
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	2103      	movs	r1, #3
 800108c:	fa01 f303 	lsl.w	r3, r1, r3
 8001090:	43db      	mvns	r3, r3
 8001092:	401a      	ands	r2, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	68da      	ldr	r2, [r3, #12]
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	79db      	ldrb	r3, [r3, #7]
 80010a0:	4619      	mov	r1, r3
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	fa01 f303 	lsl.w	r3, r1, r3
 80010aa:	431a      	orrs	r2, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	3301      	adds	r3, #1
 80010b4:	617b      	str	r3, [r7, #20]
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	2b0f      	cmp	r3, #15
 80010ba:	d985      	bls.n	8000fc8 <GPIO_Init+0x1c>
    }
  }
}
 80010bc:	bf00      	nop
 80010be:	371c      	adds	r7, #28
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *          This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	460b      	mov	r3, r1
 80010d2:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80010d4:	2300      	movs	r3, #0
 80010d6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if (((GPIOx->ODR) & GPIO_Pin) != (uint32_t)Bit_RESET)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	695a      	ldr	r2, [r3, #20]
 80010dc:	887b      	ldrh	r3, [r7, #2]
 80010de:	4013      	ands	r3, r2
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d002      	beq.n	80010ea <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 80010e4:	2301      	movs	r3, #1
 80010e6:	73fb      	strb	r3, [r7, #15]
 80010e8:	e001      	b.n	80010ee <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80010ea:	2300      	movs	r3, #0
 80010ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80010ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3714      	adds	r7, #20
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	460b      	mov	r3, r1
 8001106:	807b      	strh	r3, [r7, #2]
 8001108:	4613      	mov	r3, r2
 800110a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 800110c:	787b      	ldrb	r3, [r7, #1]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d003      	beq.n	800111a <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	887a      	ldrh	r2, [r7, #2]
 8001116:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
 8001118:	e002      	b.n	8001120 <GPIO_WriteBit+0x24>
    GPIOx->BSRRH = GPIO_Pin ;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	887a      	ldrh	r2, [r7, #2]
 800111e:	835a      	strh	r2, [r3, #26]
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <GPIO_ToggleBits>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	460b      	mov	r3, r1
 8001136:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	695a      	ldr	r2, [r3, #20]
 800113c:	887b      	ldrh	r3, [r7, #2]
 800113e:	405a      	eors	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	615a      	str	r2, [r3, #20]
}
 8001144:	bf00      	nop
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	460b      	mov	r3, r1
 800115a:	807b      	strh	r3, [r7, #2]
 800115c:	4613      	mov	r3, r2
 800115e:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8001160:	2300      	movs	r3, #0
 8001162:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8001164:	2300      	movs	r3, #0
 8001166:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001168:	787a      	ldrb	r2, [r7, #1]
 800116a:	887b      	ldrh	r3, [r7, #2]
 800116c:	f003 0307 	and.w	r3, r3, #7
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001178:	887b      	ldrh	r3, [r7, #2]
 800117a:	08db      	lsrs	r3, r3, #3
 800117c:	b29b      	uxth	r3, r3
 800117e:	461a      	mov	r2, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	3208      	adds	r2, #8
 8001184:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001188:	887b      	ldrh	r3, [r7, #2]
 800118a:	f003 0307 	and.w	r3, r3, #7
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	210f      	movs	r1, #15
 8001192:	fa01 f303 	lsl.w	r3, r1, r3
 8001196:	43db      	mvns	r3, r3
 8001198:	8879      	ldrh	r1, [r7, #2]
 800119a:	08c9      	lsrs	r1, r1, #3
 800119c:	b289      	uxth	r1, r1
 800119e:	4608      	mov	r0, r1
 80011a0:	ea02 0103 	and.w	r1, r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f100 0208 	add.w	r2, r0, #8
 80011aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80011ae:	887b      	ldrh	r3, [r7, #2]
 80011b0:	08db      	lsrs	r3, r3, #3
 80011b2:	b29b      	uxth	r3, r3
 80011b4:	461a      	mov	r2, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	3208      	adds	r2, #8
 80011ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011be:	68fa      	ldr	r2, [r7, #12]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80011c4:	887b      	ldrh	r3, [r7, #2]
 80011c6:	08db      	lsrs	r3, r3, #3
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	461a      	mov	r2, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	3208      	adds	r2, #8
 80011d0:	68b9      	ldr	r1, [r7, #8]
 80011d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80011d6:	bf00      	nop
 80011d8:	3714      	adds	r7, #20
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
	...

080011e4 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80011e8:	4b16      	ldr	r3, [pc, #88]	; (8001244 <RCC_DeInit+0x60>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a15      	ldr	r2, [pc, #84]	; (8001244 <RCC_DeInit+0x60>)
 80011ee:	f043 0301 	orr.w	r3, r3, #1
 80011f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80011f4:	4b13      	ldr	r3, [pc, #76]	; (8001244 <RCC_DeInit+0x60>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 80011fa:	4b12      	ldr	r3, [pc, #72]	; (8001244 <RCC_DeInit+0x60>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a11      	ldr	r2, [pc, #68]	; (8001244 <RCC_DeInit+0x60>)
 8001200:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001204:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001208:	6013      	str	r3, [r2, #0]
  
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800120a:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <RCC_DeInit+0x60>)
 800120c:	4a0e      	ldr	r2, [pc, #56]	; (8001248 <RCC_DeInit+0x64>)
 800120e:	605a      	str	r2, [r3, #4]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F413_423xx) || defined(STM32F469_479xx)  
  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 8001210:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <RCC_DeInit+0x60>)
 8001212:	4a0e      	ldr	r2, [pc, #56]	; (800124c <RCC_DeInit+0x68>)
 8001214:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM32F446xx || STM32F413_423xx || STM32F469_479xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx) 
  /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
  RCC->PLLSAICFGR = 0x24003000;
 8001218:	4b0a      	ldr	r3, [pc, #40]	; (8001244 <RCC_DeInit+0x60>)
 800121a:	4a0d      	ldr	r2, [pc, #52]	; (8001250 <RCC_DeInit+0x6c>)
 800121c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
  
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001220:	4b08      	ldr	r3, [pc, #32]	; (8001244 <RCC_DeInit+0x60>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a07      	ldr	r2, [pc, #28]	; (8001244 <RCC_DeInit+0x60>)
 8001226:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800122a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800122c:	4b05      	ldr	r3, [pc, #20]	; (8001244 <RCC_DeInit+0x60>)
 800122e:	2200      	movs	r2, #0
 8001230:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx and STM32F413_423xx devices */
  RCC->DCKCFGR = 0x00000000;
 8001232:	4b04      	ldr	r3, [pc, #16]	; (8001244 <RCC_DeInit+0x60>)
 8001234:	2200      	movs	r2, #0
 8001236:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  
#if defined(STM32F410xx) || defined(STM32F413_423xx)
  /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F413_423xx devices */
  RCC->DCKCFGR2 = 0x00000000;
#endif /* STM32F410xx || STM32F413_423xx */  
}
 800123a:	bf00      	nop
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	40023800 	.word	0x40023800
 8001248:	24003010 	.word	0x24003010
 800124c:	20003000 	.word	0x20003000
 8001250:	24003000 	.word	0x24003000

08001254 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001254:	b480      	push	{r7}
 8001256:	b08b      	sub	sp, #44	; 0x2c
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800125c:	2300      	movs	r3, #0
 800125e:	623b      	str	r3, [r7, #32]
 8001260:	2300      	movs	r3, #0
 8001262:	61fb      	str	r3, [r7, #28]
 8001264:	2300      	movs	r3, #0
 8001266:	627b      	str	r3, [r7, #36]	; 0x24
 8001268:	2302      	movs	r3, #2
 800126a:	61bb      	str	r3, [r7, #24]
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]
 8001270:	2302      	movs	r3, #2
 8001272:	613b      	str	r3, [r7, #16]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
 8001274:	2302      	movs	r3, #2
 8001276:	60fb      	str	r3, [r7, #12]
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001278:	4b6f      	ldr	r3, [pc, #444]	; (8001438 <RCC_GetClocksFreq+0x1e4>)
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	f003 030c 	and.w	r3, r3, #12
 8001280:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 8001282:	6a3b      	ldr	r3, [r7, #32]
 8001284:	2b0c      	cmp	r3, #12
 8001286:	f200 8091 	bhi.w	80013ac <RCC_GetClocksFreq+0x158>
 800128a:	a201      	add	r2, pc, #4	; (adr r2, 8001290 <RCC_GetClocksFreq+0x3c>)
 800128c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001290:	080012c5 	.word	0x080012c5
 8001294:	080013ad 	.word	0x080013ad
 8001298:	080013ad 	.word	0x080013ad
 800129c:	080013ad 	.word	0x080013ad
 80012a0:	080012cd 	.word	0x080012cd
 80012a4:	080013ad 	.word	0x080013ad
 80012a8:	080013ad 	.word	0x080013ad
 80012ac:	080013ad 	.word	0x080013ad
 80012b0:	080012d5 	.word	0x080012d5
 80012b4:	080013ad 	.word	0x080013ad
 80012b8:	080013ad 	.word	0x080013ad
 80012bc:	080013ad 	.word	0x080013ad
 80012c0:	08001341 	.word	0x08001341
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4a5d      	ldr	r2, [pc, #372]	; (800143c <RCC_GetClocksFreq+0x1e8>)
 80012c8:	601a      	str	r2, [r3, #0]
    break;
 80012ca:	e073      	b.n	80013b4 <RCC_GetClocksFreq+0x160>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4a5c      	ldr	r2, [pc, #368]	; (8001440 <RCC_GetClocksFreq+0x1ec>)
 80012d0:	601a      	str	r2, [r3, #0]
    break;
 80012d2:	e06f      	b.n	80013b4 <RCC_GetClocksFreq+0x160>
  case 0x08:  /* PLL P used as system clock  source */
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80012d4:	4b58      	ldr	r3, [pc, #352]	; (8001438 <RCC_GetClocksFreq+0x1e4>)
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	0d9b      	lsrs	r3, r3, #22
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	617b      	str	r3, [r7, #20]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80012e0:	4b55      	ldr	r3, [pc, #340]	; (8001438 <RCC_GetClocksFreq+0x1e4>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80012e8:	613b      	str	r3, [r7, #16]
    
    if (pllsource != 0)
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d00c      	beq.n	800130a <RCC_GetClocksFreq+0xb6>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80012f0:	4a53      	ldr	r2, [pc, #332]	; (8001440 <RCC_GetClocksFreq+0x1ec>)
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80012f8:	4a4f      	ldr	r2, [pc, #316]	; (8001438 <RCC_GetClocksFreq+0x1e4>)
 80012fa:	6852      	ldr	r2, [r2, #4]
 80012fc:	0992      	lsrs	r2, r2, #6
 80012fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001302:	fb02 f303 	mul.w	r3, r2, r3
 8001306:	627b      	str	r3, [r7, #36]	; 0x24
 8001308:	e00b      	b.n	8001322 <RCC_GetClocksFreq+0xce>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800130a:	4a4c      	ldr	r2, [pc, #304]	; (800143c <RCC_GetClocksFreq+0x1e8>)
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001312:	4a49      	ldr	r2, [pc, #292]	; (8001438 <RCC_GetClocksFreq+0x1e4>)
 8001314:	6852      	ldr	r2, [r2, #4]
 8001316:	0992      	lsrs	r2, r2, #6
 8001318:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800131c:	fb02 f303 	mul.w	r3, r2, r3
 8001320:	627b      	str	r3, [r7, #36]	; 0x24
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001322:	4b45      	ldr	r3, [pc, #276]	; (8001438 <RCC_GetClocksFreq+0x1e4>)
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	0c1b      	lsrs	r3, r3, #16
 8001328:	f003 0303 	and.w	r3, r3, #3
 800132c:	3301      	adds	r3, #1
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	61bb      	str	r3, [r7, #24]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8001332:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	fbb2 f2f3 	udiv	r2, r2, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	601a      	str	r2, [r3, #0]
    break;
 800133e:	e039      	b.n	80013b4 <RCC_GetClocksFreq+0x160>
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
  case 0x0C:  /* PLL R used as system clock  source */
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001340:	4b3d      	ldr	r3, [pc, #244]	; (8001438 <RCC_GetClocksFreq+0x1e4>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	0d9b      	lsrs	r3, r3, #22
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	617b      	str	r3, [r7, #20]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800134c:	4b3a      	ldr	r3, [pc, #232]	; (8001438 <RCC_GetClocksFreq+0x1e4>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001354:	613b      	str	r3, [r7, #16]
    
    if (pllsource != 0)
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d00c      	beq.n	8001376 <RCC_GetClocksFreq+0x122>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800135c:	4a38      	ldr	r2, [pc, #224]	; (8001440 <RCC_GetClocksFreq+0x1ec>)
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	fbb2 f3f3 	udiv	r3, r2, r3
 8001364:	4a34      	ldr	r2, [pc, #208]	; (8001438 <RCC_GetClocksFreq+0x1e4>)
 8001366:	6852      	ldr	r2, [r2, #4]
 8001368:	0992      	lsrs	r2, r2, #6
 800136a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800136e:	fb02 f303 	mul.w	r3, r2, r3
 8001372:	627b      	str	r3, [r7, #36]	; 0x24
 8001374:	e00b      	b.n	800138e <RCC_GetClocksFreq+0x13a>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001376:	4a31      	ldr	r2, [pc, #196]	; (800143c <RCC_GetClocksFreq+0x1e8>)
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	fbb2 f3f3 	udiv	r3, r2, r3
 800137e:	4a2e      	ldr	r2, [pc, #184]	; (8001438 <RCC_GetClocksFreq+0x1e4>)
 8001380:	6852      	ldr	r2, [r2, #4]
 8001382:	0992      	lsrs	r2, r2, #6
 8001384:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001388:	fb02 f303 	mul.w	r3, r2, r3
 800138c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >>28) + 1 ) *2;
 800138e:	4b2a      	ldr	r3, [pc, #168]	; (8001438 <RCC_GetClocksFreq+0x1e4>)
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	0f1b      	lsrs	r3, r3, #28
 8001394:	f003 0307 	and.w	r3, r3, #7
 8001398:	3301      	adds	r3, #1
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	60fb      	str	r3, [r7, #12]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
 800139e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	601a      	str	r2, [r3, #0]
    break;
 80013aa:	e003      	b.n	80013b4 <RCC_GetClocksFreq+0x160>
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	4a23      	ldr	r2, [pc, #140]	; (800143c <RCC_GetClocksFreq+0x1e8>)
 80013b0:	601a      	str	r2, [r3, #0]
    break;
 80013b2:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80013b4:	4b20      	ldr	r3, [pc, #128]	; (8001438 <RCC_GetClocksFreq+0x1e4>)
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013bc:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 80013be:	6a3b      	ldr	r3, [r7, #32]
 80013c0:	091b      	lsrs	r3, r3, #4
 80013c2:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 80013c4:	4a1f      	ldr	r2, [pc, #124]	; (8001444 <RCC_GetClocksFreq+0x1f0>)
 80013c6:	6a3b      	ldr	r3, [r7, #32]
 80013c8:	4413      	add	r3, r2
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	61fb      	str	r3, [r7, #28]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	40da      	lsrs	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80013dc:	4b16      	ldr	r3, [pc, #88]	; (8001438 <RCC_GetClocksFreq+0x1e4>)
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80013e4:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 10;
 80013e6:	6a3b      	ldr	r3, [r7, #32]
 80013e8:	0a9b      	lsrs	r3, r3, #10
 80013ea:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 80013ec:	4a15      	ldr	r2, [pc, #84]	; (8001444 <RCC_GetClocksFreq+0x1f0>)
 80013ee:	6a3b      	ldr	r3, [r7, #32]
 80013f0:	4413      	add	r3, r2
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	61fb      	str	r3, [r7, #28]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685a      	ldr	r2, [r3, #4]
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	40da      	lsrs	r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8001404:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <RCC_GetClocksFreq+0x1e4>)
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800140c:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 13;
 800140e:	6a3b      	ldr	r3, [r7, #32]
 8001410:	0b5b      	lsrs	r3, r3, #13
 8001412:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8001414:	4a0b      	ldr	r2, [pc, #44]	; (8001444 <RCC_GetClocksFreq+0x1f0>)
 8001416:	6a3b      	ldr	r3, [r7, #32]
 8001418:	4413      	add	r3, r2
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	b2db      	uxtb	r3, r3
 800141e:	61fb      	str	r3, [r7, #28]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	685a      	ldr	r2, [r3, #4]
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	40da      	lsrs	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	60da      	str	r2, [r3, #12]
}
 800142c:	bf00      	nop
 800142e:	372c      	adds	r7, #44	; 0x2c
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	40023800 	.word	0x40023800
 800143c:	00f42400 	.word	0x00f42400
 8001440:	007a1200 	.word	0x007a1200
 8001444:	20000000 	.word	0x20000000

08001448 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	460b      	mov	r3, r1
 8001452:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001454:	78fb      	ldrb	r3, [r7, #3]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d006      	beq.n	8001468 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800145a:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <RCC_AHB1PeriphClockCmd+0x3c>)
 800145c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800145e:	4909      	ldr	r1, [pc, #36]	; (8001484 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	4313      	orrs	r3, r2
 8001464:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8001466:	e006      	b.n	8001476 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8001468:	4b06      	ldr	r3, [pc, #24]	; (8001484 <RCC_AHB1PeriphClockCmd+0x3c>)
 800146a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	43db      	mvns	r3, r3
 8001470:	4904      	ldr	r1, [pc, #16]	; (8001484 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001472:	4013      	ands	r3, r2
 8001474:	630b      	str	r3, [r1, #48]	; 0x30
}
 8001476:	bf00      	nop
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	40023800 	.word	0x40023800

08001488 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	460b      	mov	r3, r1
 8001492:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001494:	78fb      	ldrb	r3, [r7, #3]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d006      	beq.n	80014a8 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800149a:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <RCC_APB1PeriphClockCmd+0x3c>)
 800149c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800149e:	4909      	ldr	r1, [pc, #36]	; (80014c4 <RCC_APB1PeriphClockCmd+0x3c>)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80014a6:	e006      	b.n	80014b6 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80014a8:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <RCC_APB1PeriphClockCmd+0x3c>)
 80014aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	43db      	mvns	r3, r3
 80014b0:	4904      	ldr	r1, [pc, #16]	; (80014c4 <RCC_APB1PeriphClockCmd+0x3c>)
 80014b2:	4013      	ands	r3, r2
 80014b4:	640b      	str	r3, [r1, #64]	; 0x40
}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	40023800 	.word	0x40023800

080014c8 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	460b      	mov	r3, r1
 80014d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80014d4:	78fb      	ldrb	r3, [r7, #3]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d006      	beq.n	80014e8 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80014da:	4b0a      	ldr	r3, [pc, #40]	; (8001504 <RCC_APB2PeriphClockCmd+0x3c>)
 80014dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80014de:	4909      	ldr	r1, [pc, #36]	; (8001504 <RCC_APB2PeriphClockCmd+0x3c>)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80014e6:	e006      	b.n	80014f6 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80014e8:	4b06      	ldr	r3, [pc, #24]	; (8001504 <RCC_APB2PeriphClockCmd+0x3c>)
 80014ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	43db      	mvns	r3, r3
 80014f0:	4904      	ldr	r1, [pc, #16]	; (8001504 <RCC_APB2PeriphClockCmd+0x3c>)
 80014f2:	4013      	ands	r3, r2
 80014f4:	644b      	str	r3, [r1, #68]	; 0x44
}
 80014f6:	bf00      	nop
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	40023800 	.word	0x40023800

08001508 <RTC_GetTime>:
  * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that will 
  *                        contain the returned current time configuration.     
  * @retval None
  */
void RTC_GetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
 8001516:	4b24      	ldr	r3, [pc, #144]	; (80015a8 <RTC_GetTime+0xa0>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800151e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8001522:	60fb      	str	r3, [r7, #12]
  
  /* Fill the structure fields with the read parameters */
  RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	0c1b      	lsrs	r3, r3, #16
 8001528:	b2db      	uxtb	r3, r3
 800152a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800152e:	b2da      	uxtb	r2, r3
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	701a      	strb	r2, [r3, #0]
  RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	0a1b      	lsrs	r3, r3, #8
 8001538:	b2db      	uxtb	r3, r3
 800153a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800153e:	b2da      	uxtb	r2, r3
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	705a      	strb	r2, [r3, #1]
  RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	b2db      	uxtb	r3, r3
 8001548:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800154c:	b2da      	uxtb	r2, r3
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	709a      	strb	r2, [r3, #2]
  RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	0c1b      	lsrs	r3, r3, #16
 8001556:	b2db      	uxtb	r3, r3
 8001558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800155c:	b2da      	uxtb	r2, r3
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d11a      	bne.n	800159e <RTC_GetTime+0x96>
  {
    /* Convert the structure parameters to Binary format */
    RTC_TimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	4618      	mov	r0, r3
 800156e:	f000 f86b 	bl	8001648 <RTC_Bcd2ToByte>
 8001572:	4603      	mov	r3, r0
 8001574:	461a      	mov	r2, r3
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	701a      	strb	r2, [r3, #0]
    RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	785b      	ldrb	r3, [r3, #1]
 800157e:	4618      	mov	r0, r3
 8001580:	f000 f862 	bl	8001648 <RTC_Bcd2ToByte>
 8001584:	4603      	mov	r3, r0
 8001586:	461a      	mov	r2, r3
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	705a      	strb	r2, [r3, #1]
    RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);   
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	789b      	ldrb	r3, [r3, #2]
 8001590:	4618      	mov	r0, r3
 8001592:	f000 f859 	bl	8001648 <RTC_Bcd2ToByte>
 8001596:	4603      	mov	r3, r0
 8001598:	461a      	mov	r2, r3
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	709a      	strb	r2, [r3, #2]
  }
}
 800159e:	bf00      	nop
 80015a0:	3710      	adds	r7, #16
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40002800 	.word	0x40002800

080015ac <RTC_GetDate>:
  * @param RTC_DateStruct: pointer to a RTC_DateTypeDef structure that will 
  *                        contain the returned current date configuration.     
  * @retval None
  */
void RTC_GetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80015b6:	2300      	movs	r3, #0
 80015b8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  
  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 
 80015ba:	4b22      	ldr	r3, [pc, #136]	; (8001644 <RTC_GetDate+0x98>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80015c2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80015c6:	60fb      	str	r3, [r7, #12]

  /* Fill the structure fields with the read parameters */
  RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	0c1b      	lsrs	r3, r3, #16
 80015cc:	b2da      	uxtb	r2, r3
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	70da      	strb	r2, [r3, #3]
  RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	0a1b      	lsrs	r3, r3, #8
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	f003 031f 	and.w	r3, r3, #31
 80015dc:	b2da      	uxtb	r2, r3
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	705a      	strb	r2, [r3, #1]
  RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015ea:	b2da      	uxtb	r2, r3
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	709a      	strb	r2, [r3, #2]
  RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	0b5b      	lsrs	r3, r3, #13
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	f003 0307 	and.w	r3, r3, #7
 80015fa:	b2da      	uxtb	r2, r3
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d11a      	bne.n	800163c <RTC_GetDate+0x90>
  {
    /* Convert the structure parameters to Binary format */
    RTC_DateStruct->RTC_Year = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year);
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	78db      	ldrb	r3, [r3, #3]
 800160a:	4618      	mov	r0, r3
 800160c:	f000 f81c 	bl	8001648 <RTC_Bcd2ToByte>
 8001610:	4603      	mov	r3, r0
 8001612:	461a      	mov	r2, r3
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	70da      	strb	r2, [r3, #3]
    RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	785b      	ldrb	r3, [r3, #1]
 800161c:	4618      	mov	r0, r3
 800161e:	f000 f813 	bl	8001648 <RTC_Bcd2ToByte>
 8001622:	4603      	mov	r3, r0
 8001624:	461a      	mov	r2, r3
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	705a      	strb	r2, [r3, #1]
    RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	789b      	ldrb	r3, [r3, #2]
 800162e:	4618      	mov	r0, r3
 8001630:	f000 f80a 	bl	8001648 <RTC_Bcd2ToByte>
 8001634:	4603      	mov	r3, r0
 8001636:	461a      	mov	r2, r3
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	709a      	strb	r2, [r3, #2]
  }
}
 800163c:	bf00      	nop
 800163e:	3710      	adds	r7, #16
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40002800 	.word	0x40002800

08001648 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted.
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8001648:	b480      	push	{r7}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0;
 8001652:	2300      	movs	r3, #0
 8001654:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8001656:	79fb      	ldrb	r3, [r7, #7]
 8001658:	091b      	lsrs	r3, r3, #4
 800165a:	b2db      	uxtb	r3, r3
 800165c:	461a      	mov	r2, r3
 800165e:	0092      	lsls	r2, r2, #2
 8001660:	4413      	add	r3, r2
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & (uint8_t)0x0F));
 8001666:	79fb      	ldrb	r3, [r7, #7]
 8001668:	f003 030f 	and.w	r3, r3, #15
 800166c:	b2da      	uxtb	r2, r3
 800166e:	7bfb      	ldrb	r3, [r7, #15]
 8001670:	4413      	add	r3, r2
 8001672:	b2db      	uxtb	r3, r3
}
 8001674:	4618      	mov	r0, r3
 8001676:	3714      	adds	r7, #20
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <SYSCFG_EXTILineConfig>:
  *           be (0..7) for STM32F42xxx/43xxx devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	460a      	mov	r2, r1
 800168a:	71fb      	strb	r3, [r7, #7]
 800168c:	4613      	mov	r3, r2
 800168e:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8001690:	2300      	movs	r3, #0
 8001692:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8001694:	79bb      	ldrb	r3, [r7, #6]
 8001696:	f003 0303 	and.w	r3, r3, #3
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	220f      	movs	r2, #15
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 80016a4:	4a16      	ldr	r2, [pc, #88]	; (8001700 <SYSCFG_EXTILineConfig+0x80>)
 80016a6:	79bb      	ldrb	r3, [r7, #6]
 80016a8:	089b      	lsrs	r3, r3, #2
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	3302      	adds	r3, #2
 80016ae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	43db      	mvns	r3, r3
 80016b6:	4812      	ldr	r0, [pc, #72]	; (8001700 <SYSCFG_EXTILineConfig+0x80>)
 80016b8:	79b9      	ldrb	r1, [r7, #6]
 80016ba:	0889      	lsrs	r1, r1, #2
 80016bc:	b2c9      	uxtb	r1, r1
 80016be:	401a      	ands	r2, r3
 80016c0:	1c8b      	adds	r3, r1, #2
 80016c2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 80016c6:	4a0e      	ldr	r2, [pc, #56]	; (8001700 <SYSCFG_EXTILineConfig+0x80>)
 80016c8:	79bb      	ldrb	r3, [r7, #6]
 80016ca:	089b      	lsrs	r3, r3, #2
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	3302      	adds	r3, #2
 80016d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80016d4:	79f9      	ldrb	r1, [r7, #7]
 80016d6:	79bb      	ldrb	r3, [r7, #6]
 80016d8:	f003 0303 	and.w	r3, r3, #3
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	fa01 f303 	lsl.w	r3, r1, r3
 80016e2:	4807      	ldr	r0, [pc, #28]	; (8001700 <SYSCFG_EXTILineConfig+0x80>)
 80016e4:	79b9      	ldrb	r1, [r7, #6]
 80016e6:	0889      	lsrs	r1, r1, #2
 80016e8:	b2c9      	uxtb	r1, r1
 80016ea:	431a      	orrs	r2, r3
 80016ec:	1c8b      	adds	r3, r1, #2
 80016ee:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80016f2:	bf00      	nop
 80016f4:	3714      	adds	r7, #20
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	40013800 	.word	0x40013800

08001704 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b08a      	sub	sp, #40	; 0x28
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 800170e:	2300      	movs	r3, #0
 8001710:	627b      	str	r3, [r7, #36]	; 0x24
 8001712:	2300      	movs	r3, #0
 8001714:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 8001716:	2300      	movs	r3, #0
 8001718:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 800171a:	2300      	movs	r3, #0
 800171c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	8a1b      	ldrh	r3, [r3, #16]
 8001722:	b29b      	uxth	r3, r3
 8001724:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001728:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800172c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	88db      	ldrh	r3, [r3, #6]
 8001732:	461a      	mov	r2, r3
 8001734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001736:	4313      	orrs	r3, r2
 8001738:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800173a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173c:	b29a      	uxth	r2, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	899b      	ldrh	r3, [r3, #12]
 8001746:	b29b      	uxth	r3, r3
 8001748:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 800174a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174c:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001750:	f023 030c 	bic.w	r3, r3, #12
 8001754:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	889a      	ldrh	r2, [r3, #4]
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	891b      	ldrh	r3, [r3, #8]
 800175e:	4313      	orrs	r3, r2
 8001760:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8001766:	4313      	orrs	r3, r2
 8001768:	b29b      	uxth	r3, r3
 800176a:	461a      	mov	r2, r3
 800176c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176e:	4313      	orrs	r3, r2
 8001770:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8001772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001774:	b29a      	uxth	r2, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	8a9b      	ldrh	r3, [r3, #20]
 800177e:	b29b      	uxth	r3, r3
 8001780:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8001782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001784:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001788:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	899b      	ldrh	r3, [r3, #12]
 800178e:	461a      	mov	r2, r3
 8001790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001792:	4313      	orrs	r3, r2
 8001794:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8001796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001798:	b29a      	uxth	r2, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800179e:	f107 0308 	add.w	r3, r7, #8
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff fd56 	bl	8001254 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4a30      	ldr	r2, [pc, #192]	; (800186c <USART_Init+0x168>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d003      	beq.n	80017b8 <USART_Init+0xb4>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	4a2f      	ldr	r2, [pc, #188]	; (8001870 <USART_Init+0x16c>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d102      	bne.n	80017be <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	623b      	str	r3, [r7, #32]
 80017bc:	e001      	b.n	80017c2 <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	899b      	ldrh	r3, [r3, #12]
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	b21b      	sxth	r3, r3
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	da0c      	bge.n	80017e8 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 80017ce:	6a3a      	ldr	r2, [r7, #32]
 80017d0:	4613      	mov	r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	4413      	add	r3, r2
 80017d6:	009a      	lsls	r2, r3, #2
 80017d8:	441a      	add	r2, r3
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e4:	61fb      	str	r3, [r7, #28]
 80017e6:	e00b      	b.n	8001800 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 80017e8:	6a3a      	ldr	r2, [r7, #32]
 80017ea:	4613      	mov	r3, r2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	4413      	add	r3, r2
 80017f0:	009a      	lsls	r2, r3, #2
 80017f2:	441a      	add	r2, r3
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80017fe:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	4a1c      	ldr	r2, [pc, #112]	; (8001874 <USART_Init+0x170>)
 8001804:	fba2 2303 	umull	r2, r3, r2, r3
 8001808:	095b      	lsrs	r3, r3, #5
 800180a:	011b      	lsls	r3, r3, #4
 800180c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 800180e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001810:	091b      	lsrs	r3, r3, #4
 8001812:	2264      	movs	r2, #100	; 0x64
 8001814:	fb02 f303 	mul.w	r3, r2, r3
 8001818:	69fa      	ldr	r2, [r7, #28]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	899b      	ldrh	r3, [r3, #12]
 8001822:	b29b      	uxth	r3, r3
 8001824:	b21b      	sxth	r3, r3
 8001826:	2b00      	cmp	r3, #0
 8001828:	da0c      	bge.n	8001844 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	00db      	lsls	r3, r3, #3
 800182e:	3332      	adds	r3, #50	; 0x32
 8001830:	4a10      	ldr	r2, [pc, #64]	; (8001874 <USART_Init+0x170>)
 8001832:	fba2 2303 	umull	r2, r3, r2, r3
 8001836:	095b      	lsrs	r3, r3, #5
 8001838:	f003 0307 	and.w	r3, r3, #7
 800183c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800183e:	4313      	orrs	r3, r2
 8001840:	627b      	str	r3, [r7, #36]	; 0x24
 8001842:	e00b      	b.n	800185c <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	011b      	lsls	r3, r3, #4
 8001848:	3332      	adds	r3, #50	; 0x32
 800184a:	4a0a      	ldr	r2, [pc, #40]	; (8001874 <USART_Init+0x170>)
 800184c:	fba2 2303 	umull	r2, r3, r2, r3
 8001850:	095b      	lsrs	r3, r3, #5
 8001852:	f003 030f 	and.w	r3, r3, #15
 8001856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001858:	4313      	orrs	r3, r2
 800185a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 800185c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185e:	b29a      	uxth	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	811a      	strh	r2, [r3, #8]
}
 8001864:	bf00      	nop
 8001866:	3728      	adds	r7, #40	; 0x28
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40011000 	.word	0x40011000
 8001870:	40011400 	.word	0x40011400
 8001874:	51eb851f 	.word	0x51eb851f

08001878 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	460b      	mov	r3, r1
 8001882:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001884:	78fb      	ldrb	r3, [r7, #3]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d008      	beq.n	800189c <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	899b      	ldrh	r3, [r3, #12]
 800188e:	b29b      	uxth	r3, r3
 8001890:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001894:	b29a      	uxth	r2, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 800189a:	e007      	b.n	80018ac <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	899b      	ldrh	r3, [r3, #12]
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80018a6:	b29a      	uxth	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	819a      	strh	r2, [r3, #12]
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	460b      	mov	r3, r1
 80018c2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 80018c4:	887b      	ldrh	r3, [r7, #2]
 80018c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	809a      	strh	r2, [r3, #4]
}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	889b      	ldrh	r3, [r3, #4]
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018ee:	b29b      	uxth	r3, r3
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b087      	sub	sp, #28
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	460b      	mov	r3, r1
 8001906:	807b      	strh	r3, [r7, #2]
 8001908:	4613      	mov	r3, r2
 800190a:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 800190c:	2300      	movs	r3, #0
 800190e:	613b      	str	r3, [r7, #16]
 8001910:	2300      	movs	r3, #0
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	2300      	movs	r3, #0
 8001916:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8001918:	2300      	movs	r3, #0
 800191a:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001920:	887b      	ldrh	r3, [r7, #2]
 8001922:	b2db      	uxtb	r3, r3
 8001924:	095b      	lsrs	r3, r3, #5
 8001926:	b2db      	uxtb	r3, r3
 8001928:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 800192a:	887b      	ldrh	r3, [r7, #2]
 800192c:	f003 031f 	and.w	r3, r3, #31
 8001930:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8001932:	2201      	movs	r2, #1
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	2b01      	cmp	r3, #1
 8001940:	d103      	bne.n	800194a <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	330c      	adds	r3, #12
 8001946:	617b      	str	r3, [r7, #20]
 8001948:	e009      	b.n	800195e <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	2b02      	cmp	r3, #2
 800194e:	d103      	bne.n	8001958 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	3310      	adds	r3, #16
 8001954:	617b      	str	r3, [r7, #20]
 8001956:	e002      	b.n	800195e <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	3314      	adds	r3, #20
 800195c:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 800195e:	787b      	ldrb	r3, [r7, #1]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d006      	beq.n	8001972 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	6819      	ldr	r1, [r3, #0]
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	68ba      	ldr	r2, [r7, #8]
 800196c:	430a      	orrs	r2, r1
 800196e:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8001970:	e006      	b.n	8001980 <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	6819      	ldr	r1, [r3, #0]
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	43da      	mvns	r2, r3
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	400a      	ands	r2, r1
 800197e:	601a      	str	r2, [r3, #0]
}
 8001980:	bf00      	nop
 8001982:	371c      	adds	r7, #28
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	460b      	mov	r3, r1
 8001996:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8001998:	2300      	movs	r3, #0
 800199a:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	881b      	ldrh	r3, [r3, #0]
 80019a0:	b29a      	uxth	r2, r3
 80019a2:	887b      	ldrh	r3, [r7, #2]
 80019a4:	4013      	ands	r3, r2
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d002      	beq.n	80019b2 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 80019ac:	2301      	movs	r3, #1
 80019ae:	73fb      	strb	r3, [r7, #15]
 80019b0:	e001      	b.n	80019b6 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 80019b2:	2300      	movs	r3, #0
 80019b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3714      	adds	r7, #20
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f103 0208 	add.w	r2, r3, #8
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f04f 32ff 	mov.w	r2, #4294967295
 80019dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f103 0208 	add.w	r2, r3, #8
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f103 0208 	add.w	r2, r3, #8
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80019f8:	bf00      	nop
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001a1e:	b480      	push	{r7}
 8001a20:	b085      	sub	sp, #20
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
 8001a26:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	68fa      	ldr	r2, [r7, #12]
 8001a32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	689a      	ldr	r2, [r3, #8]
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	683a      	ldr	r2, [r7, #0]
 8001a42:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	1c5a      	adds	r2, r3, #1
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	601a      	str	r2, [r3, #0]
}
 8001a5a:	bf00      	nop
 8001a5c:	3714      	adds	r7, #20
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001a66:	b480      	push	{r7}
 8001a68:	b085      	sub	sp, #20
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
 8001a6e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a7c:	d103      	bne.n	8001a86 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	691b      	ldr	r3, [r3, #16]
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	e00c      	b.n	8001aa0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	3308      	adds	r3, #8
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	e002      	b.n	8001a94 <vListInsert+0x2e>
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	68ba      	ldr	r2, [r7, #8]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d2f6      	bcs.n	8001a8e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	685a      	ldr	r2, [r3, #4]
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	683a      	ldr	r2, [r7, #0]
 8001aae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	68fa      	ldr	r2, [r7, #12]
 8001ab4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	1c5a      	adds	r2, r3, #1
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	601a      	str	r2, [r3, #0]
}
 8001acc:	bf00      	nop
 8001ace:	3714      	adds	r7, #20
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	691b      	ldr	r3, [r3, #16]
 8001ae4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	6892      	ldr	r2, [r2, #8]
 8001aee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	6852      	ldr	r2, [r2, #4]
 8001af8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d103      	bne.n	8001b0c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689a      	ldr	r2, [r3, #8]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	1e5a      	subs	r2, r3, #1
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3714      	adds	r7, #20
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d109      	bne.n	8001b54 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b44:	f383 8811 	msr	BASEPRI, r3
 8001b48:	f3bf 8f6f 	isb	sy
 8001b4c:	f3bf 8f4f 	dsb	sy
 8001b50:	60bb      	str	r3, [r7, #8]
 8001b52:	e7fe      	b.n	8001b52 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8001b54:	f002 f842 	bl	8003bdc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b60:	68f9      	ldr	r1, [r7, #12]
 8001b62:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001b64:	fb01 f303 	mul.w	r3, r1, r3
 8001b68:	441a      	add	r2, r3
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2200      	movs	r2, #0
 8001b72:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b84:	3b01      	subs	r3, #1
 8001b86:	68f9      	ldr	r1, [r7, #12]
 8001b88:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001b8a:	fb01 f303 	mul.w	r3, r1, r3
 8001b8e:	441a      	add	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	22ff      	movs	r2, #255	; 0xff
 8001b98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	22ff      	movs	r2, #255	; 0xff
 8001ba0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d114      	bne.n	8001bd4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d01a      	beq.n	8001be8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	3310      	adds	r3, #16
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f000 fffc 	bl	8002bb4 <xTaskRemoveFromEventList>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d012      	beq.n	8001be8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001bc2:	4b0d      	ldr	r3, [pc, #52]	; (8001bf8 <xQueueGenericReset+0xcc>)
 8001bc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	f3bf 8f4f 	dsb	sy
 8001bce:	f3bf 8f6f 	isb	sy
 8001bd2:	e009      	b.n	8001be8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	3310      	adds	r3, #16
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff fef3 	bl	80019c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	3324      	adds	r3, #36	; 0x24
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff feee 	bl	80019c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001be8:	f002 f826 	bl	8003c38 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001bec:	2301      	movs	r3, #1
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	e000ed04 	.word	0xe000ed04

08001bfc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b08a      	sub	sp, #40	; 0x28
 8001c00:	af02      	add	r7, sp, #8
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	4613      	mov	r3, r2
 8001c08:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d109      	bne.n	8001c24 <xQueueGenericCreate+0x28>
 8001c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c14:	f383 8811 	msr	BASEPRI, r3
 8001c18:	f3bf 8f6f 	isb	sy
 8001c1c:	f3bf 8f4f 	dsb	sy
 8001c20:	613b      	str	r3, [r7, #16]
 8001c22:	e7fe      	b.n	8001c22 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d102      	bne.n	8001c30 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	61fb      	str	r3, [r7, #28]
 8001c2e:	e004      	b.n	8001c3a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	68ba      	ldr	r2, [r7, #8]
 8001c34:	fb02 f303 	mul.w	r3, r2, r3
 8001c38:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	3350      	adds	r3, #80	; 0x50
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f002 f8e6 	bl	8003e10 <pvPortMalloc>
 8001c44:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d00d      	beq.n	8001c68 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	3350      	adds	r3, #80	; 0x50
 8001c54:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001c56:	79fa      	ldrb	r2, [r7, #7]
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	9300      	str	r3, [sp, #0]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	697a      	ldr	r2, [r7, #20]
 8001c60:	68b9      	ldr	r1, [r7, #8]
 8001c62:	68f8      	ldr	r0, [r7, #12]
 8001c64:	f000 f805 	bl	8001c72 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001c68:	69bb      	ldr	r3, [r7, #24]
	}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3720      	adds	r7, #32
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b084      	sub	sp, #16
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	60f8      	str	r0, [r7, #12]
 8001c7a:	60b9      	str	r1, [r7, #8]
 8001c7c:	607a      	str	r2, [r7, #4]
 8001c7e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d103      	bne.n	8001c8e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	e002      	b.n	8001c94 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	68fa      	ldr	r2, [r7, #12]
 8001c98:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	68ba      	ldr	r2, [r7, #8]
 8001c9e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001ca0:	2101      	movs	r1, #1
 8001ca2:	69b8      	ldr	r0, [r7, #24]
 8001ca4:	f7ff ff42 	bl	8001b2c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	78fa      	ldrb	r2, [r7, #3]
 8001cac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001cb0:	bf00      	nop
 8001cb2:	3710      	adds	r7, #16
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b08e      	sub	sp, #56	; 0x38
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
 8001cc4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d109      	bne.n	8001ce8 <xQueueGenericSend+0x30>
 8001cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cd8:	f383 8811 	msr	BASEPRI, r3
 8001cdc:	f3bf 8f6f 	isb	sy
 8001ce0:	f3bf 8f4f 	dsb	sy
 8001ce4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ce6:	e7fe      	b.n	8001ce6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d103      	bne.n	8001cf6 <xQueueGenericSend+0x3e>
 8001cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d101      	bne.n	8001cfa <xQueueGenericSend+0x42>
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e000      	b.n	8001cfc <xQueueGenericSend+0x44>
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d109      	bne.n	8001d14 <xQueueGenericSend+0x5c>
 8001d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d04:	f383 8811 	msr	BASEPRI, r3
 8001d08:	f3bf 8f6f 	isb	sy
 8001d0c:	f3bf 8f4f 	dsb	sy
 8001d10:	627b      	str	r3, [r7, #36]	; 0x24
 8001d12:	e7fe      	b.n	8001d12 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d103      	bne.n	8001d22 <xQueueGenericSend+0x6a>
 8001d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d101      	bne.n	8001d26 <xQueueGenericSend+0x6e>
 8001d22:	2301      	movs	r3, #1
 8001d24:	e000      	b.n	8001d28 <xQueueGenericSend+0x70>
 8001d26:	2300      	movs	r3, #0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d109      	bne.n	8001d40 <xQueueGenericSend+0x88>
 8001d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d30:	f383 8811 	msr	BASEPRI, r3
 8001d34:	f3bf 8f6f 	isb	sy
 8001d38:	f3bf 8f4f 	dsb	sy
 8001d3c:	623b      	str	r3, [r7, #32]
 8001d3e:	e7fe      	b.n	8001d3e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001d40:	f001 f8d0 	bl	8002ee4 <xTaskGetSchedulerState>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d102      	bne.n	8001d50 <xQueueGenericSend+0x98>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d101      	bne.n	8001d54 <xQueueGenericSend+0x9c>
 8001d50:	2301      	movs	r3, #1
 8001d52:	e000      	b.n	8001d56 <xQueueGenericSend+0x9e>
 8001d54:	2300      	movs	r3, #0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d109      	bne.n	8001d6e <xQueueGenericSend+0xb6>
 8001d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d5e:	f383 8811 	msr	BASEPRI, r3
 8001d62:	f3bf 8f6f 	isb	sy
 8001d66:	f3bf 8f4f 	dsb	sy
 8001d6a:	61fb      	str	r3, [r7, #28]
 8001d6c:	e7fe      	b.n	8001d6c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001d6e:	f001 ff35 	bl	8003bdc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d302      	bcc.n	8001d84 <xQueueGenericSend+0xcc>
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d129      	bne.n	8001dd8 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001d84:	683a      	ldr	r2, [r7, #0]
 8001d86:	68b9      	ldr	r1, [r7, #8]
 8001d88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001d8a:	f000 f9ff 	bl	800218c <prvCopyDataToQueue>
 8001d8e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d010      	beq.n	8001dba <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d9a:	3324      	adds	r3, #36	; 0x24
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f000 ff09 	bl	8002bb4 <xTaskRemoveFromEventList>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d013      	beq.n	8001dd0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001da8:	4b3f      	ldr	r3, [pc, #252]	; (8001ea8 <xQueueGenericSend+0x1f0>)
 8001daa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	f3bf 8f4f 	dsb	sy
 8001db4:	f3bf 8f6f 	isb	sy
 8001db8:	e00a      	b.n	8001dd0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d007      	beq.n	8001dd0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001dc0:	4b39      	ldr	r3, [pc, #228]	; (8001ea8 <xQueueGenericSend+0x1f0>)
 8001dc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	f3bf 8f4f 	dsb	sy
 8001dcc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001dd0:	f001 ff32 	bl	8003c38 <vPortExitCritical>
				return pdPASS;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e063      	b.n	8001ea0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d103      	bne.n	8001de6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001dde:	f001 ff2b 	bl	8003c38 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001de2:	2300      	movs	r3, #0
 8001de4:	e05c      	b.n	8001ea0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d106      	bne.n	8001dfa <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001dec:	f107 0314 	add.w	r3, r7, #20
 8001df0:	4618      	mov	r0, r3
 8001df2:	f000 ff41 	bl	8002c78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001df6:	2301      	movs	r3, #1
 8001df8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001dfa:	f001 ff1d 	bl	8003c38 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001dfe:	f000 fcbf 	bl	8002780 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001e02:	f001 feeb 	bl	8003bdc <vPortEnterCritical>
 8001e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e0c:	b25b      	sxtb	r3, r3
 8001e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e12:	d103      	bne.n	8001e1c <xQueueGenericSend+0x164>
 8001e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e22:	b25b      	sxtb	r3, r3
 8001e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e28:	d103      	bne.n	8001e32 <xQueueGenericSend+0x17a>
 8001e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001e32:	f001 ff01 	bl	8003c38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001e36:	1d3a      	adds	r2, r7, #4
 8001e38:	f107 0314 	add.w	r3, r7, #20
 8001e3c:	4611      	mov	r1, r2
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f000 ff30 	bl	8002ca4 <xTaskCheckForTimeOut>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d124      	bne.n	8001e94 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001e4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e4c:	f000 fa96 	bl	800237c <prvIsQueueFull>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d018      	beq.n	8001e88 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e58:	3310      	adds	r3, #16
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	4611      	mov	r1, r2
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f000 fe5a 	bl	8002b18 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001e64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e66:	f000 fa21 	bl	80022ac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001e6a:	f000 fc97 	bl	800279c <xTaskResumeAll>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f47f af7c 	bne.w	8001d6e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8001e76:	4b0c      	ldr	r3, [pc, #48]	; (8001ea8 <xQueueGenericSend+0x1f0>)
 8001e78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	f3bf 8f4f 	dsb	sy
 8001e82:	f3bf 8f6f 	isb	sy
 8001e86:	e772      	b.n	8001d6e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001e88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e8a:	f000 fa0f 	bl	80022ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001e8e:	f000 fc85 	bl	800279c <xTaskResumeAll>
 8001e92:	e76c      	b.n	8001d6e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001e94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e96:	f000 fa09 	bl	80022ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001e9a:	f000 fc7f 	bl	800279c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001e9e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3738      	adds	r7, #56	; 0x38
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	e000ed04 	.word	0xe000ed04

08001eac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b08e      	sub	sp, #56	; 0x38
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	60b9      	str	r1, [r7, #8]
 8001eb6:	607a      	str	r2, [r7, #4]
 8001eb8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d109      	bne.n	8001ed8 <xQueueGenericSendFromISR+0x2c>
 8001ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ec8:	f383 8811 	msr	BASEPRI, r3
 8001ecc:	f3bf 8f6f 	isb	sy
 8001ed0:	f3bf 8f4f 	dsb	sy
 8001ed4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ed6:	e7fe      	b.n	8001ed6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d103      	bne.n	8001ee6 <xQueueGenericSendFromISR+0x3a>
 8001ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <xQueueGenericSendFromISR+0x3e>
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e000      	b.n	8001eec <xQueueGenericSendFromISR+0x40>
 8001eea:	2300      	movs	r3, #0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d109      	bne.n	8001f04 <xQueueGenericSendFromISR+0x58>
 8001ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ef4:	f383 8811 	msr	BASEPRI, r3
 8001ef8:	f3bf 8f6f 	isb	sy
 8001efc:	f3bf 8f4f 	dsb	sy
 8001f00:	623b      	str	r3, [r7, #32]
 8001f02:	e7fe      	b.n	8001f02 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d103      	bne.n	8001f12 <xQueueGenericSendFromISR+0x66>
 8001f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d101      	bne.n	8001f16 <xQueueGenericSendFromISR+0x6a>
 8001f12:	2301      	movs	r3, #1
 8001f14:	e000      	b.n	8001f18 <xQueueGenericSendFromISR+0x6c>
 8001f16:	2300      	movs	r3, #0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d109      	bne.n	8001f30 <xQueueGenericSendFromISR+0x84>
 8001f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f20:	f383 8811 	msr	BASEPRI, r3
 8001f24:	f3bf 8f6f 	isb	sy
 8001f28:	f3bf 8f4f 	dsb	sy
 8001f2c:	61fb      	str	r3, [r7, #28]
 8001f2e:	e7fe      	b.n	8001f2e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001f30:	f001 ff30 	bl	8003d94 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001f34:	f3ef 8211 	mrs	r2, BASEPRI
 8001f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f3c:	f383 8811 	msr	BASEPRI, r3
 8001f40:	f3bf 8f6f 	isb	sy
 8001f44:	f3bf 8f4f 	dsb	sy
 8001f48:	61ba      	str	r2, [r7, #24]
 8001f4a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001f4c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d302      	bcc.n	8001f62 <xQueueGenericSendFromISR+0xb6>
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d12c      	bne.n	8001fbc <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8001f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001f6c:	683a      	ldr	r2, [r7, #0]
 8001f6e:	68b9      	ldr	r1, [r7, #8]
 8001f70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f72:	f000 f90b 	bl	800218c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8001f76:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8001f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f7e:	d112      	bne.n	8001fa6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d016      	beq.n	8001fb6 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f8a:	3324      	adds	r3, #36	; 0x24
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f000 fe11 	bl	8002bb4 <xTaskRemoveFromEventList>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d00e      	beq.n	8001fb6 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d00b      	beq.n	8001fb6 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	e007      	b.n	8001fb6 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001fa6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001faa:	3301      	adds	r3, #1
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	b25a      	sxtb	r2, r3
 8001fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8001fba:	e001      	b.n	8001fc0 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	637b      	str	r3, [r7, #52]	; 0x34
 8001fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fc2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3738      	adds	r7, #56	; 0x38
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b08c      	sub	sp, #48	; 0x30
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	60b9      	str	r1, [r7, #8]
 8001fde:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8001fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d109      	bne.n	8002002 <xQueueReceive+0x2e>
	__asm volatile
 8001fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ff2:	f383 8811 	msr	BASEPRI, r3
 8001ff6:	f3bf 8f6f 	isb	sy
 8001ffa:	f3bf 8f4f 	dsb	sy
 8001ffe:	623b      	str	r3, [r7, #32]
 8002000:	e7fe      	b.n	8002000 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d103      	bne.n	8002010 <xQueueReceive+0x3c>
 8002008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800200a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200c:	2b00      	cmp	r3, #0
 800200e:	d101      	bne.n	8002014 <xQueueReceive+0x40>
 8002010:	2301      	movs	r3, #1
 8002012:	e000      	b.n	8002016 <xQueueReceive+0x42>
 8002014:	2300      	movs	r3, #0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d109      	bne.n	800202e <xQueueReceive+0x5a>
 800201a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800201e:	f383 8811 	msr	BASEPRI, r3
 8002022:	f3bf 8f6f 	isb	sy
 8002026:	f3bf 8f4f 	dsb	sy
 800202a:	61fb      	str	r3, [r7, #28]
 800202c:	e7fe      	b.n	800202c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800202e:	f000 ff59 	bl	8002ee4 <xTaskGetSchedulerState>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d102      	bne.n	800203e <xQueueReceive+0x6a>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <xQueueReceive+0x6e>
 800203e:	2301      	movs	r3, #1
 8002040:	e000      	b.n	8002044 <xQueueReceive+0x70>
 8002042:	2300      	movs	r3, #0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d109      	bne.n	800205c <xQueueReceive+0x88>
 8002048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800204c:	f383 8811 	msr	BASEPRI, r3
 8002050:	f3bf 8f6f 	isb	sy
 8002054:	f3bf 8f4f 	dsb	sy
 8002058:	61bb      	str	r3, [r7, #24]
 800205a:	e7fe      	b.n	800205a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800205c:	f001 fdbe 	bl	8003bdc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002064:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002068:	2b00      	cmp	r3, #0
 800206a:	d01f      	beq.n	80020ac <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800206c:	68b9      	ldr	r1, [r7, #8]
 800206e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002070:	f000 f8f6 	bl	8002260 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002076:	1e5a      	subs	r2, r3, #1
 8002078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800207a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800207c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800207e:	691b      	ldr	r3, [r3, #16]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d00f      	beq.n	80020a4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002086:	3310      	adds	r3, #16
 8002088:	4618      	mov	r0, r3
 800208a:	f000 fd93 	bl	8002bb4 <xTaskRemoveFromEventList>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d007      	beq.n	80020a4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002094:	4b3c      	ldr	r3, [pc, #240]	; (8002188 <xQueueReceive+0x1b4>)
 8002096:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	f3bf 8f4f 	dsb	sy
 80020a0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80020a4:	f001 fdc8 	bl	8003c38 <vPortExitCritical>
				return pdPASS;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e069      	b.n	8002180 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d103      	bne.n	80020ba <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80020b2:	f001 fdc1 	bl	8003c38 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80020b6:	2300      	movs	r3, #0
 80020b8:	e062      	b.n	8002180 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80020ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d106      	bne.n	80020ce <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80020c0:	f107 0310 	add.w	r3, r7, #16
 80020c4:	4618      	mov	r0, r3
 80020c6:	f000 fdd7 	bl	8002c78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80020ca:	2301      	movs	r3, #1
 80020cc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80020ce:	f001 fdb3 	bl	8003c38 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80020d2:	f000 fb55 	bl	8002780 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80020d6:	f001 fd81 	bl	8003bdc <vPortEnterCritical>
 80020da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80020e0:	b25b      	sxtb	r3, r3
 80020e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020e6:	d103      	bne.n	80020f0 <xQueueReceive+0x11c>
 80020e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80020f6:	b25b      	sxtb	r3, r3
 80020f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020fc:	d103      	bne.n	8002106 <xQueueReceive+0x132>
 80020fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002100:	2200      	movs	r2, #0
 8002102:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002106:	f001 fd97 	bl	8003c38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800210a:	1d3a      	adds	r2, r7, #4
 800210c:	f107 0310 	add.w	r3, r7, #16
 8002110:	4611      	mov	r1, r2
 8002112:	4618      	mov	r0, r3
 8002114:	f000 fdc6 	bl	8002ca4 <xTaskCheckForTimeOut>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d123      	bne.n	8002166 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800211e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002120:	f000 f916 	bl	8002350 <prvIsQueueEmpty>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d017      	beq.n	800215a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800212a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800212c:	3324      	adds	r3, #36	; 0x24
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	4611      	mov	r1, r2
 8002132:	4618      	mov	r0, r3
 8002134:	f000 fcf0 	bl	8002b18 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002138:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800213a:	f000 f8b7 	bl	80022ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800213e:	f000 fb2d 	bl	800279c <xTaskResumeAll>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d189      	bne.n	800205c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8002148:	4b0f      	ldr	r3, [pc, #60]	; (8002188 <xQueueReceive+0x1b4>)
 800214a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	f3bf 8f4f 	dsb	sy
 8002154:	f3bf 8f6f 	isb	sy
 8002158:	e780      	b.n	800205c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800215a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800215c:	f000 f8a6 	bl	80022ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002160:	f000 fb1c 	bl	800279c <xTaskResumeAll>
 8002164:	e77a      	b.n	800205c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002166:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002168:	f000 f8a0 	bl	80022ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800216c:	f000 fb16 	bl	800279c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002170:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002172:	f000 f8ed 	bl	8002350 <prvIsQueueEmpty>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	f43f af6f 	beq.w	800205c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800217e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002180:	4618      	mov	r0, r3
 8002182:	3730      	adds	r7, #48	; 0x30
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	e000ed04 	.word	0xe000ed04

0800218c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002198:	2300      	movs	r3, #0
 800219a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021a0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d10d      	bne.n	80021c6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d14d      	bne.n	800224e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f000 feb2 	bl	8002f20 <xTaskPriorityDisinherit>
 80021bc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2200      	movs	r2, #0
 80021c2:	609a      	str	r2, [r3, #8]
 80021c4:	e043      	b.n	800224e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d119      	bne.n	8002200 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6858      	ldr	r0, [r3, #4]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d4:	461a      	mov	r2, r3
 80021d6:	68b9      	ldr	r1, [r7, #8]
 80021d8:	f002 fd8c 	bl	8004cf4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	685a      	ldr	r2, [r3, #4]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e4:	441a      	add	r2, r3
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	685a      	ldr	r2, [r3, #4]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d32b      	bcc.n	800224e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	605a      	str	r2, [r3, #4]
 80021fe:	e026      	b.n	800224e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	68d8      	ldr	r0, [r3, #12]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002208:	461a      	mov	r2, r3
 800220a:	68b9      	ldr	r1, [r7, #8]
 800220c:	f002 fd72 	bl	8004cf4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	68da      	ldr	r2, [r3, #12]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002218:	425b      	negs	r3, r3
 800221a:	441a      	add	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	68da      	ldr	r2, [r3, #12]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	429a      	cmp	r2, r3
 800222a:	d207      	bcs.n	800223c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	689a      	ldr	r2, [r3, #8]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002234:	425b      	negs	r3, r3
 8002236:	441a      	add	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2b02      	cmp	r3, #2
 8002240:	d105      	bne.n	800224e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d002      	beq.n	800224e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	3b01      	subs	r3, #1
 800224c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1c5a      	adds	r2, r3, #1
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002256:	697b      	ldr	r3, [r7, #20]
}
 8002258:	4618      	mov	r0, r3
 800225a:	3718      	adds	r7, #24
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226e:	2b00      	cmp	r3, #0
 8002270:	d018      	beq.n	80022a4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	68da      	ldr	r2, [r3, #12]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227a:	441a      	add	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	68da      	ldr	r2, [r3, #12]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	429a      	cmp	r2, r3
 800228a:	d303      	bcc.n	8002294 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	68d9      	ldr	r1, [r3, #12]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229c:	461a      	mov	r2, r3
 800229e:	6838      	ldr	r0, [r7, #0]
 80022a0:	f002 fd28 	bl	8004cf4 <memcpy>
	}
}
 80022a4:	bf00      	nop
 80022a6:	3708      	adds	r7, #8
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80022b4:	f001 fc92 	bl	8003bdc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80022be:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80022c0:	e011      	b.n	80022e6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d012      	beq.n	80022f0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	3324      	adds	r3, #36	; 0x24
 80022ce:	4618      	mov	r0, r3
 80022d0:	f000 fc70 	bl	8002bb4 <xTaskRemoveFromEventList>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80022da:	f000 fd43 	bl	8002d64 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80022de:	7bfb      	ldrb	r3, [r7, #15]
 80022e0:	3b01      	subs	r3, #1
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80022e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	dce9      	bgt.n	80022c2 <prvUnlockQueue+0x16>
 80022ee:	e000      	b.n	80022f2 <prvUnlockQueue+0x46>
					break;
 80022f0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	22ff      	movs	r2, #255	; 0xff
 80022f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80022fa:	f001 fc9d 	bl	8003c38 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80022fe:	f001 fc6d 	bl	8003bdc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002308:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800230a:	e011      	b.n	8002330 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d012      	beq.n	800233a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	3310      	adds	r3, #16
 8002318:	4618      	mov	r0, r3
 800231a:	f000 fc4b 	bl	8002bb4 <xTaskRemoveFromEventList>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002324:	f000 fd1e 	bl	8002d64 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002328:	7bbb      	ldrb	r3, [r7, #14]
 800232a:	3b01      	subs	r3, #1
 800232c:	b2db      	uxtb	r3, r3
 800232e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002330:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002334:	2b00      	cmp	r3, #0
 8002336:	dce9      	bgt.n	800230c <prvUnlockQueue+0x60>
 8002338:	e000      	b.n	800233c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800233a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	22ff      	movs	r2, #255	; 0xff
 8002340:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002344:	f001 fc78 	bl	8003c38 <vPortExitCritical>
}
 8002348:	bf00      	nop
 800234a:	3710      	adds	r7, #16
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002358:	f001 fc40 	bl	8003bdc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002360:	2b00      	cmp	r3, #0
 8002362:	d102      	bne.n	800236a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002364:	2301      	movs	r3, #1
 8002366:	60fb      	str	r3, [r7, #12]
 8002368:	e001      	b.n	800236e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800236a:	2300      	movs	r3, #0
 800236c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800236e:	f001 fc63 	bl	8003c38 <vPortExitCritical>

	return xReturn;
 8002372:	68fb      	ldr	r3, [r7, #12]
}
 8002374:	4618      	mov	r0, r3
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002384:	f001 fc2a 	bl	8003bdc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002390:	429a      	cmp	r2, r3
 8002392:	d102      	bne.n	800239a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002394:	2301      	movs	r3, #1
 8002396:	60fb      	str	r3, [r7, #12]
 8002398:	e001      	b.n	800239e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800239a:	2300      	movs	r3, #0
 800239c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800239e:	f001 fc4b 	bl	8003c38 <vPortExitCritical>

	return xReturn;
 80023a2:	68fb      	ldr	r3, [r7, #12]
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3710      	adds	r7, #16
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80023b6:	2300      	movs	r3, #0
 80023b8:	60fb      	str	r3, [r7, #12]
 80023ba:	e014      	b.n	80023e6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80023bc:	4a0e      	ldr	r2, [pc, #56]	; (80023f8 <vQueueAddToRegistry+0x4c>)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d10b      	bne.n	80023e0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80023c8:	490b      	ldr	r1, [pc, #44]	; (80023f8 <vQueueAddToRegistry+0x4c>)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	683a      	ldr	r2, [r7, #0]
 80023ce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80023d2:	4a09      	ldr	r2, [pc, #36]	; (80023f8 <vQueueAddToRegistry+0x4c>)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	4413      	add	r3, r2
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80023de:	e005      	b.n	80023ec <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	3301      	adds	r3, #1
 80023e4:	60fb      	str	r3, [r7, #12]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2b07      	cmp	r3, #7
 80023ea:	d9e7      	bls.n	80023bc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80023ec:	bf00      	nop
 80023ee:	3714      	adds	r7, #20
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr
 80023f8:	20013994 	.word	0x20013994

080023fc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800240c:	f001 fbe6 	bl	8003bdc <vPortEnterCritical>
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002416:	b25b      	sxtb	r3, r3
 8002418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800241c:	d103      	bne.n	8002426 <vQueueWaitForMessageRestricted+0x2a>
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800242c:	b25b      	sxtb	r3, r3
 800242e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002432:	d103      	bne.n	800243c <vQueueWaitForMessageRestricted+0x40>
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800243c:	f001 fbfc 	bl	8003c38 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002444:	2b00      	cmp	r3, #0
 8002446:	d106      	bne.n	8002456 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	3324      	adds	r3, #36	; 0x24
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	68b9      	ldr	r1, [r7, #8]
 8002450:	4618      	mov	r0, r3
 8002452:	f000 fb85 	bl	8002b60 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002456:	6978      	ldr	r0, [r7, #20]
 8002458:	f7ff ff28 	bl	80022ac <prvUnlockQueue>
	}
 800245c:	bf00      	nop
 800245e:	3718      	adds	r7, #24
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002464:	b580      	push	{r7, lr}
 8002466:	b08c      	sub	sp, #48	; 0x30
 8002468:	af04      	add	r7, sp, #16
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	603b      	str	r3, [r7, #0]
 8002470:	4613      	mov	r3, r2
 8002472:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002474:	88fb      	ldrh	r3, [r7, #6]
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	4618      	mov	r0, r3
 800247a:	f001 fcc9 	bl	8003e10 <pvPortMalloc>
 800247e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00e      	beq.n	80024a4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002486:	2058      	movs	r0, #88	; 0x58
 8002488:	f001 fcc2 	bl	8003e10 <pvPortMalloc>
 800248c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d003      	beq.n	800249c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	697a      	ldr	r2, [r7, #20]
 8002498:	631a      	str	r2, [r3, #48]	; 0x30
 800249a:	e005      	b.n	80024a8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800249c:	6978      	ldr	r0, [r7, #20]
 800249e:	f001 fd79 	bl	8003f94 <vPortFree>
 80024a2:	e001      	b.n	80024a8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80024a4:	2300      	movs	r3, #0
 80024a6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d013      	beq.n	80024d6 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80024ae:	88fa      	ldrh	r2, [r7, #6]
 80024b0:	2300      	movs	r3, #0
 80024b2:	9303      	str	r3, [sp, #12]
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	9302      	str	r3, [sp, #8]
 80024b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ba:	9301      	str	r3, [sp, #4]
 80024bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024be:	9300      	str	r3, [sp, #0]
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	68b9      	ldr	r1, [r7, #8]
 80024c4:	68f8      	ldr	r0, [r7, #12]
 80024c6:	f000 f80e 	bl	80024e6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80024ca:	69f8      	ldr	r0, [r7, #28]
 80024cc:	f000 f89e 	bl	800260c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80024d0:	2301      	movs	r3, #1
 80024d2:	61bb      	str	r3, [r7, #24]
 80024d4:	e002      	b.n	80024dc <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80024d6:	f04f 33ff 	mov.w	r3, #4294967295
 80024da:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80024dc:	69bb      	ldr	r3, [r7, #24]
	}
 80024de:	4618      	mov	r0, r3
 80024e0:	3720      	adds	r7, #32
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b088      	sub	sp, #32
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	60f8      	str	r0, [r7, #12]
 80024ee:	60b9      	str	r1, [r7, #8]
 80024f0:	607a      	str	r2, [r7, #4]
 80024f2:	603b      	str	r3, [r7, #0]
			xRunPrivileged = pdFALSE;
		}
		uxPriority &= ~portPRIVILEGE_BIT;
	#endif /* portUSING_MPU_WRAPPERS == 1 */

	configASSERT( pcName );
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d109      	bne.n	800250e <prvInitialiseNewTask+0x28>
 80024fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024fe:	f383 8811 	msr	BASEPRI, r3
 8002502:	f3bf 8f6f 	isb	sy
 8002506:	f3bf 8f4f 	dsb	sy
 800250a:	617b      	str	r3, [r7, #20]
 800250c:	e7fe      	b.n	800250c <prvInitialiseNewTask+0x26>

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800250e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002510:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	461a      	mov	r2, r3
 8002518:	21a5      	movs	r1, #165	; 0xa5
 800251a:	f002 fbf6 	bl	8004d0a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800251e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002520:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002528:	3b01      	subs	r3, #1
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	4413      	add	r3, r2
 800252e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	f023 0307 	bic.w	r3, r3, #7
 8002536:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	f003 0307 	and.w	r3, r3, #7
 800253e:	2b00      	cmp	r3, #0
 8002540:	d009      	beq.n	8002556 <prvInitialiseNewTask+0x70>
 8002542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002546:	f383 8811 	msr	BASEPRI, r3
 800254a:	f3bf 8f6f 	isb	sy
 800254e:	f3bf 8f4f 	dsb	sy
 8002552:	613b      	str	r3, [r7, #16]
 8002554:	e7fe      	b.n	8002554 <prvInitialiseNewTask+0x6e>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002556:	2300      	movs	r3, #0
 8002558:	61fb      	str	r3, [r7, #28]
 800255a:	e012      	b.n	8002582 <prvInitialiseNewTask+0x9c>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800255c:	68ba      	ldr	r2, [r7, #8]
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	4413      	add	r3, r2
 8002562:	7819      	ldrb	r1, [r3, #0]
 8002564:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	4413      	add	r3, r2
 800256a:	3334      	adds	r3, #52	; 0x34
 800256c:	460a      	mov	r2, r1
 800256e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == ( char ) 0x00 )
 8002570:	68ba      	ldr	r2, [r7, #8]
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	4413      	add	r3, r2
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d006      	beq.n	800258a <prvInitialiseNewTask+0xa4>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	3301      	adds	r3, #1
 8002580:	61fb      	str	r3, [r7, #28]
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	2b09      	cmp	r3, #9
 8002586:	d9e9      	bls.n	800255c <prvInitialiseNewTask+0x76>
 8002588:	e000      	b.n	800258c <prvInitialiseNewTask+0xa6>
		{
			break;
 800258a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800258c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800258e:	2200      	movs	r2, #0
 8002590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002596:	2b04      	cmp	r3, #4
 8002598:	d901      	bls.n	800259e <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800259a:	2304      	movs	r3, #4
 800259c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800259e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025a2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80025a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025a8:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 80025aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ac:	2200      	movs	r2, #0
 80025ae:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80025b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b2:	3304      	adds	r3, #4
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7ff fa25 	bl	8001a04 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80025ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025bc:	3318      	adds	r3, #24
 80025be:	4618      	mov	r0, r3
 80025c0:	f7ff fa20 	bl	8001a04 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80025c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025c8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80025ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025cc:	f1c3 0205 	rsb	r2, r3, #5
 80025d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80025d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025d8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80025da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025dc:	2200      	movs	r2, #0
 80025de:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80025e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80025e8:	683a      	ldr	r2, [r7, #0]
 80025ea:	68f9      	ldr	r1, [r7, #12]
 80025ec:	69b8      	ldr	r0, [r7, #24]
 80025ee:	f001 f9cd 	bl	800398c <pxPortInitialiseStack>
 80025f2:	4602      	mov	r2, r0
 80025f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80025f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d002      	beq.n	8002604 <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80025fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002600:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002602:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002604:	bf00      	nop
 8002606:	3720      	adds	r7, #32
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002614:	f001 fae2 	bl	8003bdc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002618:	4b2c      	ldr	r3, [pc, #176]	; (80026cc <prvAddNewTaskToReadyList+0xc0>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	3301      	adds	r3, #1
 800261e:	4a2b      	ldr	r2, [pc, #172]	; (80026cc <prvAddNewTaskToReadyList+0xc0>)
 8002620:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002622:	4b2b      	ldr	r3, [pc, #172]	; (80026d0 <prvAddNewTaskToReadyList+0xc4>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d109      	bne.n	800263e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800262a:	4a29      	ldr	r2, [pc, #164]	; (80026d0 <prvAddNewTaskToReadyList+0xc4>)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002630:	4b26      	ldr	r3, [pc, #152]	; (80026cc <prvAddNewTaskToReadyList+0xc0>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d110      	bne.n	800265a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002638:	f000 fbb8 	bl	8002dac <prvInitialiseTaskLists>
 800263c:	e00d      	b.n	800265a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800263e:	4b25      	ldr	r3, [pc, #148]	; (80026d4 <prvAddNewTaskToReadyList+0xc8>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d109      	bne.n	800265a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002646:	4b22      	ldr	r3, [pc, #136]	; (80026d0 <prvAddNewTaskToReadyList+0xc4>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002650:	429a      	cmp	r2, r3
 8002652:	d802      	bhi.n	800265a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002654:	4a1e      	ldr	r2, [pc, #120]	; (80026d0 <prvAddNewTaskToReadyList+0xc4>)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800265a:	4b1f      	ldr	r3, [pc, #124]	; (80026d8 <prvAddNewTaskToReadyList+0xcc>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	3301      	adds	r3, #1
 8002660:	4a1d      	ldr	r2, [pc, #116]	; (80026d8 <prvAddNewTaskToReadyList+0xcc>)
 8002662:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002664:	4b1c      	ldr	r3, [pc, #112]	; (80026d8 <prvAddNewTaskToReadyList+0xcc>)
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002670:	2201      	movs	r2, #1
 8002672:	409a      	lsls	r2, r3
 8002674:	4b19      	ldr	r3, [pc, #100]	; (80026dc <prvAddNewTaskToReadyList+0xd0>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4313      	orrs	r3, r2
 800267a:	4a18      	ldr	r2, [pc, #96]	; (80026dc <prvAddNewTaskToReadyList+0xd0>)
 800267c:	6013      	str	r3, [r2, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002682:	4613      	mov	r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	4413      	add	r3, r2
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	4a15      	ldr	r2, [pc, #84]	; (80026e0 <prvAddNewTaskToReadyList+0xd4>)
 800268c:	441a      	add	r2, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	3304      	adds	r3, #4
 8002692:	4619      	mov	r1, r3
 8002694:	4610      	mov	r0, r2
 8002696:	f7ff f9c2 	bl	8001a1e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800269a:	f001 facd 	bl	8003c38 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800269e:	4b0d      	ldr	r3, [pc, #52]	; (80026d4 <prvAddNewTaskToReadyList+0xc8>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d00e      	beq.n	80026c4 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80026a6:	4b0a      	ldr	r3, [pc, #40]	; (80026d0 <prvAddNewTaskToReadyList+0xc4>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d207      	bcs.n	80026c4 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80026b4:	4b0b      	ldr	r3, [pc, #44]	; (80026e4 <prvAddNewTaskToReadyList+0xd8>)
 80026b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	f3bf 8f4f 	dsb	sy
 80026c0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80026c4:	bf00      	nop
 80026c6:	3708      	adds	r7, #8
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	20000bb8 	.word	0x20000bb8
 80026d0:	20000ae0 	.word	0x20000ae0
 80026d4:	20000bc4 	.word	0x20000bc4
 80026d8:	20000bd4 	.word	0x20000bd4
 80026dc:	20000bc0 	.word	0x20000bc0
 80026e0:	20000ae4 	.word	0x20000ae4
 80026e4:	e000ed04 	.word	0xe000ed04

080026e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b086      	sub	sp, #24
 80026ec:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80026ee:	4b1e      	ldr	r3, [pc, #120]	; (8002768 <vTaskStartScheduler+0x80>)
 80026f0:	9301      	str	r3, [sp, #4]
 80026f2:	2300      	movs	r3, #0
 80026f4:	9300      	str	r3, [sp, #0]
 80026f6:	2300      	movs	r3, #0
 80026f8:	2282      	movs	r2, #130	; 0x82
 80026fa:	491c      	ldr	r1, [pc, #112]	; (800276c <vTaskStartScheduler+0x84>)
 80026fc:	481c      	ldr	r0, [pc, #112]	; (8002770 <vTaskStartScheduler+0x88>)
 80026fe:	f7ff feb1 	bl	8002464 <xTaskCreate>
 8002702:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2b01      	cmp	r3, #1
 8002708:	d102      	bne.n	8002710 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 800270a:	f000 fe25 	bl	8003358 <xTimerCreateTimerTask>
 800270e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d115      	bne.n	8002742 <vTaskStartScheduler+0x5a>
 8002716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800271a:	f383 8811 	msr	BASEPRI, r3
 800271e:	f3bf 8f6f 	isb	sy
 8002722:	f3bf 8f4f 	dsb	sy
 8002726:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002728:	4b12      	ldr	r3, [pc, #72]	; (8002774 <vTaskStartScheduler+0x8c>)
 800272a:	f04f 32ff 	mov.w	r2, #4294967295
 800272e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002730:	4b11      	ldr	r3, [pc, #68]	; (8002778 <vTaskStartScheduler+0x90>)
 8002732:	2201      	movs	r2, #1
 8002734:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002736:	4b11      	ldr	r3, [pc, #68]	; (800277c <vTaskStartScheduler+0x94>)
 8002738:	2200      	movs	r2, #0
 800273a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800273c:	f001 f9b0 	bl	8003aa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002740:	e00d      	b.n	800275e <vTaskStartScheduler+0x76>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002748:	d109      	bne.n	800275e <vTaskStartScheduler+0x76>
 800274a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800274e:	f383 8811 	msr	BASEPRI, r3
 8002752:	f3bf 8f6f 	isb	sy
 8002756:	f3bf 8f4f 	dsb	sy
 800275a:	607b      	str	r3, [r7, #4]
 800275c:	e7fe      	b.n	800275c <vTaskStartScheduler+0x74>
}
 800275e:	bf00      	nop
 8002760:	3710      	adds	r7, #16
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	20000bdc 	.word	0x20000bdc
 800276c:	08008170 	.word	0x08008170
 8002770:	08002d7d 	.word	0x08002d7d
 8002774:	20000bd8 	.word	0x20000bd8
 8002778:	20000bc4 	.word	0x20000bc4
 800277c:	20000bbc 	.word	0x20000bbc

08002780 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002784:	4b04      	ldr	r3, [pc, #16]	; (8002798 <vTaskSuspendAll+0x18>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	3301      	adds	r3, #1
 800278a:	4a03      	ldr	r2, [pc, #12]	; (8002798 <vTaskSuspendAll+0x18>)
 800278c:	6013      	str	r3, [r2, #0]
}
 800278e:	bf00      	nop
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr
 8002798:	20000be0 	.word	0x20000be0

0800279c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80027a2:	2300      	movs	r3, #0
 80027a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80027a6:	2300      	movs	r3, #0
 80027a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80027aa:	4b41      	ldr	r3, [pc, #260]	; (80028b0 <xTaskResumeAll+0x114>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d109      	bne.n	80027c6 <xTaskResumeAll+0x2a>
 80027b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027b6:	f383 8811 	msr	BASEPRI, r3
 80027ba:	f3bf 8f6f 	isb	sy
 80027be:	f3bf 8f4f 	dsb	sy
 80027c2:	603b      	str	r3, [r7, #0]
 80027c4:	e7fe      	b.n	80027c4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80027c6:	f001 fa09 	bl	8003bdc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80027ca:	4b39      	ldr	r3, [pc, #228]	; (80028b0 <xTaskResumeAll+0x114>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	3b01      	subs	r3, #1
 80027d0:	4a37      	ldr	r2, [pc, #220]	; (80028b0 <xTaskResumeAll+0x114>)
 80027d2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80027d4:	4b36      	ldr	r3, [pc, #216]	; (80028b0 <xTaskResumeAll+0x114>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d161      	bne.n	80028a0 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80027dc:	4b35      	ldr	r3, [pc, #212]	; (80028b4 <xTaskResumeAll+0x118>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d05d      	beq.n	80028a0 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80027e4:	e02e      	b.n	8002844 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80027e6:	4b34      	ldr	r3, [pc, #208]	; (80028b8 <xTaskResumeAll+0x11c>)
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	3318      	adds	r3, #24
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7ff f970 	bl	8001ad8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	3304      	adds	r3, #4
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff f96b 	bl	8001ad8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002806:	2201      	movs	r2, #1
 8002808:	409a      	lsls	r2, r3
 800280a:	4b2c      	ldr	r3, [pc, #176]	; (80028bc <xTaskResumeAll+0x120>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4313      	orrs	r3, r2
 8002810:	4a2a      	ldr	r2, [pc, #168]	; (80028bc <xTaskResumeAll+0x120>)
 8002812:	6013      	str	r3, [r2, #0]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002818:	4613      	mov	r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	4413      	add	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4a27      	ldr	r2, [pc, #156]	; (80028c0 <xTaskResumeAll+0x124>)
 8002822:	441a      	add	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	3304      	adds	r3, #4
 8002828:	4619      	mov	r1, r3
 800282a:	4610      	mov	r0, r2
 800282c:	f7ff f8f7 	bl	8001a1e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002834:	4b23      	ldr	r3, [pc, #140]	; (80028c4 <xTaskResumeAll+0x128>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283a:	429a      	cmp	r2, r3
 800283c:	d302      	bcc.n	8002844 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800283e:	4b22      	ldr	r3, [pc, #136]	; (80028c8 <xTaskResumeAll+0x12c>)
 8002840:	2201      	movs	r2, #1
 8002842:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002844:	4b1c      	ldr	r3, [pc, #112]	; (80028b8 <xTaskResumeAll+0x11c>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1cc      	bne.n	80027e6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002852:	f000 fb27 	bl	8002ea4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002856:	4b1d      	ldr	r3, [pc, #116]	; (80028cc <xTaskResumeAll+0x130>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d010      	beq.n	8002884 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002862:	f000 f847 	bl	80028f4 <xTaskIncrementTick>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d002      	beq.n	8002872 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800286c:	4b16      	ldr	r3, [pc, #88]	; (80028c8 <xTaskResumeAll+0x12c>)
 800286e:	2201      	movs	r2, #1
 8002870:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	3b01      	subs	r3, #1
 8002876:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1f1      	bne.n	8002862 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800287e:	4b13      	ldr	r3, [pc, #76]	; (80028cc <xTaskResumeAll+0x130>)
 8002880:	2200      	movs	r2, #0
 8002882:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002884:	4b10      	ldr	r3, [pc, #64]	; (80028c8 <xTaskResumeAll+0x12c>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d009      	beq.n	80028a0 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800288c:	2301      	movs	r3, #1
 800288e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002890:	4b0f      	ldr	r3, [pc, #60]	; (80028d0 <xTaskResumeAll+0x134>)
 8002892:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002896:	601a      	str	r2, [r3, #0]
 8002898:	f3bf 8f4f 	dsb	sy
 800289c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80028a0:	f001 f9ca 	bl	8003c38 <vPortExitCritical>

	return xAlreadyYielded;
 80028a4:	68bb      	ldr	r3, [r7, #8]
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	20000be0 	.word	0x20000be0
 80028b4:	20000bb8 	.word	0x20000bb8
 80028b8:	20000b78 	.word	0x20000b78
 80028bc:	20000bc0 	.word	0x20000bc0
 80028c0:	20000ae4 	.word	0x20000ae4
 80028c4:	20000ae0 	.word	0x20000ae0
 80028c8:	20000bcc 	.word	0x20000bcc
 80028cc:	20000bc8 	.word	0x20000bc8
 80028d0:	e000ed04 	.word	0xe000ed04

080028d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80028da:	4b05      	ldr	r3, [pc, #20]	; (80028f0 <xTaskGetTickCount+0x1c>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80028e0:	687b      	ldr	r3, [r7, #4]
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	20000bbc 	.word	0x20000bbc

080028f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b086      	sub	sp, #24
 80028f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80028fa:	2300      	movs	r3, #0
 80028fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80028fe:	4b4e      	ldr	r3, [pc, #312]	; (8002a38 <xTaskIncrementTick+0x144>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2b00      	cmp	r3, #0
 8002904:	f040 8087 	bne.w	8002a16 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002908:	4b4c      	ldr	r3, [pc, #304]	; (8002a3c <xTaskIncrementTick+0x148>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	3301      	adds	r3, #1
 800290e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002910:	4a4a      	ldr	r2, [pc, #296]	; (8002a3c <xTaskIncrementTick+0x148>)
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d11f      	bne.n	800295c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800291c:	4b48      	ldr	r3, [pc, #288]	; (8002a40 <xTaskIncrementTick+0x14c>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d009      	beq.n	800293a <xTaskIncrementTick+0x46>
 8002926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800292a:	f383 8811 	msr	BASEPRI, r3
 800292e:	f3bf 8f6f 	isb	sy
 8002932:	f3bf 8f4f 	dsb	sy
 8002936:	603b      	str	r3, [r7, #0]
 8002938:	e7fe      	b.n	8002938 <xTaskIncrementTick+0x44>
 800293a:	4b41      	ldr	r3, [pc, #260]	; (8002a40 <xTaskIncrementTick+0x14c>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	60fb      	str	r3, [r7, #12]
 8002940:	4b40      	ldr	r3, [pc, #256]	; (8002a44 <xTaskIncrementTick+0x150>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a3e      	ldr	r2, [pc, #248]	; (8002a40 <xTaskIncrementTick+0x14c>)
 8002946:	6013      	str	r3, [r2, #0]
 8002948:	4a3e      	ldr	r2, [pc, #248]	; (8002a44 <xTaskIncrementTick+0x150>)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6013      	str	r3, [r2, #0]
 800294e:	4b3e      	ldr	r3, [pc, #248]	; (8002a48 <xTaskIncrementTick+0x154>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	3301      	adds	r3, #1
 8002954:	4a3c      	ldr	r2, [pc, #240]	; (8002a48 <xTaskIncrementTick+0x154>)
 8002956:	6013      	str	r3, [r2, #0]
 8002958:	f000 faa4 	bl	8002ea4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800295c:	4b3b      	ldr	r3, [pc, #236]	; (8002a4c <xTaskIncrementTick+0x158>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	429a      	cmp	r2, r3
 8002964:	d348      	bcc.n	80029f8 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002966:	4b36      	ldr	r3, [pc, #216]	; (8002a40 <xTaskIncrementTick+0x14c>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d104      	bne.n	800297a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002970:	4b36      	ldr	r3, [pc, #216]	; (8002a4c <xTaskIncrementTick+0x158>)
 8002972:	f04f 32ff 	mov.w	r2, #4294967295
 8002976:	601a      	str	r2, [r3, #0]
					break;
 8002978:	e03e      	b.n	80029f8 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800297a:	4b31      	ldr	r3, [pc, #196]	; (8002a40 <xTaskIncrementTick+0x14c>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	429a      	cmp	r2, r3
 8002990:	d203      	bcs.n	800299a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002992:	4a2e      	ldr	r2, [pc, #184]	; (8002a4c <xTaskIncrementTick+0x158>)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002998:	e02e      	b.n	80029f8 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	3304      	adds	r3, #4
 800299e:	4618      	mov	r0, r3
 80029a0:	f7ff f89a 	bl	8001ad8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d004      	beq.n	80029b6 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	3318      	adds	r3, #24
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7ff f891 	bl	8001ad8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ba:	2201      	movs	r2, #1
 80029bc:	409a      	lsls	r2, r3
 80029be:	4b24      	ldr	r3, [pc, #144]	; (8002a50 <xTaskIncrementTick+0x15c>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	4a22      	ldr	r2, [pc, #136]	; (8002a50 <xTaskIncrementTick+0x15c>)
 80029c6:	6013      	str	r3, [r2, #0]
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029cc:	4613      	mov	r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	4413      	add	r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	4a1f      	ldr	r2, [pc, #124]	; (8002a54 <xTaskIncrementTick+0x160>)
 80029d6:	441a      	add	r2, r3
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	3304      	adds	r3, #4
 80029dc:	4619      	mov	r1, r3
 80029de:	4610      	mov	r0, r2
 80029e0:	f7ff f81d 	bl	8001a1e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029e8:	4b1b      	ldr	r3, [pc, #108]	; (8002a58 <xTaskIncrementTick+0x164>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d3b9      	bcc.n	8002966 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80029f2:	2301      	movs	r3, #1
 80029f4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80029f6:	e7b6      	b.n	8002966 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80029f8:	4b17      	ldr	r3, [pc, #92]	; (8002a58 <xTaskIncrementTick+0x164>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029fe:	4915      	ldr	r1, [pc, #84]	; (8002a54 <xTaskIncrementTick+0x160>)
 8002a00:	4613      	mov	r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	4413      	add	r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	440b      	add	r3, r1
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d907      	bls.n	8002a20 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8002a10:	2301      	movs	r3, #1
 8002a12:	617b      	str	r3, [r7, #20]
 8002a14:	e004      	b.n	8002a20 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002a16:	4b11      	ldr	r3, [pc, #68]	; (8002a5c <xTaskIncrementTick+0x168>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	4a0f      	ldr	r2, [pc, #60]	; (8002a5c <xTaskIncrementTick+0x168>)
 8002a1e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002a20:	4b0f      	ldr	r3, [pc, #60]	; (8002a60 <xTaskIncrementTick+0x16c>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d001      	beq.n	8002a2c <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002a2c:	697b      	ldr	r3, [r7, #20]
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3718      	adds	r7, #24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	20000be0 	.word	0x20000be0
 8002a3c:	20000bbc 	.word	0x20000bbc
 8002a40:	20000b70 	.word	0x20000b70
 8002a44:	20000b74 	.word	0x20000b74
 8002a48:	20000bd0 	.word	0x20000bd0
 8002a4c:	20000bd8 	.word	0x20000bd8
 8002a50:	20000bc0 	.word	0x20000bc0
 8002a54:	20000ae4 	.word	0x20000ae4
 8002a58:	20000ae0 	.word	0x20000ae0
 8002a5c:	20000bc8 	.word	0x20000bc8
 8002a60:	20000bcc 	.word	0x20000bcc

08002a64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002a64:	b480      	push	{r7}
 8002a66:	b087      	sub	sp, #28
 8002a68:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002a6a:	4b26      	ldr	r3, [pc, #152]	; (8002b04 <vTaskSwitchContext+0xa0>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d003      	beq.n	8002a7a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002a72:	4b25      	ldr	r3, [pc, #148]	; (8002b08 <vTaskSwitchContext+0xa4>)
 8002a74:	2201      	movs	r2, #1
 8002a76:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002a78:	e03e      	b.n	8002af8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8002a7a:	4b23      	ldr	r3, [pc, #140]	; (8002b08 <vTaskSwitchContext+0xa4>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a80:	4b22      	ldr	r3, [pc, #136]	; (8002b0c <vTaskSwitchContext+0xa8>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	fab3 f383 	clz	r3, r3
 8002a8c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002a8e:	7afb      	ldrb	r3, [r7, #11]
 8002a90:	f1c3 031f 	rsb	r3, r3, #31
 8002a94:	617b      	str	r3, [r7, #20]
 8002a96:	491e      	ldr	r1, [pc, #120]	; (8002b10 <vTaskSwitchContext+0xac>)
 8002a98:	697a      	ldr	r2, [r7, #20]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	4413      	add	r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	440b      	add	r3, r1
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d109      	bne.n	8002abe <vTaskSwitchContext+0x5a>
	__asm volatile
 8002aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aae:	f383 8811 	msr	BASEPRI, r3
 8002ab2:	f3bf 8f6f 	isb	sy
 8002ab6:	f3bf 8f4f 	dsb	sy
 8002aba:	607b      	str	r3, [r7, #4]
 8002abc:	e7fe      	b.n	8002abc <vTaskSwitchContext+0x58>
 8002abe:	697a      	ldr	r2, [r7, #20]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	4413      	add	r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	4a11      	ldr	r2, [pc, #68]	; (8002b10 <vTaskSwitchContext+0xac>)
 8002aca:	4413      	add	r3, r2
 8002acc:	613b      	str	r3, [r7, #16]
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	685a      	ldr	r2, [r3, #4]
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	605a      	str	r2, [r3, #4]
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	685a      	ldr	r2, [r3, #4]
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	3308      	adds	r3, #8
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d104      	bne.n	8002aee <vTaskSwitchContext+0x8a>
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	685a      	ldr	r2, [r3, #4]
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	605a      	str	r2, [r3, #4]
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	4a07      	ldr	r2, [pc, #28]	; (8002b14 <vTaskSwitchContext+0xb0>)
 8002af6:	6013      	str	r3, [r2, #0]
}
 8002af8:	bf00      	nop
 8002afa:	371c      	adds	r7, #28
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr
 8002b04:	20000be0 	.word	0x20000be0
 8002b08:	20000bcc 	.word	0x20000bcc
 8002b0c:	20000bc0 	.word	0x20000bc0
 8002b10:	20000ae4 	.word	0x20000ae4
 8002b14:	20000ae0 	.word	0x20000ae0

08002b18 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d109      	bne.n	8002b3c <vTaskPlaceOnEventList+0x24>
 8002b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b2c:	f383 8811 	msr	BASEPRI, r3
 8002b30:	f3bf 8f6f 	isb	sy
 8002b34:	f3bf 8f4f 	dsb	sy
 8002b38:	60fb      	str	r3, [r7, #12]
 8002b3a:	e7fe      	b.n	8002b3a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002b3c:	4b07      	ldr	r3, [pc, #28]	; (8002b5c <vTaskPlaceOnEventList+0x44>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	3318      	adds	r3, #24
 8002b42:	4619      	mov	r1, r3
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f7fe ff8e 	bl	8001a66 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002b4a:	2101      	movs	r1, #1
 8002b4c:	6838      	ldr	r0, [r7, #0]
 8002b4e:	f000 fb9d 	bl	800328c <prvAddCurrentTaskToDelayedList>
}
 8002b52:	bf00      	nop
 8002b54:	3710      	adds	r7, #16
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	20000ae0 	.word	0x20000ae0

08002b60 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b086      	sub	sp, #24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d109      	bne.n	8002b86 <vTaskPlaceOnEventListRestricted+0x26>
 8002b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b76:	f383 8811 	msr	BASEPRI, r3
 8002b7a:	f3bf 8f6f 	isb	sy
 8002b7e:	f3bf 8f4f 	dsb	sy
 8002b82:	617b      	str	r3, [r7, #20]
 8002b84:	e7fe      	b.n	8002b84 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002b86:	4b0a      	ldr	r3, [pc, #40]	; (8002bb0 <vTaskPlaceOnEventListRestricted+0x50>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	3318      	adds	r3, #24
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	68f8      	ldr	r0, [r7, #12]
 8002b90:	f7fe ff45 	bl	8001a1e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d002      	beq.n	8002ba0 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8002b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b9e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002ba0:	6879      	ldr	r1, [r7, #4]
 8002ba2:	68b8      	ldr	r0, [r7, #8]
 8002ba4:	f000 fb72 	bl	800328c <prvAddCurrentTaskToDelayedList>
	}
 8002ba8:	bf00      	nop
 8002baa:	3718      	adds	r7, #24
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	20000ae0 	.word	0x20000ae0

08002bb4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d109      	bne.n	8002bde <xTaskRemoveFromEventList+0x2a>
 8002bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bce:	f383 8811 	msr	BASEPRI, r3
 8002bd2:	f3bf 8f6f 	isb	sy
 8002bd6:	f3bf 8f4f 	dsb	sy
 8002bda:	60fb      	str	r3, [r7, #12]
 8002bdc:	e7fe      	b.n	8002bdc <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	3318      	adds	r3, #24
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7fe ff78 	bl	8001ad8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002be8:	4b1d      	ldr	r3, [pc, #116]	; (8002c60 <xTaskRemoveFromEventList+0xac>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d11c      	bne.n	8002c2a <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	3304      	adds	r3, #4
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7fe ff6f 	bl	8001ad8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfe:	2201      	movs	r2, #1
 8002c00:	409a      	lsls	r2, r3
 8002c02:	4b18      	ldr	r3, [pc, #96]	; (8002c64 <xTaskRemoveFromEventList+0xb0>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	4a16      	ldr	r2, [pc, #88]	; (8002c64 <xTaskRemoveFromEventList+0xb0>)
 8002c0a:	6013      	str	r3, [r2, #0]
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c10:	4613      	mov	r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	4413      	add	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	4a13      	ldr	r2, [pc, #76]	; (8002c68 <xTaskRemoveFromEventList+0xb4>)
 8002c1a:	441a      	add	r2, r3
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	3304      	adds	r3, #4
 8002c20:	4619      	mov	r1, r3
 8002c22:	4610      	mov	r0, r2
 8002c24:	f7fe fefb 	bl	8001a1e <vListInsertEnd>
 8002c28:	e005      	b.n	8002c36 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	3318      	adds	r3, #24
 8002c2e:	4619      	mov	r1, r3
 8002c30:	480e      	ldr	r0, [pc, #56]	; (8002c6c <xTaskRemoveFromEventList+0xb8>)
 8002c32:	f7fe fef4 	bl	8001a1e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c3a:	4b0d      	ldr	r3, [pc, #52]	; (8002c70 <xTaskRemoveFromEventList+0xbc>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d905      	bls.n	8002c50 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002c44:	2301      	movs	r3, #1
 8002c46:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002c48:	4b0a      	ldr	r3, [pc, #40]	; (8002c74 <xTaskRemoveFromEventList+0xc0>)
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	601a      	str	r2, [r3, #0]
 8002c4e:	e001      	b.n	8002c54 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8002c50:	2300      	movs	r3, #0
 8002c52:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8002c54:	697b      	ldr	r3, [r7, #20]
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3718      	adds	r7, #24
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	20000be0 	.word	0x20000be0
 8002c64:	20000bc0 	.word	0x20000bc0
 8002c68:	20000ae4 	.word	0x20000ae4
 8002c6c:	20000b78 	.word	0x20000b78
 8002c70:	20000ae0 	.word	0x20000ae0
 8002c74:	20000bcc 	.word	0x20000bcc

08002c78 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002c80:	4b06      	ldr	r3, [pc, #24]	; (8002c9c <vTaskInternalSetTimeOutState+0x24>)
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002c88:	4b05      	ldr	r3, [pc, #20]	; (8002ca0 <vTaskInternalSetTimeOutState+0x28>)
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	605a      	str	r2, [r3, #4]
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr
 8002c9c:	20000bd0 	.word	0x20000bd0
 8002ca0:	20000bbc 	.word	0x20000bbc

08002ca4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b088      	sub	sp, #32
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d109      	bne.n	8002cc8 <xTaskCheckForTimeOut+0x24>
 8002cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cb8:	f383 8811 	msr	BASEPRI, r3
 8002cbc:	f3bf 8f6f 	isb	sy
 8002cc0:	f3bf 8f4f 	dsb	sy
 8002cc4:	613b      	str	r3, [r7, #16]
 8002cc6:	e7fe      	b.n	8002cc6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d109      	bne.n	8002ce2 <xTaskCheckForTimeOut+0x3e>
 8002cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd2:	f383 8811 	msr	BASEPRI, r3
 8002cd6:	f3bf 8f6f 	isb	sy
 8002cda:	f3bf 8f4f 	dsb	sy
 8002cde:	60fb      	str	r3, [r7, #12]
 8002ce0:	e7fe      	b.n	8002ce0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8002ce2:	f000 ff7b 	bl	8003bdc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002ce6:	4b1d      	ldr	r3, [pc, #116]	; (8002d5c <xTaskCheckForTimeOut+0xb8>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cfe:	d102      	bne.n	8002d06 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002d00:	2300      	movs	r3, #0
 8002d02:	61fb      	str	r3, [r7, #28]
 8002d04:	e023      	b.n	8002d4e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	4b15      	ldr	r3, [pc, #84]	; (8002d60 <xTaskCheckForTimeOut+0xbc>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d007      	beq.n	8002d22 <xTaskCheckForTimeOut+0x7e>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d302      	bcc.n	8002d22 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	61fb      	str	r3, [r7, #28]
 8002d20:	e015      	b.n	8002d4e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	697a      	ldr	r2, [r7, #20]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d20b      	bcs.n	8002d44 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	1ad2      	subs	r2, r2, r3
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f7ff ff9d 	bl	8002c78 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	61fb      	str	r3, [r7, #28]
 8002d42:	e004      	b.n	8002d4e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	2200      	movs	r2, #0
 8002d48:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8002d4e:	f000 ff73 	bl	8003c38 <vPortExitCritical>

	return xReturn;
 8002d52:	69fb      	ldr	r3, [r7, #28]
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3720      	adds	r7, #32
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	20000bbc 	.word	0x20000bbc
 8002d60:	20000bd0 	.word	0x20000bd0

08002d64 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002d64:	b480      	push	{r7}
 8002d66:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002d68:	4b03      	ldr	r3, [pc, #12]	; (8002d78 <vTaskMissedYield+0x14>)
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	601a      	str	r2, [r3, #0]
}
 8002d6e:	bf00      	nop
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr
 8002d78:	20000bcc 	.word	0x20000bcc

08002d7c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002d84:	f000 f852 	bl	8002e2c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002d88:	4b06      	ldr	r3, [pc, #24]	; (8002da4 <prvIdleTask+0x28>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d9f9      	bls.n	8002d84 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002d90:	4b05      	ldr	r3, [pc, #20]	; (8002da8 <prvIdleTask+0x2c>)
 8002d92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d96:	601a      	str	r2, [r3, #0]
 8002d98:	f3bf 8f4f 	dsb	sy
 8002d9c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002da0:	e7f0      	b.n	8002d84 <prvIdleTask+0x8>
 8002da2:	bf00      	nop
 8002da4:	20000ae4 	.word	0x20000ae4
 8002da8:	e000ed04 	.word	0xe000ed04

08002dac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002db2:	2300      	movs	r3, #0
 8002db4:	607b      	str	r3, [r7, #4]
 8002db6:	e00c      	b.n	8002dd2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	4413      	add	r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	4a12      	ldr	r2, [pc, #72]	; (8002e0c <prvInitialiseTaskLists+0x60>)
 8002dc4:	4413      	add	r3, r2
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7fe fdfc 	bl	80019c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	3301      	adds	r3, #1
 8002dd0:	607b      	str	r3, [r7, #4]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2b04      	cmp	r3, #4
 8002dd6:	d9ef      	bls.n	8002db8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002dd8:	480d      	ldr	r0, [pc, #52]	; (8002e10 <prvInitialiseTaskLists+0x64>)
 8002dda:	f7fe fdf3 	bl	80019c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002dde:	480d      	ldr	r0, [pc, #52]	; (8002e14 <prvInitialiseTaskLists+0x68>)
 8002de0:	f7fe fdf0 	bl	80019c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002de4:	480c      	ldr	r0, [pc, #48]	; (8002e18 <prvInitialiseTaskLists+0x6c>)
 8002de6:	f7fe fded 	bl	80019c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002dea:	480c      	ldr	r0, [pc, #48]	; (8002e1c <prvInitialiseTaskLists+0x70>)
 8002dec:	f7fe fdea 	bl	80019c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002df0:	480b      	ldr	r0, [pc, #44]	; (8002e20 <prvInitialiseTaskLists+0x74>)
 8002df2:	f7fe fde7 	bl	80019c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002df6:	4b0b      	ldr	r3, [pc, #44]	; (8002e24 <prvInitialiseTaskLists+0x78>)
 8002df8:	4a05      	ldr	r2, [pc, #20]	; (8002e10 <prvInitialiseTaskLists+0x64>)
 8002dfa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002dfc:	4b0a      	ldr	r3, [pc, #40]	; (8002e28 <prvInitialiseTaskLists+0x7c>)
 8002dfe:	4a05      	ldr	r2, [pc, #20]	; (8002e14 <prvInitialiseTaskLists+0x68>)
 8002e00:	601a      	str	r2, [r3, #0]
}
 8002e02:	bf00      	nop
 8002e04:	3708      	adds	r7, #8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	20000ae4 	.word	0x20000ae4
 8002e10:	20000b48 	.word	0x20000b48
 8002e14:	20000b5c 	.word	0x20000b5c
 8002e18:	20000b78 	.word	0x20000b78
 8002e1c:	20000b8c 	.word	0x20000b8c
 8002e20:	20000ba4 	.word	0x20000ba4
 8002e24:	20000b70 	.word	0x20000b70
 8002e28:	20000b74 	.word	0x20000b74

08002e2c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002e32:	e019      	b.n	8002e68 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002e34:	f000 fed2 	bl	8003bdc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e38:	4b0f      	ldr	r3, [pc, #60]	; (8002e78 <prvCheckTasksWaitingTermination+0x4c>)
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	3304      	adds	r3, #4
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7fe fe47 	bl	8001ad8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002e4a:	4b0c      	ldr	r3, [pc, #48]	; (8002e7c <prvCheckTasksWaitingTermination+0x50>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	4a0a      	ldr	r2, [pc, #40]	; (8002e7c <prvCheckTasksWaitingTermination+0x50>)
 8002e52:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002e54:	4b0a      	ldr	r3, [pc, #40]	; (8002e80 <prvCheckTasksWaitingTermination+0x54>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	3b01      	subs	r3, #1
 8002e5a:	4a09      	ldr	r2, [pc, #36]	; (8002e80 <prvCheckTasksWaitingTermination+0x54>)
 8002e5c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002e5e:	f000 feeb 	bl	8003c38 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 f80e 	bl	8002e84 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002e68:	4b05      	ldr	r3, [pc, #20]	; (8002e80 <prvCheckTasksWaitingTermination+0x54>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d1e1      	bne.n	8002e34 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002e70:	bf00      	nop
 8002e72:	3708      	adds	r7, #8
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	20000b8c 	.word	0x20000b8c
 8002e7c:	20000bb8 	.word	0x20000bb8
 8002e80:	20000ba0 	.word	0x20000ba0

08002e84 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e90:	4618      	mov	r0, r3
 8002e92:	f001 f87f 	bl	8003f94 <vPortFree>
			vPortFree( pxTCB );
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f001 f87c 	bl	8003f94 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002e9c:	bf00      	nop
 8002e9e:	3708      	adds	r7, #8
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002eaa:	4b0c      	ldr	r3, [pc, #48]	; (8002edc <prvResetNextTaskUnblockTime+0x38>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d104      	bne.n	8002ebe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002eb4:	4b0a      	ldr	r3, [pc, #40]	; (8002ee0 <prvResetNextTaskUnblockTime+0x3c>)
 8002eb6:	f04f 32ff 	mov.w	r2, #4294967295
 8002eba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002ebc:	e008      	b.n	8002ed0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ebe:	4b07      	ldr	r3, [pc, #28]	; (8002edc <prvResetNextTaskUnblockTime+0x38>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	4a04      	ldr	r2, [pc, #16]	; (8002ee0 <prvResetNextTaskUnblockTime+0x3c>)
 8002ece:	6013      	str	r3, [r2, #0]
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr
 8002edc:	20000b70 	.word	0x20000b70
 8002ee0:	20000bd8 	.word	0x20000bd8

08002ee4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002eea:	4b0b      	ldr	r3, [pc, #44]	; (8002f18 <xTaskGetSchedulerState+0x34>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d102      	bne.n	8002ef8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	607b      	str	r3, [r7, #4]
 8002ef6:	e008      	b.n	8002f0a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ef8:	4b08      	ldr	r3, [pc, #32]	; (8002f1c <xTaskGetSchedulerState+0x38>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d102      	bne.n	8002f06 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002f00:	2302      	movs	r3, #2
 8002f02:	607b      	str	r3, [r7, #4]
 8002f04:	e001      	b.n	8002f0a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002f06:	2300      	movs	r3, #0
 8002f08:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002f0a:	687b      	ldr	r3, [r7, #4]
	}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr
 8002f18:	20000bc4 	.word	0x20000bc4
 8002f1c:	20000be0 	.word	0x20000be0

08002f20 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b086      	sub	sp, #24
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d06c      	beq.n	8003010 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8002f36:	4b39      	ldr	r3, [pc, #228]	; (800301c <xTaskPriorityDisinherit+0xfc>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	693a      	ldr	r2, [r7, #16]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d009      	beq.n	8002f54 <xTaskPriorityDisinherit+0x34>
 8002f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f44:	f383 8811 	msr	BASEPRI, r3
 8002f48:	f3bf 8f6f 	isb	sy
 8002f4c:	f3bf 8f4f 	dsb	sy
 8002f50:	60fb      	str	r3, [r7, #12]
 8002f52:	e7fe      	b.n	8002f52 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d109      	bne.n	8002f70 <xTaskPriorityDisinherit+0x50>
 8002f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f60:	f383 8811 	msr	BASEPRI, r3
 8002f64:	f3bf 8f6f 	isb	sy
 8002f68:	f3bf 8f4f 	dsb	sy
 8002f6c:	60bb      	str	r3, [r7, #8]
 8002f6e:	e7fe      	b.n	8002f6e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f74:	1e5a      	subs	r2, r3, #1
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d044      	beq.n	8003010 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d140      	bne.n	8003010 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	3304      	adds	r3, #4
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7fe fda0 	bl	8001ad8 <uxListRemove>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d115      	bne.n	8002fca <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fa2:	491f      	ldr	r1, [pc, #124]	; (8003020 <xTaskPriorityDisinherit+0x100>)
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	4413      	add	r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	440b      	add	r3, r1
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d10a      	bne.n	8002fca <xTaskPriorityDisinherit+0xaa>
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb8:	2201      	movs	r2, #1
 8002fba:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbe:	43da      	mvns	r2, r3
 8002fc0:	4b18      	ldr	r3, [pc, #96]	; (8003024 <xTaskPriorityDisinherit+0x104>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	4a17      	ldr	r2, [pc, #92]	; (8003024 <xTaskPriorityDisinherit+0x104>)
 8002fc8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd6:	f1c3 0205 	rsb	r2, r3, #5
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	619a      	str	r2, [r3, #24]
					prvReaddTaskToReadyList( pxTCB );
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	409a      	lsls	r2, r3
 8002fe6:	4b0f      	ldr	r3, [pc, #60]	; (8003024 <xTaskPriorityDisinherit+0x104>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	4a0d      	ldr	r2, [pc, #52]	; (8003024 <xTaskPriorityDisinherit+0x104>)
 8002fee:	6013      	str	r3, [r2, #0]
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	4413      	add	r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	4a08      	ldr	r2, [pc, #32]	; (8003020 <xTaskPriorityDisinherit+0x100>)
 8002ffe:	441a      	add	r2, r3
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	3304      	adds	r3, #4
 8003004:	4619      	mov	r1, r3
 8003006:	4610      	mov	r0, r2
 8003008:	f7fe fd09 	bl	8001a1e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800300c:	2301      	movs	r3, #1
 800300e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003010:	697b      	ldr	r3, [r7, #20]
	}
 8003012:	4618      	mov	r0, r3
 8003014:	3718      	adds	r7, #24
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	20000ae0 	.word	0x20000ae0
 8003020:	20000ae4 	.word	0x20000ae4
 8003024:	20000bc0 	.word	0x20000bc0

08003028 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	607a      	str	r2, [r7, #4]
 8003034:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8003036:	f000 fdd1 	bl	8003bdc <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800303a:	4b26      	ldr	r3, [pc, #152]	; (80030d4 <xTaskNotifyWait+0xac>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003042:	b2db      	uxtb	r3, r3
 8003044:	2b02      	cmp	r3, #2
 8003046:	d01a      	beq.n	800307e <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8003048:	4b22      	ldr	r3, [pc, #136]	; (80030d4 <xTaskNotifyWait+0xac>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	43d2      	mvns	r2, r2
 8003052:	400a      	ands	r2, r1
 8003054:	651a      	str	r2, [r3, #80]	; 0x50

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8003056:	4b1f      	ldr	r3, [pc, #124]	; (80030d4 <xTaskNotifyWait+0xac>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

				if( xTicksToWait > ( TickType_t ) 0 )
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d00b      	beq.n	800307e <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003066:	2101      	movs	r1, #1
 8003068:	6838      	ldr	r0, [r7, #0]
 800306a:	f000 f90f 	bl	800328c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800306e:	4b1a      	ldr	r3, [pc, #104]	; (80030d8 <xTaskNotifyWait+0xb0>)
 8003070:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003074:	601a      	str	r2, [r3, #0]
 8003076:	f3bf 8f4f 	dsb	sy
 800307a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800307e:	f000 fddb 	bl	8003c38 <vPortExitCritical>

		taskENTER_CRITICAL();
 8003082:	f000 fdab 	bl	8003bdc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d004      	beq.n	8003096 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800308c:	4b11      	ldr	r3, [pc, #68]	; (80030d4 <xTaskNotifyWait+0xac>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8003096:	4b0f      	ldr	r3, [pc, #60]	; (80030d4 <xTaskNotifyWait+0xac>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d002      	beq.n	80030aa <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80030a4:	2300      	movs	r3, #0
 80030a6:	617b      	str	r3, [r7, #20]
 80030a8:	e008      	b.n	80030bc <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80030aa:	4b0a      	ldr	r3, [pc, #40]	; (80030d4 <xTaskNotifyWait+0xac>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80030b0:	68ba      	ldr	r2, [r7, #8]
 80030b2:	43d2      	mvns	r2, r2
 80030b4:	400a      	ands	r2, r1
 80030b6:	651a      	str	r2, [r3, #80]	; 0x50
				xReturn = pdTRUE;
 80030b8:	2301      	movs	r3, #1
 80030ba:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80030bc:	4b05      	ldr	r3, [pc, #20]	; (80030d4 <xTaskNotifyWait+0xac>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		}
		taskEXIT_CRITICAL();
 80030c6:	f000 fdb7 	bl	8003c38 <vPortExitCritical>

		return xReturn;
 80030ca:	697b      	ldr	r3, [r7, #20]
	}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3718      	adds	r7, #24
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	20000ae0 	.word	0x20000ae0
 80030d8:	e000ed04 	.word	0xe000ed04

080030dc <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b08e      	sub	sp, #56	; 0x38
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	603b      	str	r3, [r7, #0]
 80030e8:	4613      	mov	r3, r2
 80030ea:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80030ec:	2301      	movs	r3, #1
 80030ee:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d109      	bne.n	800310a <xTaskGenericNotifyFromISR+0x2e>
 80030f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030fa:	f383 8811 	msr	BASEPRI, r3
 80030fe:	f3bf 8f6f 	isb	sy
 8003102:	f3bf 8f4f 	dsb	sy
 8003106:	627b      	str	r3, [r7, #36]	; 0x24
 8003108:	e7fe      	b.n	8003108 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800310a:	f000 fe43 	bl	8003d94 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8003112:	f3ef 8211 	mrs	r2, BASEPRI
 8003116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800311a:	f383 8811 	msr	BASEPRI, r3
 800311e:	f3bf 8f6f 	isb	sy
 8003122:	f3bf 8f4f 	dsb	sy
 8003126:	623a      	str	r2, [r7, #32]
 8003128:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800312a:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800312c:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d003      	beq.n	800313c <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8003134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003136:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800313c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800313e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003142:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8003146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003148:	2202      	movs	r2, #2
 800314a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

			switch( eAction )
 800314e:	79fb      	ldrb	r3, [r7, #7]
 8003150:	2b04      	cmp	r3, #4
 8003152:	d829      	bhi.n	80031a8 <xTaskGenericNotifyFromISR+0xcc>
 8003154:	a201      	add	r2, pc, #4	; (adr r2, 800315c <xTaskGenericNotifyFromISR+0x80>)
 8003156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800315a:	bf00      	nop
 800315c:	080031c7 	.word	0x080031c7
 8003160:	08003171 	.word	0x08003171
 8003164:	0800317f 	.word	0x0800317f
 8003168:	0800318b 	.word	0x0800318b
 800316c:	08003193 	.word	0x08003193
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8003170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003172:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	431a      	orrs	r2, r3
 8003178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800317a:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 800317c:	e026      	b.n	80031cc <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800317e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003180:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003182:	1c5a      	adds	r2, r3, #1
 8003184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003186:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 8003188:	e020      	b.n	80031cc <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800318a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800318c:	68ba      	ldr	r2, [r7, #8]
 800318e:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 8003190:	e01c      	b.n	80031cc <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8003192:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003196:	2b02      	cmp	r3, #2
 8003198:	d003      	beq.n	80031a2 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800319a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800319c:	68ba      	ldr	r2, [r7, #8]
 800319e:	651a      	str	r2, [r3, #80]	; 0x50
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80031a0:	e014      	b.n	80031cc <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 80031a2:	2300      	movs	r3, #0
 80031a4:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 80031a6:	e011      	b.n	80031cc <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80031a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b0:	d00b      	beq.n	80031ca <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 80031b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b6:	f383 8811 	msr	BASEPRI, r3
 80031ba:	f3bf 8f6f 	isb	sy
 80031be:	f3bf 8f4f 	dsb	sy
 80031c2:	61bb      	str	r3, [r7, #24]
 80031c4:	e7fe      	b.n	80031c4 <xTaskGenericNotifyFromISR+0xe8>
					break;
 80031c6:	bf00      	nop
 80031c8:	e000      	b.n	80031cc <xTaskGenericNotifyFromISR+0xf0>
					break;
 80031ca:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80031cc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d144      	bne.n	800325e <xTaskGenericNotifyFromISR+0x182>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80031d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d009      	beq.n	80031f0 <xTaskGenericNotifyFromISR+0x114>
 80031dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031e0:	f383 8811 	msr	BASEPRI, r3
 80031e4:	f3bf 8f6f 	isb	sy
 80031e8:	f3bf 8f4f 	dsb	sy
 80031ec:	617b      	str	r3, [r7, #20]
 80031ee:	e7fe      	b.n	80031ee <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031f0:	4b20      	ldr	r3, [pc, #128]	; (8003274 <xTaskGenericNotifyFromISR+0x198>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d11c      	bne.n	8003232 <xTaskGenericNotifyFromISR+0x156>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031fa:	3304      	adds	r3, #4
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7fe fc6b 	bl	8001ad8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003206:	2201      	movs	r2, #1
 8003208:	409a      	lsls	r2, r3
 800320a:	4b1b      	ldr	r3, [pc, #108]	; (8003278 <xTaskGenericNotifyFromISR+0x19c>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4313      	orrs	r3, r2
 8003210:	4a19      	ldr	r2, [pc, #100]	; (8003278 <xTaskGenericNotifyFromISR+0x19c>)
 8003212:	6013      	str	r3, [r2, #0]
 8003214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003218:	4613      	mov	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4413      	add	r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	4a16      	ldr	r2, [pc, #88]	; (800327c <xTaskGenericNotifyFromISR+0x1a0>)
 8003222:	441a      	add	r2, r3
 8003224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003226:	3304      	adds	r3, #4
 8003228:	4619      	mov	r1, r3
 800322a:	4610      	mov	r0, r2
 800322c:	f7fe fbf7 	bl	8001a1e <vListInsertEnd>
 8003230:	e005      	b.n	800323e <xTaskGenericNotifyFromISR+0x162>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8003232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003234:	3318      	adds	r3, #24
 8003236:	4619      	mov	r1, r3
 8003238:	4811      	ldr	r0, [pc, #68]	; (8003280 <xTaskGenericNotifyFromISR+0x1a4>)
 800323a:	f7fe fbf0 	bl	8001a1e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800323e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003242:	4b10      	ldr	r3, [pc, #64]	; (8003284 <xTaskGenericNotifyFromISR+0x1a8>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003248:	429a      	cmp	r2, r3
 800324a:	d908      	bls.n	800325e <xTaskGenericNotifyFromISR+0x182>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800324c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800324e:	2b00      	cmp	r3, #0
 8003250:	d002      	beq.n	8003258 <xTaskGenericNotifyFromISR+0x17c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8003252:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003254:	2201      	movs	r2, #1
 8003256:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8003258:	4b0b      	ldr	r3, [pc, #44]	; (8003288 <xTaskGenericNotifyFromISR+0x1ac>)
 800325a:	2201      	movs	r2, #1
 800325c:	601a      	str	r2, [r3, #0]
 800325e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003260:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8003268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800326a:	4618      	mov	r0, r3
 800326c:	3738      	adds	r7, #56	; 0x38
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	20000be0 	.word	0x20000be0
 8003278:	20000bc0 	.word	0x20000bc0
 800327c:	20000ae4 	.word	0x20000ae4
 8003280:	20000b78 	.word	0x20000b78
 8003284:	20000ae0 	.word	0x20000ae0
 8003288:	20000bcc 	.word	0x20000bcc

0800328c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003296:	4b29      	ldr	r3, [pc, #164]	; (800333c <prvAddCurrentTaskToDelayedList+0xb0>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800329c:	4b28      	ldr	r3, [pc, #160]	; (8003340 <prvAddCurrentTaskToDelayedList+0xb4>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	3304      	adds	r3, #4
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7fe fc18 	bl	8001ad8 <uxListRemove>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d10b      	bne.n	80032c6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80032ae:	4b24      	ldr	r3, [pc, #144]	; (8003340 <prvAddCurrentTaskToDelayedList+0xb4>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b4:	2201      	movs	r2, #1
 80032b6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ba:	43da      	mvns	r2, r3
 80032bc:	4b21      	ldr	r3, [pc, #132]	; (8003344 <prvAddCurrentTaskToDelayedList+0xb8>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4013      	ands	r3, r2
 80032c2:	4a20      	ldr	r2, [pc, #128]	; (8003344 <prvAddCurrentTaskToDelayedList+0xb8>)
 80032c4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032cc:	d10a      	bne.n	80032e4 <prvAddCurrentTaskToDelayedList+0x58>
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d007      	beq.n	80032e4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
      traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80032d4:	4b1a      	ldr	r3, [pc, #104]	; (8003340 <prvAddCurrentTaskToDelayedList+0xb4>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	3304      	adds	r3, #4
 80032da:	4619      	mov	r1, r3
 80032dc:	481a      	ldr	r0, [pc, #104]	; (8003348 <prvAddCurrentTaskToDelayedList+0xbc>)
 80032de:	f7fe fb9e 	bl	8001a1e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80032e2:	e026      	b.n	8003332 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80032e4:	68fa      	ldr	r2, [r7, #12]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4413      	add	r3, r2
 80032ea:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80032ec:	4b14      	ldr	r3, [pc, #80]	; (8003340 <prvAddCurrentTaskToDelayedList+0xb4>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68ba      	ldr	r2, [r7, #8]
 80032f2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80032f4:	68ba      	ldr	r2, [r7, #8]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d209      	bcs.n	8003310 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80032fc:	4b13      	ldr	r3, [pc, #76]	; (800334c <prvAddCurrentTaskToDelayedList+0xc0>)
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	4b0f      	ldr	r3, [pc, #60]	; (8003340 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	3304      	adds	r3, #4
 8003306:	4619      	mov	r1, r3
 8003308:	4610      	mov	r0, r2
 800330a:	f7fe fbac 	bl	8001a66 <vListInsert>
}
 800330e:	e010      	b.n	8003332 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003310:	4b0f      	ldr	r3, [pc, #60]	; (8003350 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	4b0a      	ldr	r3, [pc, #40]	; (8003340 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	3304      	adds	r3, #4
 800331a:	4619      	mov	r1, r3
 800331c:	4610      	mov	r0, r2
 800331e:	f7fe fba2 	bl	8001a66 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003322:	4b0c      	ldr	r3, [pc, #48]	; (8003354 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	68ba      	ldr	r2, [r7, #8]
 8003328:	429a      	cmp	r2, r3
 800332a:	d202      	bcs.n	8003332 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800332c:	4a09      	ldr	r2, [pc, #36]	; (8003354 <prvAddCurrentTaskToDelayedList+0xc8>)
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	6013      	str	r3, [r2, #0]
}
 8003332:	bf00      	nop
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	20000bbc 	.word	0x20000bbc
 8003340:	20000ae0 	.word	0x20000ae0
 8003344:	20000bc0 	.word	0x20000bc0
 8003348:	20000ba4 	.word	0x20000ba4
 800334c:	20000b74 	.word	0x20000b74
 8003350:	20000b70 	.word	0x20000b70
 8003354:	20000bd8 	.word	0x20000bd8

08003358 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800335e:	2300      	movs	r3, #0
 8003360:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003362:	f000 fadd 	bl	8003920 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003366:	4b11      	ldr	r3, [pc, #68]	; (80033ac <xTimerCreateTimerTask+0x54>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00b      	beq.n	8003386 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800336e:	4b10      	ldr	r3, [pc, #64]	; (80033b0 <xTimerCreateTimerTask+0x58>)
 8003370:	9301      	str	r3, [sp, #4]
 8003372:	2302      	movs	r3, #2
 8003374:	9300      	str	r3, [sp, #0]
 8003376:	2300      	movs	r3, #0
 8003378:	f44f 7282 	mov.w	r2, #260	; 0x104
 800337c:	490d      	ldr	r1, [pc, #52]	; (80033b4 <xTimerCreateTimerTask+0x5c>)
 800337e:	480e      	ldr	r0, [pc, #56]	; (80033b8 <xTimerCreateTimerTask+0x60>)
 8003380:	f7ff f870 	bl	8002464 <xTaskCreate>
 8003384:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d109      	bne.n	80033a0 <xTimerCreateTimerTask+0x48>
	__asm volatile
 800338c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003390:	f383 8811 	msr	BASEPRI, r3
 8003394:	f3bf 8f6f 	isb	sy
 8003398:	f3bf 8f4f 	dsb	sy
 800339c:	603b      	str	r3, [r7, #0]
 800339e:	e7fe      	b.n	800339e <xTimerCreateTimerTask+0x46>
	return xReturn;
 80033a0:	687b      	ldr	r3, [r7, #4]
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3708      	adds	r7, #8
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	20000c14 	.word	0x20000c14
 80033b0:	20000c18 	.word	0x20000c18
 80033b4:	08008178 	.word	0x08008178
 80033b8:	08003571 	.word	0x08003571

080033bc <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b088      	sub	sp, #32
 80033c0:	af02      	add	r7, sp, #8
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	607a      	str	r2, [r7, #4]
 80033c8:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80033ca:	202c      	movs	r0, #44	; 0x2c
 80033cc:	f000 fd20 	bl	8003e10 <pvPortMalloc>
 80033d0:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d009      	beq.n	80033ec <xTimerCreate+0x30>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	9301      	str	r3, [sp, #4]
 80033dc:	6a3b      	ldr	r3, [r7, #32]
 80033de:	9300      	str	r3, [sp, #0]
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	68b9      	ldr	r1, [r7, #8]
 80033e6:	68f8      	ldr	r0, [r7, #12]
 80033e8:	f000 f805 	bl	80033f6 <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 80033ec:	697b      	ldr	r3, [r7, #20]
	}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3718      	adds	r7, #24
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b086      	sub	sp, #24
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	60f8      	str	r0, [r7, #12]
 80033fe:	60b9      	str	r1, [r7, #8]
 8003400:	607a      	str	r2, [r7, #4]
 8003402:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d109      	bne.n	800341e <prvInitialiseNewTimer+0x28>
 800340a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800340e:	f383 8811 	msr	BASEPRI, r3
 8003412:	f3bf 8f6f 	isb	sy
 8003416:	f3bf 8f4f 	dsb	sy
 800341a:	617b      	str	r3, [r7, #20]
 800341c:	e7fe      	b.n	800341c <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 800341e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003420:	2b00      	cmp	r3, #0
 8003422:	d015      	beq.n	8003450 <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8003424:	f000 fa7c 	bl	8003920 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8003428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800342e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003430:	68ba      	ldr	r2, [r7, #8]
 8003432:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8003434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 800343a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343c:	683a      	ldr	r2, [r7, #0]
 800343e:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8003440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003442:	6a3a      	ldr	r2, [r7, #32]
 8003444:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8003446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003448:	3304      	adds	r3, #4
 800344a:	4618      	mov	r0, r3
 800344c:	f7fe fada 	bl	8001a04 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8003450:	bf00      	nop
 8003452:	3718      	adds	r7, #24
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b08a      	sub	sp, #40	; 0x28
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]
 8003464:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003466:	2300      	movs	r3, #0
 8003468:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d109      	bne.n	8003484 <xTimerGenericCommand+0x2c>
 8003470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003474:	f383 8811 	msr	BASEPRI, r3
 8003478:	f3bf 8f6f 	isb	sy
 800347c:	f3bf 8f4f 	dsb	sy
 8003480:	623b      	str	r3, [r7, #32]
 8003482:	e7fe      	b.n	8003482 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003484:	4b19      	ldr	r3, [pc, #100]	; (80034ec <xTimerGenericCommand+0x94>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d02a      	beq.n	80034e2 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	2b05      	cmp	r3, #5
 800349c:	dc18      	bgt.n	80034d0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800349e:	f7ff fd21 	bl	8002ee4 <xTaskGetSchedulerState>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d109      	bne.n	80034bc <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80034a8:	4b10      	ldr	r3, [pc, #64]	; (80034ec <xTimerGenericCommand+0x94>)
 80034aa:	6818      	ldr	r0, [r3, #0]
 80034ac:	f107 0114 	add.w	r1, r7, #20
 80034b0:	2300      	movs	r3, #0
 80034b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034b4:	f7fe fc00 	bl	8001cb8 <xQueueGenericSend>
 80034b8:	6278      	str	r0, [r7, #36]	; 0x24
 80034ba:	e012      	b.n	80034e2 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80034bc:	4b0b      	ldr	r3, [pc, #44]	; (80034ec <xTimerGenericCommand+0x94>)
 80034be:	6818      	ldr	r0, [r3, #0]
 80034c0:	f107 0114 	add.w	r1, r7, #20
 80034c4:	2300      	movs	r3, #0
 80034c6:	2200      	movs	r2, #0
 80034c8:	f7fe fbf6 	bl	8001cb8 <xQueueGenericSend>
 80034cc:	6278      	str	r0, [r7, #36]	; 0x24
 80034ce:	e008      	b.n	80034e2 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80034d0:	4b06      	ldr	r3, [pc, #24]	; (80034ec <xTimerGenericCommand+0x94>)
 80034d2:	6818      	ldr	r0, [r3, #0]
 80034d4:	f107 0114 	add.w	r1, r7, #20
 80034d8:	2300      	movs	r3, #0
 80034da:	683a      	ldr	r2, [r7, #0]
 80034dc:	f7fe fce6 	bl	8001eac <xQueueGenericSendFromISR>
 80034e0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80034e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3728      	adds	r7, #40	; 0x28
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	20000c14 	.word	0x20000c14

080034f0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b088      	sub	sp, #32
 80034f4:	af02      	add	r7, sp, #8
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034fa:	4b1c      	ldr	r3, [pc, #112]	; (800356c <prvProcessExpiredTimer+0x7c>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	3304      	adds	r3, #4
 8003508:	4618      	mov	r0, r3
 800350a:	f7fe fae5 	bl	8001ad8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	69db      	ldr	r3, [r3, #28]
 8003512:	2b01      	cmp	r3, #1
 8003514:	d121      	bne.n	800355a <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	699a      	ldr	r2, [r3, #24]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	18d1      	adds	r1, r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	683a      	ldr	r2, [r7, #0]
 8003522:	6978      	ldr	r0, [r7, #20]
 8003524:	f000 f8c8 	bl	80036b8 <prvInsertTimerInActiveList>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d015      	beq.n	800355a <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800352e:	2300      	movs	r3, #0
 8003530:	9300      	str	r3, [sp, #0]
 8003532:	2300      	movs	r3, #0
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	2100      	movs	r1, #0
 8003538:	6978      	ldr	r0, [r7, #20]
 800353a:	f7ff ff8d 	bl	8003458 <xTimerGenericCommand>
 800353e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d109      	bne.n	800355a <prvProcessExpiredTimer+0x6a>
 8003546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800354a:	f383 8811 	msr	BASEPRI, r3
 800354e:	f3bf 8f6f 	isb	sy
 8003552:	f3bf 8f4f 	dsb	sy
 8003556:	60fb      	str	r3, [r7, #12]
 8003558:	e7fe      	b.n	8003558 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355e:	6978      	ldr	r0, [r7, #20]
 8003560:	4798      	blx	r3
}
 8003562:	bf00      	nop
 8003564:	3718      	adds	r7, #24
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	20000c0c 	.word	0x20000c0c

08003570 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003578:	f107 0308 	add.w	r3, r7, #8
 800357c:	4618      	mov	r0, r3
 800357e:	f000 f857 	bl	8003630 <prvGetNextExpireTime>
 8003582:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	4619      	mov	r1, r3
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f000 f803 	bl	8003594 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800358e:	f000 f8d5 	bl	800373c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003592:	e7f1      	b.n	8003578 <prvTimerTask+0x8>

08003594 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800359e:	f7ff f8ef 	bl	8002780 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80035a2:	f107 0308 	add.w	r3, r7, #8
 80035a6:	4618      	mov	r0, r3
 80035a8:	f000 f866 	bl	8003678 <prvSampleTimeNow>
 80035ac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d130      	bne.n	8003616 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d10a      	bne.n	80035d0 <prvProcessTimerOrBlockTask+0x3c>
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d806      	bhi.n	80035d0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80035c2:	f7ff f8eb 	bl	800279c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80035c6:	68f9      	ldr	r1, [r7, #12]
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f7ff ff91 	bl	80034f0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80035ce:	e024      	b.n	800361a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d008      	beq.n	80035e8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80035d6:	4b13      	ldr	r3, [pc, #76]	; (8003624 <prvProcessTimerOrBlockTask+0x90>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d101      	bne.n	80035e4 <prvProcessTimerOrBlockTask+0x50>
 80035e0:	2301      	movs	r3, #1
 80035e2:	e000      	b.n	80035e6 <prvProcessTimerOrBlockTask+0x52>
 80035e4:	2300      	movs	r3, #0
 80035e6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80035e8:	4b0f      	ldr	r3, [pc, #60]	; (8003628 <prvProcessTimerOrBlockTask+0x94>)
 80035ea:	6818      	ldr	r0, [r3, #0]
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	683a      	ldr	r2, [r7, #0]
 80035f4:	4619      	mov	r1, r3
 80035f6:	f7fe ff01 	bl	80023fc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80035fa:	f7ff f8cf 	bl	800279c <xTaskResumeAll>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d10a      	bne.n	800361a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003604:	4b09      	ldr	r3, [pc, #36]	; (800362c <prvProcessTimerOrBlockTask+0x98>)
 8003606:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800360a:	601a      	str	r2, [r3, #0]
 800360c:	f3bf 8f4f 	dsb	sy
 8003610:	f3bf 8f6f 	isb	sy
}
 8003614:	e001      	b.n	800361a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003616:	f7ff f8c1 	bl	800279c <xTaskResumeAll>
}
 800361a:	bf00      	nop
 800361c:	3710      	adds	r7, #16
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	20000c10 	.word	0x20000c10
 8003628:	20000c14 	.word	0x20000c14
 800362c:	e000ed04 	.word	0xe000ed04

08003630 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003638:	4b0e      	ldr	r3, [pc, #56]	; (8003674 <prvGetNextExpireTime+0x44>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d101      	bne.n	8003646 <prvGetNextExpireTime+0x16>
 8003642:	2201      	movs	r2, #1
 8003644:	e000      	b.n	8003648 <prvGetNextExpireTime+0x18>
 8003646:	2200      	movs	r2, #0
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d105      	bne.n	8003660 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003654:	4b07      	ldr	r3, [pc, #28]	; (8003674 <prvGetNextExpireTime+0x44>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	60fb      	str	r3, [r7, #12]
 800365e:	e001      	b.n	8003664 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003660:	2300      	movs	r3, #0
 8003662:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003664:	68fb      	ldr	r3, [r7, #12]
}
 8003666:	4618      	mov	r0, r3
 8003668:	3714      	adds	r7, #20
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	20000c0c 	.word	0x20000c0c

08003678 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003680:	f7ff f928 	bl	80028d4 <xTaskGetTickCount>
 8003684:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003686:	4b0b      	ldr	r3, [pc, #44]	; (80036b4 <prvSampleTimeNow+0x3c>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	429a      	cmp	r2, r3
 800368e:	d205      	bcs.n	800369c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003690:	f000 f8e6 	bl	8003860 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	601a      	str	r2, [r3, #0]
 800369a:	e002      	b.n	80036a2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80036a2:	4a04      	ldr	r2, [pc, #16]	; (80036b4 <prvSampleTimeNow+0x3c>)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80036a8:	68fb      	ldr	r3, [r7, #12]
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3710      	adds	r7, #16
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	20000c1c 	.word	0x20000c1c

080036b8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b086      	sub	sp, #24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
 80036c4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80036c6:	2300      	movs	r3, #0
 80036c8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	68ba      	ldr	r2, [r7, #8]
 80036ce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80036d6:	68ba      	ldr	r2, [r7, #8]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d812      	bhi.n	8003704 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	1ad2      	subs	r2, r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	699b      	ldr	r3, [r3, #24]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d302      	bcc.n	80036f2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80036ec:	2301      	movs	r3, #1
 80036ee:	617b      	str	r3, [r7, #20]
 80036f0:	e01b      	b.n	800372a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80036f2:	4b10      	ldr	r3, [pc, #64]	; (8003734 <prvInsertTimerInActiveList+0x7c>)
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	3304      	adds	r3, #4
 80036fa:	4619      	mov	r1, r3
 80036fc:	4610      	mov	r0, r2
 80036fe:	f7fe f9b2 	bl	8001a66 <vListInsert>
 8003702:	e012      	b.n	800372a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	429a      	cmp	r2, r3
 800370a:	d206      	bcs.n	800371a <prvInsertTimerInActiveList+0x62>
 800370c:	68ba      	ldr	r2, [r7, #8]
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	429a      	cmp	r2, r3
 8003712:	d302      	bcc.n	800371a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003714:	2301      	movs	r3, #1
 8003716:	617b      	str	r3, [r7, #20]
 8003718:	e007      	b.n	800372a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800371a:	4b07      	ldr	r3, [pc, #28]	; (8003738 <prvInsertTimerInActiveList+0x80>)
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	3304      	adds	r3, #4
 8003722:	4619      	mov	r1, r3
 8003724:	4610      	mov	r0, r2
 8003726:	f7fe f99e 	bl	8001a66 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800372a:	697b      	ldr	r3, [r7, #20]
}
 800372c:	4618      	mov	r0, r3
 800372e:	3718      	adds	r7, #24
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	20000c10 	.word	0x20000c10
 8003738:	20000c0c 	.word	0x20000c0c

0800373c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b08c      	sub	sp, #48	; 0x30
 8003740:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003742:	e07a      	b.n	800383a <prvProcessReceivedCommands+0xfe>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	2b00      	cmp	r3, #0
 8003748:	db76      	blt.n	8003838 <prvProcessReceivedCommands+0xfc>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800374e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d004      	beq.n	8003760 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003758:	3304      	adds	r3, #4
 800375a:	4618      	mov	r0, r3
 800375c:	f7fe f9bc 	bl	8001ad8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003760:	1d3b      	adds	r3, r7, #4
 8003762:	4618      	mov	r0, r3
 8003764:	f7ff ff88 	bl	8003678 <prvSampleTimeNow>
 8003768:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	2b09      	cmp	r3, #9
 800376e:	d864      	bhi.n	800383a <prvProcessReceivedCommands+0xfe>
 8003770:	a201      	add	r2, pc, #4	; (adr r2, 8003778 <prvProcessReceivedCommands+0x3c>)
 8003772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003776:	bf00      	nop
 8003778:	080037a1 	.word	0x080037a1
 800377c:	080037a1 	.word	0x080037a1
 8003780:	080037a1 	.word	0x080037a1
 8003784:	0800383b 	.word	0x0800383b
 8003788:	080037fb 	.word	0x080037fb
 800378c:	08003831 	.word	0x08003831
 8003790:	080037a1 	.word	0x080037a1
 8003794:	080037a1 	.word	0x080037a1
 8003798:	0800383b 	.word	0x0800383b
 800379c:	080037fb 	.word	0x080037fb
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80037a0:	68fa      	ldr	r2, [r7, #12]
 80037a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a4:	699b      	ldr	r3, [r3, #24]
 80037a6:	18d1      	adds	r1, r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6a3a      	ldr	r2, [r7, #32]
 80037ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80037ae:	f7ff ff83 	bl	80036b8 <prvInsertTimerInActiveList>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d040      	beq.n	800383a <prvProcessReceivedCommands+0xfe>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80037b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80037be:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80037c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c2:	69db      	ldr	r3, [r3, #28]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d138      	bne.n	800383a <prvProcessReceivedCommands+0xfe>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80037c8:	68fa      	ldr	r2, [r7, #12]
 80037ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	441a      	add	r2, r3
 80037d0:	2300      	movs	r3, #0
 80037d2:	9300      	str	r3, [sp, #0]
 80037d4:	2300      	movs	r3, #0
 80037d6:	2100      	movs	r1, #0
 80037d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80037da:	f7ff fe3d 	bl	8003458 <xTimerGenericCommand>
 80037de:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d129      	bne.n	800383a <prvProcessReceivedCommands+0xfe>
 80037e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ea:	f383 8811 	msr	BASEPRI, r3
 80037ee:	f3bf 8f6f 	isb	sy
 80037f2:	f3bf 8f4f 	dsb	sy
 80037f6:	61bb      	str	r3, [r7, #24]
 80037f8:	e7fe      	b.n	80037f8 <prvProcessReceivedCommands+0xbc>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003802:	699b      	ldr	r3, [r3, #24]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d109      	bne.n	800381c <prvProcessReceivedCommands+0xe0>
 8003808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800380c:	f383 8811 	msr	BASEPRI, r3
 8003810:	f3bf 8f6f 	isb	sy
 8003814:	f3bf 8f4f 	dsb	sy
 8003818:	617b      	str	r3, [r7, #20]
 800381a:	e7fe      	b.n	800381a <prvProcessReceivedCommands+0xde>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800381c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381e:	699a      	ldr	r2, [r3, #24]
 8003820:	6a3b      	ldr	r3, [r7, #32]
 8003822:	18d1      	adds	r1, r2, r3
 8003824:	6a3b      	ldr	r3, [r7, #32]
 8003826:	6a3a      	ldr	r2, [r7, #32]
 8003828:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800382a:	f7ff ff45 	bl	80036b8 <prvInsertTimerInActiveList>
					break;
 800382e:	e004      	b.n	800383a <prvProcessReceivedCommands+0xfe>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
 8003830:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003832:	f000 fbaf 	bl	8003f94 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003836:	e000      	b.n	800383a <prvProcessReceivedCommands+0xfe>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8003838:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800383a:	4b08      	ldr	r3, [pc, #32]	; (800385c <prvProcessReceivedCommands+0x120>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f107 0108 	add.w	r1, r7, #8
 8003842:	2200      	movs	r2, #0
 8003844:	4618      	mov	r0, r3
 8003846:	f7fe fbc5 	bl	8001fd4 <xQueueReceive>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	f47f af79 	bne.w	8003744 <prvProcessReceivedCommands+0x8>
	}
}
 8003852:	bf00      	nop
 8003854:	3728      	adds	r7, #40	; 0x28
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	20000c14 	.word	0x20000c14

08003860 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b088      	sub	sp, #32
 8003864:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003866:	e044      	b.n	80038f2 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003868:	4b2b      	ldr	r3, [pc, #172]	; (8003918 <prvSwitchTimerLists+0xb8>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003872:	4b29      	ldr	r3, [pc, #164]	; (8003918 <prvSwitchTimerLists+0xb8>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	3304      	adds	r3, #4
 8003880:	4618      	mov	r0, r3
 8003882:	f7fe f929 	bl	8001ad8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388a:	68f8      	ldr	r0, [r7, #12]
 800388c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	69db      	ldr	r3, [r3, #28]
 8003892:	2b01      	cmp	r3, #1
 8003894:	d12d      	bne.n	80038f2 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	693a      	ldr	r2, [r7, #16]
 800389c:	4413      	add	r3, r2
 800389e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80038a0:	68ba      	ldr	r2, [r7, #8]
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d90e      	bls.n	80038c6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	68ba      	ldr	r2, [r7, #8]
 80038ac:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80038b4:	4b18      	ldr	r3, [pc, #96]	; (8003918 <prvSwitchTimerLists+0xb8>)
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	3304      	adds	r3, #4
 80038bc:	4619      	mov	r1, r3
 80038be:	4610      	mov	r0, r2
 80038c0:	f7fe f8d1 	bl	8001a66 <vListInsert>
 80038c4:	e015      	b.n	80038f2 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80038c6:	2300      	movs	r3, #0
 80038c8:	9300      	str	r3, [sp, #0]
 80038ca:	2300      	movs	r3, #0
 80038cc:	693a      	ldr	r2, [r7, #16]
 80038ce:	2100      	movs	r1, #0
 80038d0:	68f8      	ldr	r0, [r7, #12]
 80038d2:	f7ff fdc1 	bl	8003458 <xTimerGenericCommand>
 80038d6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d109      	bne.n	80038f2 <prvSwitchTimerLists+0x92>
 80038de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e2:	f383 8811 	msr	BASEPRI, r3
 80038e6:	f3bf 8f6f 	isb	sy
 80038ea:	f3bf 8f4f 	dsb	sy
 80038ee:	603b      	str	r3, [r7, #0]
 80038f0:	e7fe      	b.n	80038f0 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80038f2:	4b09      	ldr	r3, [pc, #36]	; (8003918 <prvSwitchTimerLists+0xb8>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d1b5      	bne.n	8003868 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80038fc:	4b06      	ldr	r3, [pc, #24]	; (8003918 <prvSwitchTimerLists+0xb8>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003902:	4b06      	ldr	r3, [pc, #24]	; (800391c <prvSwitchTimerLists+0xbc>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a04      	ldr	r2, [pc, #16]	; (8003918 <prvSwitchTimerLists+0xb8>)
 8003908:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800390a:	4a04      	ldr	r2, [pc, #16]	; (800391c <prvSwitchTimerLists+0xbc>)
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	6013      	str	r3, [r2, #0]
}
 8003910:	bf00      	nop
 8003912:	3718      	adds	r7, #24
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	20000c0c 	.word	0x20000c0c
 800391c:	20000c10 	.word	0x20000c10

08003920 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003920:	b580      	push	{r7, lr}
 8003922:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003924:	f000 f95a 	bl	8003bdc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003928:	4b12      	ldr	r3, [pc, #72]	; (8003974 <prvCheckForValidListAndQueue+0x54>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d11d      	bne.n	800396c <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8003930:	4811      	ldr	r0, [pc, #68]	; (8003978 <prvCheckForValidListAndQueue+0x58>)
 8003932:	f7fe f847 	bl	80019c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003936:	4811      	ldr	r0, [pc, #68]	; (800397c <prvCheckForValidListAndQueue+0x5c>)
 8003938:	f7fe f844 	bl	80019c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800393c:	4b10      	ldr	r3, [pc, #64]	; (8003980 <prvCheckForValidListAndQueue+0x60>)
 800393e:	4a0e      	ldr	r2, [pc, #56]	; (8003978 <prvCheckForValidListAndQueue+0x58>)
 8003940:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003942:	4b10      	ldr	r3, [pc, #64]	; (8003984 <prvCheckForValidListAndQueue+0x64>)
 8003944:	4a0d      	ldr	r2, [pc, #52]	; (800397c <prvCheckForValidListAndQueue+0x5c>)
 8003946:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003948:	2200      	movs	r2, #0
 800394a:	210c      	movs	r1, #12
 800394c:	200a      	movs	r0, #10
 800394e:	f7fe f955 	bl	8001bfc <xQueueGenericCreate>
 8003952:	4602      	mov	r2, r0
 8003954:	4b07      	ldr	r3, [pc, #28]	; (8003974 <prvCheckForValidListAndQueue+0x54>)
 8003956:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003958:	4b06      	ldr	r3, [pc, #24]	; (8003974 <prvCheckForValidListAndQueue+0x54>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d005      	beq.n	800396c <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003960:	4b04      	ldr	r3, [pc, #16]	; (8003974 <prvCheckForValidListAndQueue+0x54>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4908      	ldr	r1, [pc, #32]	; (8003988 <prvCheckForValidListAndQueue+0x68>)
 8003966:	4618      	mov	r0, r3
 8003968:	f7fe fd20 	bl	80023ac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800396c:	f000 f964 	bl	8003c38 <vPortExitCritical>
}
 8003970:	bf00      	nop
 8003972:	bd80      	pop	{r7, pc}
 8003974:	20000c14 	.word	0x20000c14
 8003978:	20000be4 	.word	0x20000be4
 800397c:	20000bf8 	.word	0x20000bf8
 8003980:	20000c0c 	.word	0x20000c0c
 8003984:	20000c10 	.word	0x20000c10
 8003988:	08008180 	.word	0x08008180

0800398c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800398c:	b480      	push	{r7}
 800398e:	b085      	sub	sp, #20
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	3b04      	subs	r3, #4
 800399c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80039a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	3b04      	subs	r3, #4
 80039aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	f023 0201 	bic.w	r2, r3, #1
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	3b04      	subs	r3, #4
 80039ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80039bc:	4a0c      	ldr	r2, [pc, #48]	; (80039f0 <pxPortInitialiseStack+0x64>)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	3b14      	subs	r3, #20
 80039c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	3b04      	subs	r3, #4
 80039d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f06f 0202 	mvn.w	r2, #2
 80039da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	3b20      	subs	r3, #32
 80039e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80039e2:	68fb      	ldr	r3, [r7, #12]
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3714      	adds	r7, #20
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr
 80039f0:	080039f5 	.word	0x080039f5

080039f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80039f4:	b480      	push	{r7}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80039fa:	2300      	movs	r3, #0
 80039fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80039fe:	4b11      	ldr	r3, [pc, #68]	; (8003a44 <prvTaskExitError+0x50>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a06:	d009      	beq.n	8003a1c <prvTaskExitError+0x28>
 8003a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a0c:	f383 8811 	msr	BASEPRI, r3
 8003a10:	f3bf 8f6f 	isb	sy
 8003a14:	f3bf 8f4f 	dsb	sy
 8003a18:	60fb      	str	r3, [r7, #12]
 8003a1a:	e7fe      	b.n	8003a1a <prvTaskExitError+0x26>
 8003a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a20:	f383 8811 	msr	BASEPRI, r3
 8003a24:	f3bf 8f6f 	isb	sy
 8003a28:	f3bf 8f4f 	dsb	sy
 8003a2c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003a2e:	bf00      	nop
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d0fc      	beq.n	8003a30 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003a36:	bf00      	nop
 8003a38:	3714      	adds	r7, #20
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
 8003a42:	bf00      	nop
 8003a44:	20000010 	.word	0x20000010
	...

08003a50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003a50:	4b07      	ldr	r3, [pc, #28]	; (8003a70 <pxCurrentTCBConst2>)
 8003a52:	6819      	ldr	r1, [r3, #0]
 8003a54:	6808      	ldr	r0, [r1, #0]
 8003a56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a5a:	f380 8809 	msr	PSP, r0
 8003a5e:	f3bf 8f6f 	isb	sy
 8003a62:	f04f 0000 	mov.w	r0, #0
 8003a66:	f380 8811 	msr	BASEPRI, r0
 8003a6a:	4770      	bx	lr
 8003a6c:	f3af 8000 	nop.w

08003a70 <pxCurrentTCBConst2>:
 8003a70:	20000ae0 	.word	0x20000ae0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003a74:	bf00      	nop
 8003a76:	bf00      	nop

08003a78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003a78:	4808      	ldr	r0, [pc, #32]	; (8003a9c <prvPortStartFirstTask+0x24>)
 8003a7a:	6800      	ldr	r0, [r0, #0]
 8003a7c:	6800      	ldr	r0, [r0, #0]
 8003a7e:	f380 8808 	msr	MSP, r0
 8003a82:	f04f 0000 	mov.w	r0, #0
 8003a86:	f380 8814 	msr	CONTROL, r0
 8003a8a:	b662      	cpsie	i
 8003a8c:	b661      	cpsie	f
 8003a8e:	f3bf 8f4f 	dsb	sy
 8003a92:	f3bf 8f6f 	isb	sy
 8003a96:	df00      	svc	0
 8003a98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003a9a:	bf00      	nop
 8003a9c:	e000ed08 	.word	0xe000ed08

08003aa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b086      	sub	sp, #24
 8003aa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003aa6:	4b44      	ldr	r3, [pc, #272]	; (8003bb8 <xPortStartScheduler+0x118>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a44      	ldr	r2, [pc, #272]	; (8003bbc <xPortStartScheduler+0x11c>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d109      	bne.n	8003ac4 <xPortStartScheduler+0x24>
 8003ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab4:	f383 8811 	msr	BASEPRI, r3
 8003ab8:	f3bf 8f6f 	isb	sy
 8003abc:	f3bf 8f4f 	dsb	sy
 8003ac0:	613b      	str	r3, [r7, #16]
 8003ac2:	e7fe      	b.n	8003ac2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003ac4:	4b3c      	ldr	r3, [pc, #240]	; (8003bb8 <xPortStartScheduler+0x118>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a3d      	ldr	r2, [pc, #244]	; (8003bc0 <xPortStartScheduler+0x120>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d109      	bne.n	8003ae2 <xPortStartScheduler+0x42>
 8003ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad2:	f383 8811 	msr	BASEPRI, r3
 8003ad6:	f3bf 8f6f 	isb	sy
 8003ada:	f3bf 8f4f 	dsb	sy
 8003ade:	60fb      	str	r3, [r7, #12]
 8003ae0:	e7fe      	b.n	8003ae0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003ae2:	4b38      	ldr	r3, [pc, #224]	; (8003bc4 <xPortStartScheduler+0x124>)
 8003ae4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	22ff      	movs	r2, #255	; 0xff
 8003af2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003afc:	78fb      	ldrb	r3, [r7, #3]
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003b04:	b2da      	uxtb	r2, r3
 8003b06:	4b30      	ldr	r3, [pc, #192]	; (8003bc8 <xPortStartScheduler+0x128>)
 8003b08:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003b0a:	4b30      	ldr	r3, [pc, #192]	; (8003bcc <xPortStartScheduler+0x12c>)
 8003b0c:	2207      	movs	r2, #7
 8003b0e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003b10:	e009      	b.n	8003b26 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8003b12:	4b2e      	ldr	r3, [pc, #184]	; (8003bcc <xPortStartScheduler+0x12c>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	3b01      	subs	r3, #1
 8003b18:	4a2c      	ldr	r2, [pc, #176]	; (8003bcc <xPortStartScheduler+0x12c>)
 8003b1a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003b1c:	78fb      	ldrb	r3, [r7, #3]
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	005b      	lsls	r3, r3, #1
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003b26:	78fb      	ldrb	r3, [r7, #3]
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b2e:	2b80      	cmp	r3, #128	; 0x80
 8003b30:	d0ef      	beq.n	8003b12 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003b32:	4b26      	ldr	r3, [pc, #152]	; (8003bcc <xPortStartScheduler+0x12c>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f1c3 0307 	rsb	r3, r3, #7
 8003b3a:	2b04      	cmp	r3, #4
 8003b3c:	d009      	beq.n	8003b52 <xPortStartScheduler+0xb2>
 8003b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b42:	f383 8811 	msr	BASEPRI, r3
 8003b46:	f3bf 8f6f 	isb	sy
 8003b4a:	f3bf 8f4f 	dsb	sy
 8003b4e:	60bb      	str	r3, [r7, #8]
 8003b50:	e7fe      	b.n	8003b50 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003b52:	4b1e      	ldr	r3, [pc, #120]	; (8003bcc <xPortStartScheduler+0x12c>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	021b      	lsls	r3, r3, #8
 8003b58:	4a1c      	ldr	r2, [pc, #112]	; (8003bcc <xPortStartScheduler+0x12c>)
 8003b5a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003b5c:	4b1b      	ldr	r3, [pc, #108]	; (8003bcc <xPortStartScheduler+0x12c>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b64:	4a19      	ldr	r2, [pc, #100]	; (8003bcc <xPortStartScheduler+0x12c>)
 8003b66:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	b2da      	uxtb	r2, r3
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003b70:	4b17      	ldr	r3, [pc, #92]	; (8003bd0 <xPortStartScheduler+0x130>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a16      	ldr	r2, [pc, #88]	; (8003bd0 <xPortStartScheduler+0x130>)
 8003b76:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b7a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003b7c:	4b14      	ldr	r3, [pc, #80]	; (8003bd0 <xPortStartScheduler+0x130>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a13      	ldr	r2, [pc, #76]	; (8003bd0 <xPortStartScheduler+0x130>)
 8003b82:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003b86:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003b88:	f000 f8d6 	bl	8003d38 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003b8c:	4b11      	ldr	r3, [pc, #68]	; (8003bd4 <xPortStartScheduler+0x134>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003b92:	f000 f8f5 	bl	8003d80 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003b96:	4b10      	ldr	r3, [pc, #64]	; (8003bd8 <xPortStartScheduler+0x138>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a0f      	ldr	r2, [pc, #60]	; (8003bd8 <xPortStartScheduler+0x138>)
 8003b9c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003ba0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003ba2:	f7ff ff69 	bl	8003a78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003ba6:	f7fe ff5d 	bl	8002a64 <vTaskSwitchContext>
	prvTaskExitError();
 8003baa:	f7ff ff23 	bl	80039f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3718      	adds	r7, #24
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	e000ed00 	.word	0xe000ed00
 8003bbc:	410fc271 	.word	0x410fc271
 8003bc0:	410fc270 	.word	0x410fc270
 8003bc4:	e000e400 	.word	0xe000e400
 8003bc8:	20000c20 	.word	0x20000c20
 8003bcc:	20000c24 	.word	0x20000c24
 8003bd0:	e000ed20 	.word	0xe000ed20
 8003bd4:	20000010 	.word	0x20000010
 8003bd8:	e000ef34 	.word	0xe000ef34

08003bdc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be6:	f383 8811 	msr	BASEPRI, r3
 8003bea:	f3bf 8f6f 	isb	sy
 8003bee:	f3bf 8f4f 	dsb	sy
 8003bf2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003bf4:	4b0e      	ldr	r3, [pc, #56]	; (8003c30 <vPortEnterCritical+0x54>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	4a0d      	ldr	r2, [pc, #52]	; (8003c30 <vPortEnterCritical+0x54>)
 8003bfc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003bfe:	4b0c      	ldr	r3, [pc, #48]	; (8003c30 <vPortEnterCritical+0x54>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d10e      	bne.n	8003c24 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003c06:	4b0b      	ldr	r3, [pc, #44]	; (8003c34 <vPortEnterCritical+0x58>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d009      	beq.n	8003c24 <vPortEnterCritical+0x48>
 8003c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c14:	f383 8811 	msr	BASEPRI, r3
 8003c18:	f3bf 8f6f 	isb	sy
 8003c1c:	f3bf 8f4f 	dsb	sy
 8003c20:	603b      	str	r3, [r7, #0]
 8003c22:	e7fe      	b.n	8003c22 <vPortEnterCritical+0x46>
	}
}
 8003c24:	bf00      	nop
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr
 8003c30:	20000010 	.word	0x20000010
 8003c34:	e000ed04 	.word	0xe000ed04

08003c38 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003c3e:	4b11      	ldr	r3, [pc, #68]	; (8003c84 <vPortExitCritical+0x4c>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d109      	bne.n	8003c5a <vPortExitCritical+0x22>
 8003c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c4a:	f383 8811 	msr	BASEPRI, r3
 8003c4e:	f3bf 8f6f 	isb	sy
 8003c52:	f3bf 8f4f 	dsb	sy
 8003c56:	607b      	str	r3, [r7, #4]
 8003c58:	e7fe      	b.n	8003c58 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8003c5a:	4b0a      	ldr	r3, [pc, #40]	; (8003c84 <vPortExitCritical+0x4c>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	4a08      	ldr	r2, [pc, #32]	; (8003c84 <vPortExitCritical+0x4c>)
 8003c62:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003c64:	4b07      	ldr	r3, [pc, #28]	; (8003c84 <vPortExitCritical+0x4c>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d104      	bne.n	8003c76 <vPortExitCritical+0x3e>
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003c76:	bf00      	nop
 8003c78:	370c      	adds	r7, #12
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	20000010 	.word	0x20000010
	...

08003c90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003c90:	f3ef 8009 	mrs	r0, PSP
 8003c94:	f3bf 8f6f 	isb	sy
 8003c98:	4b15      	ldr	r3, [pc, #84]	; (8003cf0 <pxCurrentTCBConst>)
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	f01e 0f10 	tst.w	lr, #16
 8003ca0:	bf08      	it	eq
 8003ca2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003ca6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003caa:	6010      	str	r0, [r2, #0]
 8003cac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003cb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003cb4:	f380 8811 	msr	BASEPRI, r0
 8003cb8:	f3bf 8f4f 	dsb	sy
 8003cbc:	f3bf 8f6f 	isb	sy
 8003cc0:	f7fe fed0 	bl	8002a64 <vTaskSwitchContext>
 8003cc4:	f04f 0000 	mov.w	r0, #0
 8003cc8:	f380 8811 	msr	BASEPRI, r0
 8003ccc:	bc09      	pop	{r0, r3}
 8003cce:	6819      	ldr	r1, [r3, #0]
 8003cd0:	6808      	ldr	r0, [r1, #0]
 8003cd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cd6:	f01e 0f10 	tst.w	lr, #16
 8003cda:	bf08      	it	eq
 8003cdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003ce0:	f380 8809 	msr	PSP, r0
 8003ce4:	f3bf 8f6f 	isb	sy
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	f3af 8000 	nop.w

08003cf0 <pxCurrentTCBConst>:
 8003cf0:	20000ae0 	.word	0x20000ae0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003cf4:	bf00      	nop
 8003cf6:	bf00      	nop

08003cf8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
	__asm volatile
 8003cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d02:	f383 8811 	msr	BASEPRI, r3
 8003d06:	f3bf 8f6f 	isb	sy
 8003d0a:	f3bf 8f4f 	dsb	sy
 8003d0e:	607b      	str	r3, [r7, #4]
	known. */
	portDISABLE_INTERRUPTS();
  traceISR_ENTER();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003d10:	f7fe fdf0 	bl	80028f4 <xTaskIncrementTick>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d003      	beq.n	8003d22 <SysTick_Handler+0x2a>
		{
			traceISR_EXIT_TO_SCHEDULER();
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003d1a:	4b06      	ldr	r3, [pc, #24]	; (8003d34 <SysTick_Handler+0x3c>)
 8003d1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d20:	601a      	str	r2, [r3, #0]
 8003d22:	2300      	movs	r3, #0
 8003d24:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	f383 8811 	msr	BASEPRI, r3
		{
			traceISR_EXIT();
		}
	}
	portENABLE_INTERRUPTS();
}
 8003d2c:	bf00      	nop
 8003d2e:	3708      	adds	r7, #8
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	e000ed04 	.word	0xe000ed04

08003d38 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003d38:	b480      	push	{r7}
 8003d3a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003d3c:	4b0b      	ldr	r3, [pc, #44]	; (8003d6c <vPortSetupTimerInterrupt+0x34>)
 8003d3e:	2200      	movs	r2, #0
 8003d40:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003d42:	4b0b      	ldr	r3, [pc, #44]	; (8003d70 <vPortSetupTimerInterrupt+0x38>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003d48:	4b0a      	ldr	r3, [pc, #40]	; (8003d74 <vPortSetupTimerInterrupt+0x3c>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a0a      	ldr	r2, [pc, #40]	; (8003d78 <vPortSetupTimerInterrupt+0x40>)
 8003d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d52:	099b      	lsrs	r3, r3, #6
 8003d54:	4a09      	ldr	r2, [pc, #36]	; (8003d7c <vPortSetupTimerInterrupt+0x44>)
 8003d56:	3b01      	subs	r3, #1
 8003d58:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003d5a:	4b04      	ldr	r3, [pc, #16]	; (8003d6c <vPortSetupTimerInterrupt+0x34>)
 8003d5c:	2207      	movs	r2, #7
 8003d5e:	601a      	str	r2, [r3, #0]
}
 8003d60:	bf00      	nop
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	e000e010 	.word	0xe000e010
 8003d70:	e000e018 	.word	0xe000e018
 8003d74:	200000fc 	.word	0x200000fc
 8003d78:	10624dd3 	.word	0x10624dd3
 8003d7c:	e000e014 	.word	0xe000e014

08003d80 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003d80:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003d90 <vPortEnableVFP+0x10>
 8003d84:	6801      	ldr	r1, [r0, #0]
 8003d86:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003d8a:	6001      	str	r1, [r0, #0]
 8003d8c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003d8e:	bf00      	nop
 8003d90:	e000ed88 	.word	0xe000ed88

08003d94 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003d9a:	f3ef 8305 	mrs	r3, IPSR
 8003d9e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2b0f      	cmp	r3, #15
 8003da4:	d913      	bls.n	8003dce <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003da6:	4a16      	ldr	r2, [pc, #88]	; (8003e00 <vPortValidateInterruptPriority+0x6c>)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	4413      	add	r3, r2
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003db0:	4b14      	ldr	r3, [pc, #80]	; (8003e04 <vPortValidateInterruptPriority+0x70>)
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	7afa      	ldrb	r2, [r7, #11]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d209      	bcs.n	8003dce <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8003dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dbe:	f383 8811 	msr	BASEPRI, r3
 8003dc2:	f3bf 8f6f 	isb	sy
 8003dc6:	f3bf 8f4f 	dsb	sy
 8003dca:	607b      	str	r3, [r7, #4]
 8003dcc:	e7fe      	b.n	8003dcc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003dce:	4b0e      	ldr	r3, [pc, #56]	; (8003e08 <vPortValidateInterruptPriority+0x74>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003dd6:	4b0d      	ldr	r3, [pc, #52]	; (8003e0c <vPortValidateInterruptPriority+0x78>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d909      	bls.n	8003df2 <vPortValidateInterruptPriority+0x5e>
 8003dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de2:	f383 8811 	msr	BASEPRI, r3
 8003de6:	f3bf 8f6f 	isb	sy
 8003dea:	f3bf 8f4f 	dsb	sy
 8003dee:	603b      	str	r3, [r7, #0]
 8003df0:	e7fe      	b.n	8003df0 <vPortValidateInterruptPriority+0x5c>
	}
 8003df2:	bf00      	nop
 8003df4:	3714      	adds	r7, #20
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	e000e3f0 	.word	0xe000e3f0
 8003e04:	20000c20 	.word	0x20000c20
 8003e08:	e000ed0c 	.word	0xe000ed0c
 8003e0c:	20000c24 	.word	0x20000c24

08003e10 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b08a      	sub	sp, #40	; 0x28
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003e1c:	f7fe fcb0 	bl	8002780 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003e20:	4b57      	ldr	r3, [pc, #348]	; (8003f80 <pvPortMalloc+0x170>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d101      	bne.n	8003e2c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003e28:	f000 f90c 	bl	8004044 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003e2c:	4b55      	ldr	r3, [pc, #340]	; (8003f84 <pvPortMalloc+0x174>)
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4013      	ands	r3, r2
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	f040 808c 	bne.w	8003f52 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d01c      	beq.n	8003e7a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8003e40:	2208      	movs	r2, #8
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4413      	add	r3, r2
 8003e46:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f003 0307 	and.w	r3, r3, #7
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d013      	beq.n	8003e7a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f023 0307 	bic.w	r3, r3, #7
 8003e58:	3308      	adds	r3, #8
 8003e5a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f003 0307 	and.w	r3, r3, #7
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d009      	beq.n	8003e7a <pvPortMalloc+0x6a>
 8003e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e6a:	f383 8811 	msr	BASEPRI, r3
 8003e6e:	f3bf 8f6f 	isb	sy
 8003e72:	f3bf 8f4f 	dsb	sy
 8003e76:	617b      	str	r3, [r7, #20]
 8003e78:	e7fe      	b.n	8003e78 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d068      	beq.n	8003f52 <pvPortMalloc+0x142>
 8003e80:	4b41      	ldr	r3, [pc, #260]	; (8003f88 <pvPortMalloc+0x178>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d863      	bhi.n	8003f52 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003e8a:	4b40      	ldr	r3, [pc, #256]	; (8003f8c <pvPortMalloc+0x17c>)
 8003e8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003e8e:	4b3f      	ldr	r3, [pc, #252]	; (8003f8c <pvPortMalloc+0x17c>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003e94:	e004      	b.n	8003ea0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8003e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d903      	bls.n	8003eb2 <pvPortMalloc+0xa2>
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d1f1      	bne.n	8003e96 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003eb2:	4b33      	ldr	r3, [pc, #204]	; (8003f80 <pvPortMalloc+0x170>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d04a      	beq.n	8003f52 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003ebc:	6a3b      	ldr	r3, [r7, #32]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2208      	movs	r2, #8
 8003ec2:	4413      	add	r3, r2
 8003ec4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	6a3b      	ldr	r3, [r7, #32]
 8003ecc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed0:	685a      	ldr	r2, [r3, #4]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	1ad2      	subs	r2, r2, r3
 8003ed6:	2308      	movs	r3, #8
 8003ed8:	005b      	lsls	r3, r3, #1
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d91e      	bls.n	8003f1c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003ede:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	f003 0307 	and.w	r3, r3, #7
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d009      	beq.n	8003f04 <pvPortMalloc+0xf4>
 8003ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef4:	f383 8811 	msr	BASEPRI, r3
 8003ef8:	f3bf 8f6f 	isb	sy
 8003efc:	f3bf 8f4f 	dsb	sy
 8003f00:	613b      	str	r3, [r7, #16]
 8003f02:	e7fe      	b.n	8003f02 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f06:	685a      	ldr	r2, [r3, #4]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	1ad2      	subs	r2, r2, r3
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003f16:	69b8      	ldr	r0, [r7, #24]
 8003f18:	f000 f8f6 	bl	8004108 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003f1c:	4b1a      	ldr	r3, [pc, #104]	; (8003f88 <pvPortMalloc+0x178>)
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	4a18      	ldr	r2, [pc, #96]	; (8003f88 <pvPortMalloc+0x178>)
 8003f28:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003f2a:	4b17      	ldr	r3, [pc, #92]	; (8003f88 <pvPortMalloc+0x178>)
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	4b18      	ldr	r3, [pc, #96]	; (8003f90 <pvPortMalloc+0x180>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d203      	bcs.n	8003f3e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003f36:	4b14      	ldr	r3, [pc, #80]	; (8003f88 <pvPortMalloc+0x178>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a15      	ldr	r2, [pc, #84]	; (8003f90 <pvPortMalloc+0x180>)
 8003f3c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f40:	685a      	ldr	r2, [r3, #4]
 8003f42:	4b10      	ldr	r3, [pc, #64]	; (8003f84 <pvPortMalloc+0x174>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	431a      	orrs	r2, r3
 8003f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4e:	2200      	movs	r2, #0
 8003f50:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003f52:	f7fe fc23 	bl	800279c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	f003 0307 	and.w	r3, r3, #7
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d009      	beq.n	8003f74 <pvPortMalloc+0x164>
 8003f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f64:	f383 8811 	msr	BASEPRI, r3
 8003f68:	f3bf 8f6f 	isb	sy
 8003f6c:	f3bf 8f4f 	dsb	sy
 8003f70:	60fb      	str	r3, [r7, #12]
 8003f72:	e7fe      	b.n	8003f72 <pvPortMalloc+0x162>
	return pvReturn;
 8003f74:	69fb      	ldr	r3, [r7, #28]
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3728      	adds	r7, #40	; 0x28
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	20013830 	.word	0x20013830
 8003f84:	2001383c 	.word	0x2001383c
 8003f88:	20013834 	.word	0x20013834
 8003f8c:	20013828 	.word	0x20013828
 8003f90:	20013838 	.word	0x20013838

08003f94 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b086      	sub	sp, #24
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d046      	beq.n	8004034 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003fa6:	2308      	movs	r3, #8
 8003fa8:	425b      	negs	r3, r3
 8003faa:	697a      	ldr	r2, [r7, #20]
 8003fac:	4413      	add	r3, r2
 8003fae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	685a      	ldr	r2, [r3, #4]
 8003fb8:	4b20      	ldr	r3, [pc, #128]	; (800403c <vPortFree+0xa8>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d109      	bne.n	8003fd6 <vPortFree+0x42>
 8003fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc6:	f383 8811 	msr	BASEPRI, r3
 8003fca:	f3bf 8f6f 	isb	sy
 8003fce:	f3bf 8f4f 	dsb	sy
 8003fd2:	60fb      	str	r3, [r7, #12]
 8003fd4:	e7fe      	b.n	8003fd4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d009      	beq.n	8003ff2 <vPortFree+0x5e>
 8003fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe2:	f383 8811 	msr	BASEPRI, r3
 8003fe6:	f3bf 8f6f 	isb	sy
 8003fea:	f3bf 8f4f 	dsb	sy
 8003fee:	60bb      	str	r3, [r7, #8]
 8003ff0:	e7fe      	b.n	8003ff0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	685a      	ldr	r2, [r3, #4]
 8003ff6:	4b11      	ldr	r3, [pc, #68]	; (800403c <vPortFree+0xa8>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d019      	beq.n	8004034 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d115      	bne.n	8004034 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	685a      	ldr	r2, [r3, #4]
 800400c:	4b0b      	ldr	r3, [pc, #44]	; (800403c <vPortFree+0xa8>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	43db      	mvns	r3, r3
 8004012:	401a      	ands	r2, r3
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004018:	f7fe fbb2 	bl	8002780 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	685a      	ldr	r2, [r3, #4]
 8004020:	4b07      	ldr	r3, [pc, #28]	; (8004040 <vPortFree+0xac>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4413      	add	r3, r2
 8004026:	4a06      	ldr	r2, [pc, #24]	; (8004040 <vPortFree+0xac>)
 8004028:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800402a:	6938      	ldr	r0, [r7, #16]
 800402c:	f000 f86c 	bl	8004108 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004030:	f7fe fbb4 	bl	800279c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004034:	bf00      	nop
 8004036:	3718      	adds	r7, #24
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}
 800403c:	2001383c 	.word	0x2001383c
 8004040:	20013834 	.word	0x20013834

08004044 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004044:	b480      	push	{r7}
 8004046:	b085      	sub	sp, #20
 8004048:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800404a:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800404e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004050:	4b27      	ldr	r3, [pc, #156]	; (80040f0 <prvHeapInit+0xac>)
 8004052:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f003 0307 	and.w	r3, r3, #7
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00c      	beq.n	8004078 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	3307      	adds	r3, #7
 8004062:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f023 0307 	bic.w	r3, r3, #7
 800406a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800406c:	68ba      	ldr	r2, [r7, #8]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	4a1f      	ldr	r2, [pc, #124]	; (80040f0 <prvHeapInit+0xac>)
 8004074:	4413      	add	r3, r2
 8004076:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800407c:	4a1d      	ldr	r2, [pc, #116]	; (80040f4 <prvHeapInit+0xb0>)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004082:	4b1c      	ldr	r3, [pc, #112]	; (80040f4 <prvHeapInit+0xb0>)
 8004084:	2200      	movs	r2, #0
 8004086:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	68ba      	ldr	r2, [r7, #8]
 800408c:	4413      	add	r3, r2
 800408e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004090:	2208      	movs	r2, #8
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	1a9b      	subs	r3, r3, r2
 8004096:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f023 0307 	bic.w	r3, r3, #7
 800409e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	4a15      	ldr	r2, [pc, #84]	; (80040f8 <prvHeapInit+0xb4>)
 80040a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80040a6:	4b14      	ldr	r3, [pc, #80]	; (80040f8 <prvHeapInit+0xb4>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2200      	movs	r2, #0
 80040ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80040ae:	4b12      	ldr	r3, [pc, #72]	; (80040f8 <prvHeapInit+0xb4>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2200      	movs	r2, #0
 80040b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	1ad2      	subs	r2, r2, r3
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80040c4:	4b0c      	ldr	r3, [pc, #48]	; (80040f8 <prvHeapInit+0xb4>)
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	4a0a      	ldr	r2, [pc, #40]	; (80040fc <prvHeapInit+0xb8>)
 80040d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	4a09      	ldr	r2, [pc, #36]	; (8004100 <prvHeapInit+0xbc>)
 80040da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80040dc:	4b09      	ldr	r3, [pc, #36]	; (8004104 <prvHeapInit+0xc0>)
 80040de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80040e2:	601a      	str	r2, [r3, #0]
}
 80040e4:	bf00      	nop
 80040e6:	3714      	adds	r7, #20
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr
 80040f0:	20000c28 	.word	0x20000c28
 80040f4:	20013828 	.word	0x20013828
 80040f8:	20013830 	.word	0x20013830
 80040fc:	20013838 	.word	0x20013838
 8004100:	20013834 	.word	0x20013834
 8004104:	2001383c 	.word	0x2001383c

08004108 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004108:	b480      	push	{r7}
 800410a:	b085      	sub	sp, #20
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004110:	4b28      	ldr	r3, [pc, #160]	; (80041b4 <prvInsertBlockIntoFreeList+0xac>)
 8004112:	60fb      	str	r3, [r7, #12]
 8004114:	e002      	b.n	800411c <prvInsertBlockIntoFreeList+0x14>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	60fb      	str	r3, [r7, #12]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	429a      	cmp	r2, r3
 8004124:	d8f7      	bhi.n	8004116 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	68ba      	ldr	r2, [r7, #8]
 8004130:	4413      	add	r3, r2
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	429a      	cmp	r2, r3
 8004136:	d108      	bne.n	800414a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	685a      	ldr	r2, [r3, #4]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	441a      	add	r2, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	68ba      	ldr	r2, [r7, #8]
 8004154:	441a      	add	r2, r3
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	429a      	cmp	r2, r3
 800415c:	d118      	bne.n	8004190 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	4b15      	ldr	r3, [pc, #84]	; (80041b8 <prvInsertBlockIntoFreeList+0xb0>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	429a      	cmp	r2, r3
 8004168:	d00d      	beq.n	8004186 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685a      	ldr	r2, [r3, #4]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	441a      	add	r2, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	601a      	str	r2, [r3, #0]
 8004184:	e008      	b.n	8004198 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004186:	4b0c      	ldr	r3, [pc, #48]	; (80041b8 <prvInsertBlockIntoFreeList+0xb0>)
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	601a      	str	r2, [r3, #0]
 800418e:	e003      	b.n	8004198 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	429a      	cmp	r2, r3
 800419e:	d002      	beq.n	80041a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80041a6:	bf00      	nop
 80041a8:	3714      	adds	r7, #20
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	20013828 	.word	0x20013828
 80041b8:	20013830 	.word	0x20013830

080041bc <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	4603      	mov	r3, r0
 80041c4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80041c6:	79fb      	ldrb	r3, [r7, #7]
 80041c8:	f003 021f 	and.w	r2, r3, #31
 80041cc:	4907      	ldr	r1, [pc, #28]	; (80041ec <NVIC_EnableIRQ+0x30>)
 80041ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041d2:	095b      	lsrs	r3, r3, #5
 80041d4:	2001      	movs	r0, #1
 80041d6:	fa00 f202 	lsl.w	r2, r0, r2
 80041da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80041de:	bf00      	nop
 80041e0:	370c      	adds	r7, #12
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	e000e100 	.word	0xe000e100

080041f0 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	4603      	mov	r3, r0
 80041f8:	6039      	str	r1, [r7, #0]
 80041fa:	71fb      	strb	r3, [r7, #7]
  if((int32_t)IRQn < 0) {
 80041fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004200:	2b00      	cmp	r3, #0
 8004202:	da0b      	bge.n	800421c <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	b2da      	uxtb	r2, r3
 8004208:	490c      	ldr	r1, [pc, #48]	; (800423c <NVIC_SetPriority+0x4c>)
 800420a:	79fb      	ldrb	r3, [r7, #7]
 800420c:	f003 030f 	and.w	r3, r3, #15
 8004210:	3b04      	subs	r3, #4
 8004212:	0112      	lsls	r2, r2, #4
 8004214:	b2d2      	uxtb	r2, r2
 8004216:	440b      	add	r3, r1
 8004218:	761a      	strb	r2, [r3, #24]
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800421a:	e009      	b.n	8004230 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	b2da      	uxtb	r2, r3
 8004220:	4907      	ldr	r1, [pc, #28]	; (8004240 <NVIC_SetPriority+0x50>)
 8004222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004226:	0112      	lsls	r2, r2, #4
 8004228:	b2d2      	uxtb	r2, r2
 800422a:	440b      	add	r3, r1
 800422c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr
 800423c:	e000ed00 	.word	0xe000ed00
 8004240:	e000e100 	.word	0xe000e100

08004244 <main>:
#define LED_TOGGLE_STOP_COMMAND 		4
#define LED_READ_STATUS_COMMAND 		5
#define RTC_READ_DATE_TIME_COMMAND		6

int main(void)
{
 8004244:	b5b0      	push	{r4, r5, r7, lr}
 8004246:	b082      	sub	sp, #8
 8004248:	af02      	add	r7, sp, #8
	DWT->CTRL |= (1 << 0);//Enable CYCCNT in DWT_CTRL.
 800424a:	4b38      	ldr	r3, [pc, #224]	; (800432c <main+0xe8>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a37      	ldr	r2, [pc, #220]	; (800432c <main+0xe8>)
 8004250:	f043 0301 	orr.w	r3, r3, #1
 8004254:	6013      	str	r3, [r2, #0]

	//1.  Reset the RCC clock configuration to the default reset state.
	//HSI ON, PLL OFF, HSE OFF, system clock = 16MHz, cpu_clock = 16MHz
	RCC_DeInit();
 8004256:	f7fc ffc5 	bl	80011e4 <RCC_DeInit>

	//2. update the SystemCoreClock variable
	SystemCoreClockUpdate();
 800425a:	f000 fb99 	bl	8004990 <SystemCoreClockUpdate>

	prvSetupHardware();
 800425e:	f000 f937 	bl	80044d0 <prvSetupHardware>

	sprintf(usr_msg,"\r\nThis is Queue Command Processing Demo\r\n");
 8004262:	4a33      	ldr	r2, [pc, #204]	; (8004330 <main+0xec>)
 8004264:	4b33      	ldr	r3, [pc, #204]	; (8004334 <main+0xf0>)
 8004266:	4614      	mov	r4, r2
 8004268:	461d      	mov	r5, r3
 800426a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800426c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800426e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004270:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004272:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004276:	c403      	stmia	r4!, {r0, r1}
 8004278:	8022      	strh	r2, [r4, #0]
	printmsg(usr_msg);
 800427a:	482d      	ldr	r0, [pc, #180]	; (8004330 <main+0xec>)
 800427c:	f000 f930 	bl	80044e0 <printmsg>

	//lets create command queue
	command_queue = xQueueCreate(10,sizeof(APP_CMD_t*));
 8004280:	2200      	movs	r2, #0
 8004282:	2104      	movs	r1, #4
 8004284:	200a      	movs	r0, #10
 8004286:	f7fd fcb9 	bl	8001bfc <xQueueGenericCreate>
 800428a:	4602      	mov	r2, r0
 800428c:	4b2a      	ldr	r3, [pc, #168]	; (8004338 <main+0xf4>)
 800428e:	601a      	str	r2, [r3, #0]

	//lets create the write queue
	uart_write_queue = xQueueCreate(10,sizeof(char*));
 8004290:	2200      	movs	r2, #0
 8004292:	2104      	movs	r1, #4
 8004294:	200a      	movs	r0, #10
 8004296:	f7fd fcb1 	bl	8001bfc <xQueueGenericCreate>
 800429a:	4602      	mov	r2, r0
 800429c:	4b27      	ldr	r3, [pc, #156]	; (800433c <main+0xf8>)
 800429e:	601a      	str	r2, [r3, #0]


	if((command_queue != NULL) && (uart_write_queue != NULL))
 80042a0:	4b25      	ldr	r3, [pc, #148]	; (8004338 <main+0xf4>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d032      	beq.n	800430e <main+0xca>
 80042a8:	4b24      	ldr	r3, [pc, #144]	; (800433c <main+0xf8>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d02e      	beq.n	800430e <main+0xca>
	{
		//lets create task-1
		xTaskCreate(vTask1_menu_display,"TASK1-MENU",500,NULL,1,&xTaskHandle1);
 80042b0:	4b23      	ldr	r3, [pc, #140]	; (8004340 <main+0xfc>)
 80042b2:	9301      	str	r3, [sp, #4]
 80042b4:	2301      	movs	r3, #1
 80042b6:	9300      	str	r3, [sp, #0]
 80042b8:	2300      	movs	r3, #0
 80042ba:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80042be:	4921      	ldr	r1, [pc, #132]	; (8004344 <main+0x100>)
 80042c0:	4821      	ldr	r0, [pc, #132]	; (8004348 <main+0x104>)
 80042c2:	f7fe f8cf 	bl	8002464 <xTaskCreate>

		//lets create task-2
		xTaskCreate(vTask2_cmd_handling,"TASK2-CMD-HANDLING",500,NULL,2,&xTaskHandle2);
 80042c6:	4b21      	ldr	r3, [pc, #132]	; (800434c <main+0x108>)
 80042c8:	9301      	str	r3, [sp, #4]
 80042ca:	2302      	movs	r3, #2
 80042cc:	9300      	str	r3, [sp, #0]
 80042ce:	2300      	movs	r3, #0
 80042d0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80042d4:	491e      	ldr	r1, [pc, #120]	; (8004350 <main+0x10c>)
 80042d6:	481f      	ldr	r0, [pc, #124]	; (8004354 <main+0x110>)
 80042d8:	f7fe f8c4 	bl	8002464 <xTaskCreate>

		//lets create task-3
		xTaskCreate(vTask3_cmd_processing,"TASK3-CMD-PROCESS",500,NULL,2,&xTaskHandle3);
 80042dc:	4b1e      	ldr	r3, [pc, #120]	; (8004358 <main+0x114>)
 80042de:	9301      	str	r3, [sp, #4]
 80042e0:	2302      	movs	r3, #2
 80042e2:	9300      	str	r3, [sp, #0]
 80042e4:	2300      	movs	r3, #0
 80042e6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80042ea:	491c      	ldr	r1, [pc, #112]	; (800435c <main+0x118>)
 80042ec:	481c      	ldr	r0, [pc, #112]	; (8004360 <main+0x11c>)
 80042ee:	f7fe f8b9 	bl	8002464 <xTaskCreate>

		//lets create task-3
		xTaskCreate(vTask4_uart_write,"TASK4-UART-WRITE",500,NULL,2,&xTaskHandle4);
 80042f2:	4b1c      	ldr	r3, [pc, #112]	; (8004364 <main+0x120>)
 80042f4:	9301      	str	r3, [sp, #4]
 80042f6:	2302      	movs	r3, #2
 80042f8:	9300      	str	r3, [sp, #0]
 80042fa:	2300      	movs	r3, #0
 80042fc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004300:	4919      	ldr	r1, [pc, #100]	; (8004368 <main+0x124>)
 8004302:	481a      	ldr	r0, [pc, #104]	; (800436c <main+0x128>)
 8004304:	f7fe f8ae 	bl	8002464 <xTaskCreate>

	    //lets start the scheduler
	    vTaskStartScheduler();
 8004308:	f7fe f9ee 	bl	80026e8 <vTaskStartScheduler>
 800430c:	e00c      	b.n	8004328 <main+0xe4>
	}else
	{
		sprintf(usr_msg,"Queue creation failed\r\n");
 800430e:	4a08      	ldr	r2, [pc, #32]	; (8004330 <main+0xec>)
 8004310:	4b17      	ldr	r3, [pc, #92]	; (8004370 <main+0x12c>)
 8004312:	4614      	mov	r4, r2
 8004314:	461d      	mov	r5, r3
 8004316:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004318:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800431a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800431e:	e884 0003 	stmia.w	r4, {r0, r1}
		printmsg(usr_msg);
 8004322:	4803      	ldr	r0, [pc, #12]	; (8004330 <main+0xec>)
 8004324:	f000 f8dc 	bl	80044e0 <printmsg>
	}




	for(;;);
 8004328:	e7fe      	b.n	8004328 <main+0xe4>
 800432a:	bf00      	nop
 800432c:	e0001000 	.word	0xe0001000
 8004330:	20013840 	.word	0x20013840
 8004334:	08008188 	.word	0x08008188
 8004338:	2001394c 	.word	0x2001394c
 800433c:	20013950 	.word	0x20013950
 8004340:	2001393c 	.word	0x2001393c
 8004344:	080081b4 	.word	0x080081b4
 8004348:	08004375 	.word	0x08004375
 800434c:	20013940 	.word	0x20013940
 8004350:	080081c0 	.word	0x080081c0
 8004354:	080043ad 	.word	0x080043ad
 8004358:	20013944 	.word	0x20013944
 800435c:	080081d4 	.word	0x080081d4
 8004360:	08004409 	.word	0x08004409
 8004364:	20013948 	.word	0x20013948
 8004368:	080081e8 	.word	0x080081e8
 800436c:	080044a5 	.word	0x080044a5
 8004370:	080081fc 	.word	0x080081fc

08004374 <vTask1_menu_display>:
}

//Task handler implementations
void vTask1_menu_display(void *params)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]

char *pData = menu;
 800437c:	4b09      	ldr	r3, [pc, #36]	; (80043a4 <vTask1_menu_display+0x30>)
 800437e:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		xQueueSend(uart_write_queue,&pData,portMAX_DELAY);
 8004380:	4b09      	ldr	r3, [pc, #36]	; (80043a8 <vTask1_menu_display+0x34>)
 8004382:	6818      	ldr	r0, [r3, #0]
 8004384:	f107 010c 	add.w	r1, r7, #12
 8004388:	2300      	movs	r3, #0
 800438a:	f04f 32ff 	mov.w	r2, #4294967295
 800438e:	f7fd fc93 	bl	8001cb8 <xQueueGenericSend>

		//lets wait here until someone notifies.
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8004392:	f04f 33ff 	mov.w	r3, #4294967295
 8004396:	2200      	movs	r2, #0
 8004398:	2100      	movs	r1, #0
 800439a:	2000      	movs	r0, #0
 800439c:	f7fe fe44 	bl	8003028 <xTaskNotifyWait>
		xQueueSend(uart_write_queue,&pData,portMAX_DELAY);
 80043a0:	e7ee      	b.n	8004380 <vTask1_menu_display+0xc>
 80043a2:	bf00      	nop
 80043a4:	20000014 	.word	0x20000014
 80043a8:	20013950 	.word	0x20013950

080043ac <vTask2_cmd_handling>:

	}
}

void vTask2_cmd_handling(void *params)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
	uint8_t command_code=0;
 80043b4:	2300      	movs	r3, #0
 80043b6:	73fb      	strb	r3, [r7, #15]
	APP_CMD_t *new_cmd;


	while(1)
	{
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80043b8:	f04f 33ff 	mov.w	r3, #4294967295
 80043bc:	2200      	movs	r2, #0
 80043be:	2100      	movs	r1, #0
 80043c0:	2000      	movs	r0, #0
 80043c2:	f7fe fe31 	bl	8003028 <xTaskNotifyWait>
		//1. send command to queue
		new_cmd = (APP_CMD_t*) pvPortMalloc(sizeof(APP_CMD_t));
 80043c6:	200b      	movs	r0, #11
 80043c8:	f7ff fd22 	bl	8003e10 <pvPortMalloc>
 80043cc:	4603      	mov	r3, r0
 80043ce:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 80043d0:	f7ff fc04 	bl	8003bdc <vPortEnterCritical>
		command_code = command_buffer;
 80043d4:	4b0a      	ldr	r3, [pc, #40]	; (8004400 <vTask2_cmd_handling+0x54>)
 80043d6:	73fb      	strb	r3, [r7, #15]
		new_cmd->COMMAND_NUM = command_code;
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	7bfa      	ldrb	r2, [r7, #15]
 80043dc:	701a      	strb	r2, [r3, #0]
		getArguments(new_cmd->COMMAND_ARGS);
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	3301      	adds	r3, #1
 80043e2:	4618      	mov	r0, r3
 80043e4:	f000 f9ac 	bl	8004740 <getArguments>
		taskEXIT_CRITICAL();
 80043e8:	f7ff fc26 	bl	8003c38 <vPortExitCritical>

		//send the command to the command queue
		xQueueSend(command_queue,&new_cmd,portMAX_DELAY);
 80043ec:	4b05      	ldr	r3, [pc, #20]	; (8004404 <vTask2_cmd_handling+0x58>)
 80043ee:	6818      	ldr	r0, [r3, #0]
 80043f0:	f107 0108 	add.w	r1, r7, #8
 80043f4:	2300      	movs	r3, #0
 80043f6:	f04f 32ff 	mov.w	r2, #4294967295
 80043fa:	f7fd fc5d 	bl	8001cb8 <xQueueGenericSend>
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80043fe:	e7db      	b.n	80043b8 <vTask2_cmd_handling+0xc>
 8004400:	200139d4 	.word	0x200139d4
 8004404:	2001394c 	.word	0x2001394c

08004408 <vTask3_cmd_processing>:

}


void vTask3_cmd_processing(void *params)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b092      	sub	sp, #72	; 0x48
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
	APP_CMD_t *new_cmd;
	char task_msg[50];

	uint32_t toggle_duration = pdMS_TO_TICKS(500);
 8004410:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004414:	647b      	str	r3, [r7, #68]	; 0x44

	while(1)
	{
		xQueueReceive(command_queue,(void*)&new_cmd,portMAX_DELAY);
 8004416:	4b22      	ldr	r3, [pc, #136]	; (80044a0 <vTask3_cmd_processing+0x98>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800441e:	f04f 32ff 	mov.w	r2, #4294967295
 8004422:	4618      	mov	r0, r3
 8004424:	f7fd fdd6 	bl	8001fd4 <xQueueReceive>

		if(new_cmd->COMMAND_NUM == LED_ON_COMMAND)
 8004428:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	2b01      	cmp	r3, #1
 800442e:	d102      	bne.n	8004436 <vTask3_cmd_processing+0x2e>
		{
			make_led_on();
 8004430:	f000 f990 	bl	8004754 <make_led_on>
 8004434:	e02e      	b.n	8004494 <vTask3_cmd_processing+0x8c>
		}
		else if(new_cmd->COMMAND_NUM == LED_OFF_COMMAND)
 8004436:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	2b02      	cmp	r3, #2
 800443c:	d102      	bne.n	8004444 <vTask3_cmd_processing+0x3c>
		{
			make_led_off();
 800443e:	f000 f995 	bl	800476c <make_led_off>
 8004442:	e027      	b.n	8004494 <vTask3_cmd_processing+0x8c>
		}
		else if(new_cmd->COMMAND_NUM == LED_TOGGLE_COMMAND)
 8004444:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	2b03      	cmp	r3, #3
 800444a:	d103      	bne.n	8004454 <vTask3_cmd_processing+0x4c>
		{
			led_toggle_start(toggle_duration);
 800444c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800444e:	f000 f9a7 	bl	80047a0 <led_toggle_start>
 8004452:	e01f      	b.n	8004494 <vTask3_cmd_processing+0x8c>
		}
		else if(new_cmd->COMMAND_NUM == LED_TOGGLE_STOP_COMMAND)
 8004454:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	2b04      	cmp	r3, #4
 800445a:	d102      	bne.n	8004462 <vTask3_cmd_processing+0x5a>
		{
			led_toggle_stop();
 800445c:	f000 f9d8 	bl	8004810 <led_toggle_stop>
 8004460:	e018      	b.n	8004494 <vTask3_cmd_processing+0x8c>
		}
		else if(new_cmd->COMMAND_NUM == LED_READ_STATUS_COMMAND)
 8004462:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	2b05      	cmp	r3, #5
 8004468:	d105      	bne.n	8004476 <vTask3_cmd_processing+0x6e>
		{
			read_led_status(task_msg);
 800446a:	f107 030c 	add.w	r3, r7, #12
 800446e:	4618      	mov	r0, r3
 8004470:	f000 f9e0 	bl	8004834 <read_led_status>
 8004474:	e00e      	b.n	8004494 <vTask3_cmd_processing+0x8c>
		}
		else if(new_cmd->COMMAND_NUM == RTC_READ_DATE_TIME_COMMAND )
 8004476:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	2b06      	cmp	r3, #6
 800447c:	d105      	bne.n	800448a <vTask3_cmd_processing+0x82>
		{
			read_rtc_info(task_msg);
 800447e:	f107 030c 	add.w	r3, r7, #12
 8004482:	4618      	mov	r0, r3
 8004484:	f000 f9f8 	bl	8004878 <read_rtc_info>
 8004488:	e004      	b.n	8004494 <vTask3_cmd_processing+0x8c>
		}else
		{
			print_error_message(task_msg);
 800448a:	f107 030c 	add.w	r3, r7, #12
 800448e:	4618      	mov	r0, r3
 8004490:	f000 fa24 	bl	80048dc <print_error_message>
		}

		//lets free the allocated memory for the new command
		vPortFree(new_cmd);
 8004494:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004496:	4618      	mov	r0, r3
 8004498:	f7ff fd7c 	bl	8003f94 <vPortFree>
		xQueueReceive(command_queue,(void*)&new_cmd,portMAX_DELAY);
 800449c:	e7bb      	b.n	8004416 <vTask3_cmd_processing+0xe>
 800449e:	bf00      	nop
 80044a0:	2001394c 	.word	0x2001394c

080044a4 <vTask4_uart_write>:

	}
}

void vTask4_uart_write(void *params)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
	char *pData = NULL;
 80044ac:	2300      	movs	r3, #0
 80044ae:	60fb      	str	r3, [r7, #12]
	while(1)
	{

		xQueueReceive(uart_write_queue,&pData,portMAX_DELAY);
 80044b0:	4b06      	ldr	r3, [pc, #24]	; (80044cc <vTask4_uart_write+0x28>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f107 010c 	add.w	r1, r7, #12
 80044b8:	f04f 32ff 	mov.w	r2, #4294967295
 80044bc:	4618      	mov	r0, r3
 80044be:	f7fd fd89 	bl	8001fd4 <xQueueReceive>
		printmsg(pData);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	4618      	mov	r0, r3
 80044c6:	f000 f80b 	bl	80044e0 <printmsg>
		xQueueReceive(uart_write_queue,&pData,portMAX_DELAY);
 80044ca:	e7f1      	b.n	80044b0 <vTask4_uart_write+0xc>
 80044cc:	20013950 	.word	0x20013950

080044d0 <prvSetupHardware>:
	}
}


static void prvSetupHardware(void)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	af00      	add	r7, sp, #0
	//Setup Button and LED
	prvSetupGpio();
 80044d4:	f000 f892 	bl	80045fc <prvSetupGpio>

	//setup UART2
	prvSetupUart();
 80044d8:	f000 f832 	bl	8004540 <prvSetupUart>
}
 80044dc:	bf00      	nop
 80044de:	bd80      	pop	{r7, pc}

080044e0 <printmsg>:

void printmsg(char *msg)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0; i < strlen(msg); i++)
 80044e8:	2300      	movs	r3, #0
 80044ea:	60fb      	str	r3, [r7, #12]
 80044ec:	e013      	b.n	8004516 <printmsg+0x36>
	{
		while ( USART_GetFlagStatus(USART2,USART_FLAG_TXE) != SET);
 80044ee:	bf00      	nop
 80044f0:	2180      	movs	r1, #128	; 0x80
 80044f2:	4812      	ldr	r0, [pc, #72]	; (800453c <printmsg+0x5c>)
 80044f4:	f7fd fa4a 	bl	800198c <USART_GetFlagStatus>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d1f8      	bne.n	80044f0 <printmsg+0x10>
		USART_SendData(USART2,msg[i]);
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	4413      	add	r3, r2
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	b29b      	uxth	r3, r3
 8004508:	4619      	mov	r1, r3
 800450a:	480c      	ldr	r0, [pc, #48]	; (800453c <printmsg+0x5c>)
 800450c:	f7fd f9d4 	bl	80018b8 <USART_SendData>
	for(uint32_t i=0; i < strlen(msg); i++)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	3301      	adds	r3, #1
 8004514:	60fb      	str	r3, [r7, #12]
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f7fb fe6a 	bl	80001f0 <strlen>
 800451c:	4602      	mov	r2, r0
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	4293      	cmp	r3, r2
 8004522:	d3e4      	bcc.n	80044ee <printmsg+0xe>
	}

	while ( USART_GetFlagStatus(USART2,USART_FLAG_TC) != SET);
 8004524:	bf00      	nop
 8004526:	2140      	movs	r1, #64	; 0x40
 8004528:	4804      	ldr	r0, [pc, #16]	; (800453c <printmsg+0x5c>)
 800452a:	f7fd fa2f 	bl	800198c <USART_GetFlagStatus>
 800452e:	4603      	mov	r3, r0
 8004530:	2b01      	cmp	r3, #1
 8004532:	d1f8      	bne.n	8004526 <printmsg+0x46>

}
 8004534:	bf00      	nop
 8004536:	3710      	adds	r7, #16
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}
 800453c:	40004400 	.word	0x40004400

08004540 <prvSetupUart>:


static void prvSetupUart(void)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b086      	sub	sp, #24
 8004544:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpio_uart_pins;
	USART_InitTypeDef uart2_init;

	//1. Enable the UART2  and GPIOA Peripheral clock
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2,ENABLE);
 8004546:	2101      	movs	r1, #1
 8004548:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800454c:	f7fc ff9c 	bl	8001488 <RCC_APB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE);
 8004550:	2101      	movs	r1, #1
 8004552:	2001      	movs	r0, #1
 8004554:	f7fc ff78 	bl	8001448 <RCC_AHB1PeriphClockCmd>
	//PA2 is UART2_TX, PA3 is UART2_RX

	//2. Alternate function configuration of MCU pins to behave as UART2 TX and RX

	//zeroing each and every member element of the structure
	memset(&gpio_uart_pins,0,sizeof(gpio_uart_pins));
 8004558:	f107 0310 	add.w	r3, r7, #16
 800455c:	2208      	movs	r2, #8
 800455e:	2100      	movs	r1, #0
 8004560:	4618      	mov	r0, r3
 8004562:	f000 fbd2 	bl	8004d0a <memset>

	gpio_uart_pins.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 8004566:	230c      	movs	r3, #12
 8004568:	613b      	str	r3, [r7, #16]
	gpio_uart_pins.GPIO_Mode = GPIO_Mode_AF;
 800456a:	2302      	movs	r3, #2
 800456c:	753b      	strb	r3, [r7, #20]
	gpio_uart_pins.GPIO_PuPd = GPIO_PuPd_UP;
 800456e:	2301      	movs	r3, #1
 8004570:	75fb      	strb	r3, [r7, #23]
	gpio_uart_pins.GPIO_OType= GPIO_OType_PP;
 8004572:	2300      	movs	r3, #0
 8004574:	75bb      	strb	r3, [r7, #22]
	gpio_uart_pins.GPIO_Speed = GPIO_High_Speed;
 8004576:	2303      	movs	r3, #3
 8004578:	757b      	strb	r3, [r7, #21]
	GPIO_Init(GPIOA, &gpio_uart_pins);
 800457a:	f107 0310 	add.w	r3, r7, #16
 800457e:	4619      	mov	r1, r3
 8004580:	481c      	ldr	r0, [pc, #112]	; (80045f4 <prvSetupUart+0xb4>)
 8004582:	f7fc fd13 	bl	8000fac <GPIO_Init>


	//3. AF mode settings for the pins
    GPIO_PinAFConfig(GPIOA,GPIO_PinSource2,GPIO_AF_USART2); //PA2
 8004586:	2207      	movs	r2, #7
 8004588:	2102      	movs	r1, #2
 800458a:	481a      	ldr	r0, [pc, #104]	; (80045f4 <prvSetupUart+0xb4>)
 800458c:	f7fc fde0 	bl	8001150 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA,GPIO_PinSource3,GPIO_AF_USART2); //PA3
 8004590:	2207      	movs	r2, #7
 8004592:	2103      	movs	r1, #3
 8004594:	4817      	ldr	r0, [pc, #92]	; (80045f4 <prvSetupUart+0xb4>)
 8004596:	f7fc fddb 	bl	8001150 <GPIO_PinAFConfig>

	//4. UART parameter initializations
	//zeroing each and every member element of the structure
	memset(&uart2_init,0,sizeof(uart2_init));
 800459a:	463b      	mov	r3, r7
 800459c:	2210      	movs	r2, #16
 800459e:	2100      	movs	r1, #0
 80045a0:	4618      	mov	r0, r3
 80045a2:	f000 fbb2 	bl	8004d0a <memset>

	uart2_init.USART_BaudRate = 115200;
 80045a6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80045aa:	603b      	str	r3, [r7, #0]
	uart2_init.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 80045ac:	2300      	movs	r3, #0
 80045ae:	81bb      	strh	r3, [r7, #12]
	uart2_init.USART_Mode =  USART_Mode_Tx | USART_Mode_Rx;
 80045b0:	230c      	movs	r3, #12
 80045b2:	817b      	strh	r3, [r7, #10]
	uart2_init.USART_Parity = USART_Parity_No;
 80045b4:	2300      	movs	r3, #0
 80045b6:	813b      	strh	r3, [r7, #8]
	uart2_init.USART_StopBits = USART_StopBits_1;
 80045b8:	2300      	movs	r3, #0
 80045ba:	80fb      	strh	r3, [r7, #6]
	uart2_init.USART_WordLength = USART_WordLength_8b;
 80045bc:	2300      	movs	r3, #0
 80045be:	80bb      	strh	r3, [r7, #4]
	USART_Init(USART2,&uart2_init);
 80045c0:	463b      	mov	r3, r7
 80045c2:	4619      	mov	r1, r3
 80045c4:	480c      	ldr	r0, [pc, #48]	; (80045f8 <prvSetupUart+0xb8>)
 80045c6:	f7fd f89d 	bl	8001704 <USART_Init>

	//lets enable the UART byte reception interrupt in the microcontroller
	USART_ITConfig(USART2,USART_IT_RXNE,ENABLE);
 80045ca:	2201      	movs	r2, #1
 80045cc:	f240 5125 	movw	r1, #1317	; 0x525
 80045d0:	4809      	ldr	r0, [pc, #36]	; (80045f8 <prvSetupUart+0xb8>)
 80045d2:	f7fd f993 	bl	80018fc <USART_ITConfig>

	//lets set the priority in NVIC for the UART2 interrupt
	NVIC_SetPriority(USART2_IRQn,5);
 80045d6:	2105      	movs	r1, #5
 80045d8:	2026      	movs	r0, #38	; 0x26
 80045da:	f7ff fe09 	bl	80041f0 <NVIC_SetPriority>

	//enable the UART2 IRQ in the NVIC
	NVIC_EnableIRQ(USART2_IRQn);
 80045de:	2026      	movs	r0, #38	; 0x26
 80045e0:	f7ff fdec 	bl	80041bc <NVIC_EnableIRQ>

	//5. Enable the UART2 peripheral
	USART_Cmd(USART2,ENABLE);
 80045e4:	2101      	movs	r1, #1
 80045e6:	4804      	ldr	r0, [pc, #16]	; (80045f8 <prvSetupUart+0xb8>)
 80045e8:	f7fd f946 	bl	8001878 <USART_Cmd>

}
 80045ec:	bf00      	nop
 80045ee:	3718      	adds	r7, #24
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	40020000 	.word	0x40020000
 80045f8:	40004400 	.word	0x40004400

080045fc <prvSetupGpio>:


void prvSetupGpio(void)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b086      	sub	sp, #24
 8004600:	af00      	add	r7, sp, #0
// this function is board specific

	//Peripheral clock enable for GPIOA and GPIOC
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE);
 8004602:	2101      	movs	r1, #1
 8004604:	2001      	movs	r0, #1
 8004606:	f7fc ff1f 	bl	8001448 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC,ENABLE);
 800460a:	2101      	movs	r1, #1
 800460c:	2004      	movs	r0, #4
 800460e:	f7fc ff1b 	bl	8001448 <RCC_AHB1PeriphClockCmd>
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG,ENABLE);
 8004612:	2101      	movs	r1, #1
 8004614:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004618:	f7fc ff56 	bl	80014c8 <RCC_APB2PeriphClockCmd>

	GPIO_InitTypeDef led_init, button_init;
	led_init.GPIO_Mode = GPIO_Mode_OUT;
 800461c:	2301      	movs	r3, #1
 800461e:	753b      	strb	r3, [r7, #20]
	led_init.GPIO_OType = GPIO_OType_PP;
 8004620:	2300      	movs	r3, #0
 8004622:	75bb      	strb	r3, [r7, #22]
	led_init.GPIO_Pin = GPIO_Pin_5;
 8004624:	2320      	movs	r3, #32
 8004626:	613b      	str	r3, [r7, #16]
	led_init.GPIO_Speed = GPIO_Low_Speed;
 8004628:	2300      	movs	r3, #0
 800462a:	757b      	strb	r3, [r7, #21]
	led_init.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800462c:	2300      	movs	r3, #0
 800462e:	75fb      	strb	r3, [r7, #23]
	GPIO_Init(GPIOA,&led_init);
 8004630:	f107 0310 	add.w	r3, r7, #16
 8004634:	4619      	mov	r1, r3
 8004636:	4818      	ldr	r0, [pc, #96]	; (8004698 <prvSetupGpio+0x9c>)
 8004638:	f7fc fcb8 	bl	8000fac <GPIO_Init>

	button_init.GPIO_Mode = GPIO_Mode_IN;
 800463c:	2300      	movs	r3, #0
 800463e:	733b      	strb	r3, [r7, #12]
	button_init.GPIO_OType = GPIO_OType_PP;
 8004640:	2300      	movs	r3, #0
 8004642:	73bb      	strb	r3, [r7, #14]
	button_init.GPIO_Pin = GPIO_Pin_13;
 8004644:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004648:	60bb      	str	r3, [r7, #8]
	button_init.GPIO_Speed = GPIO_Low_Speed;
 800464a:	2300      	movs	r3, #0
 800464c:	737b      	strb	r3, [r7, #13]
	button_init.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800464e:	2300      	movs	r3, #0
 8004650:	73fb      	strb	r3, [r7, #15]
	GPIO_Init(GPIOC,&button_init);
 8004652:	f107 0308 	add.w	r3, r7, #8
 8004656:	4619      	mov	r1, r3
 8004658:	4810      	ldr	r0, [pc, #64]	; (800469c <prvSetupGpio+0xa0>)
 800465a:	f7fc fca7 	bl	8000fac <GPIO_Init>

	//interrupt configuration for the button (PC13)
	//1. system configuration for exti line (SYSCFG settings)
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOC,EXTI_PinSource13);
 800465e:	210d      	movs	r1, #13
 8004660:	2002      	movs	r0, #2
 8004662:	f7fd f80d 	bl	8001680 <SYSCFG_EXTILineConfig>

	//2. EXTI line configuration 13,falling edge, interrup mode
	EXTI_InitTypeDef exti_init;
	exti_init.EXTI_Line = EXTI_Line13;
 8004666:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800466a:	603b      	str	r3, [r7, #0]
	exti_init.EXTI_Mode = EXTI_Mode_Interrupt;
 800466c:	2300      	movs	r3, #0
 800466e:	713b      	strb	r3, [r7, #4]
	exti_init.EXTI_Trigger = EXTI_Trigger_Falling;
 8004670:	230c      	movs	r3, #12
 8004672:	717b      	strb	r3, [r7, #5]
	exti_init.EXTI_LineCmd = ENABLE;
 8004674:	2301      	movs	r3, #1
 8004676:	71bb      	strb	r3, [r7, #6]
	EXTI_Init(&exti_init);
 8004678:	463b      	mov	r3, r7
 800467a:	4618      	mov	r0, r3
 800467c:	f7fc fc24 	bl	8000ec8 <EXTI_Init>

	//3. NVIC settings (IRQ settings for the selected EXTI line(13)
	NVIC_SetPriority(EXTI15_10_IRQn,5);
 8004680:	2105      	movs	r1, #5
 8004682:	2028      	movs	r0, #40	; 0x28
 8004684:	f7ff fdb4 	bl	80041f0 <NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004688:	2028      	movs	r0, #40	; 0x28
 800468a:	f7ff fd97 	bl	80041bc <NVIC_EnableIRQ>


}
 800468e:	bf00      	nop
 8004690:	3718      	adds	r7, #24
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	40020000 	.word	0x40020000
 800469c:	40020800 	.word	0x40020800

080046a0 <USART2_IRQHandler>:
	while ( xTaskGetTickCount() < (tick_count_local+delay_in_ticks ));
}


void USART2_IRQHandler(void)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af02      	add	r7, sp, #8
	uint16_t data_byte;
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80046a6:	2300      	movs	r3, #0
 80046a8:	603b      	str	r3, [r7, #0]

	if( USART_GetFlagStatus(USART2,USART_FLAG_RXNE) )
 80046aa:	2120      	movs	r1, #32
 80046ac:	481e      	ldr	r0, [pc, #120]	; (8004728 <USART2_IRQHandler+0x88>)
 80046ae:	f7fd f96d 	bl	800198c <USART_GetFlagStatus>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d027      	beq.n	8004708 <USART2_IRQHandler+0x68>
	{
		//a data byte is received from the user
		data_byte = USART_ReceiveData(USART2);
 80046b8:	481b      	ldr	r0, [pc, #108]	; (8004728 <USART2_IRQHandler+0x88>)
 80046ba:	f7fd f90f 	bl	80018dc <USART_ReceiveData>
 80046be:	4603      	mov	r3, r0
 80046c0:	80fb      	strh	r3, [r7, #6]

		command_buffer[command_len++] = (data_byte & 0xFF) ;
 80046c2:	4b1a      	ldr	r3, [pc, #104]	; (800472c <USART2_IRQHandler+0x8c>)
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	1c5a      	adds	r2, r3, #1
 80046c8:	b2d1      	uxtb	r1, r2
 80046ca:	4a18      	ldr	r2, [pc, #96]	; (800472c <USART2_IRQHandler+0x8c>)
 80046cc:	7011      	strb	r1, [r2, #0]
 80046ce:	461a      	mov	r2, r3
 80046d0:	88fb      	ldrh	r3, [r7, #6]
 80046d2:	b2d9      	uxtb	r1, r3
 80046d4:	4b16      	ldr	r3, [pc, #88]	; (8004730 <USART2_IRQHandler+0x90>)
 80046d6:	5499      	strb	r1, [r3, r2]

		if(data_byte == '\r')
 80046d8:	88fb      	ldrh	r3, [r7, #6]
 80046da:	2b0d      	cmp	r3, #13
 80046dc:	d114      	bne.n	8004708 <USART2_IRQHandler+0x68>
		{
			//then user is finished entering the data

			//reset the command_len variable
			command_len = 0;
 80046de:	4b13      	ldr	r3, [pc, #76]	; (800472c <USART2_IRQHandler+0x8c>)
 80046e0:	2200      	movs	r2, #0
 80046e2:	701a      	strb	r2, [r3, #0]

			// notify the command handling task
			xTaskNotifyFromISR(xTaskHandle2,0,eNoAction,&xHigherPriorityTaskWoken);
 80046e4:	4b13      	ldr	r3, [pc, #76]	; (8004734 <USART2_IRQHandler+0x94>)
 80046e6:	6818      	ldr	r0, [r3, #0]
 80046e8:	463b      	mov	r3, r7
 80046ea:	9300      	str	r3, [sp, #0]
 80046ec:	2300      	movs	r3, #0
 80046ee:	2200      	movs	r2, #0
 80046f0:	2100      	movs	r1, #0
 80046f2:	f7fe fcf3 	bl	80030dc <xTaskGenericNotifyFromISR>

			xTaskNotifyFromISR(xTaskHandle1,0,eNoAction,&xHigherPriorityTaskWoken);
 80046f6:	4b10      	ldr	r3, [pc, #64]	; (8004738 <USART2_IRQHandler+0x98>)
 80046f8:	6818      	ldr	r0, [r3, #0]
 80046fa:	463b      	mov	r3, r7
 80046fc:	9300      	str	r3, [sp, #0]
 80046fe:	2300      	movs	r3, #0
 8004700:	2200      	movs	r2, #0
 8004702:	2100      	movs	r1, #0
 8004704:	f7fe fcea 	bl	80030dc <xTaskGenericNotifyFromISR>
	}

	// if the above freertos apis wake up any higher priority task, then yield the processor to the
	//higher priority task which is just woken up.

	if(xHigherPriorityTaskWoken)
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d007      	beq.n	800471e <USART2_IRQHandler+0x7e>
	{
		taskYIELD();
 800470e:	4b0b      	ldr	r3, [pc, #44]	; (800473c <USART2_IRQHandler+0x9c>)
 8004710:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004714:	601a      	str	r2, [r3, #0]
 8004716:	f3bf 8f4f 	dsb	sy
 800471a:	f3bf 8f6f 	isb	sy
	}

}
 800471e:	bf00      	nop
 8004720:	3708      	adds	r7, #8
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	40004400 	.word	0x40004400
 800472c:	20013958 	.word	0x20013958
 8004730:	200139d4 	.word	0x200139d4
 8004734:	20013940 	.word	0x20013940
 8004738:	2001393c 	.word	0x2001393c
 800473c:	e000ed04 	.word	0xe000ed04

08004740 <getArguments>:
	return buffer[0]-48;
}


void getArguments(uint8_t *buffer)
{
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]


}
 8004748:	bf00      	nop
 800474a:	370c      	adds	r7, #12
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

08004754 <make_led_on>:


void make_led_on(void)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	af00      	add	r7, sp, #0
	GPIO_WriteBit(GPIOA,GPIO_Pin_5,Bit_SET);
 8004758:	2201      	movs	r2, #1
 800475a:	2120      	movs	r1, #32
 800475c:	4802      	ldr	r0, [pc, #8]	; (8004768 <make_led_on+0x14>)
 800475e:	f7fc fccd 	bl	80010fc <GPIO_WriteBit>
}
 8004762:	bf00      	nop
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	40020000 	.word	0x40020000

0800476c <make_led_off>:


void make_led_off(void)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	af00      	add	r7, sp, #0
	GPIO_WriteBit(GPIOA,GPIO_Pin_5,Bit_RESET);
 8004770:	2200      	movs	r2, #0
 8004772:	2120      	movs	r1, #32
 8004774:	4802      	ldr	r0, [pc, #8]	; (8004780 <make_led_off+0x14>)
 8004776:	f7fc fcc1 	bl	80010fc <GPIO_WriteBit>
}
 800477a:	bf00      	nop
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	40020000 	.word	0x40020000

08004784 <led_toggle>:



void led_toggle(TimerHandle_t xTimer)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
	GPIO_ToggleBits(GPIOA,GPIO_Pin_5);
 800478c:	2120      	movs	r1, #32
 800478e:	4803      	ldr	r0, [pc, #12]	; (800479c <led_toggle+0x18>)
 8004790:	f7fc fccc 	bl	800112c <GPIO_ToggleBits>
}
 8004794:	bf00      	nop
 8004796:	3708      	adds	r7, #8
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	40020000 	.word	0x40020000

080047a0 <led_toggle_start>:

void led_toggle_start(uint32_t duration)
{
 80047a0:	b590      	push	{r4, r7, lr}
 80047a2:	b085      	sub	sp, #20
 80047a4:	af02      	add	r7, sp, #8
 80047a6:	6078      	str	r0, [r7, #4]

	if(led_timer_handle == NULL)
 80047a8:	4b16      	ldr	r3, [pc, #88]	; (8004804 <led_toggle_start+0x64>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d118      	bne.n	80047e2 <led_toggle_start+0x42>
	{
		//1.  create the software timer
		led_timer_handle = xTimerCreate("LED-TIMER",duration,pdTRUE,NULL,led_toggle);
 80047b0:	4b15      	ldr	r3, [pc, #84]	; (8004808 <led_toggle_start+0x68>)
 80047b2:	9300      	str	r3, [sp, #0]
 80047b4:	2300      	movs	r3, #0
 80047b6:	2201      	movs	r2, #1
 80047b8:	6879      	ldr	r1, [r7, #4]
 80047ba:	4814      	ldr	r0, [pc, #80]	; (800480c <led_toggle_start+0x6c>)
 80047bc:	f7fe fdfe 	bl	80033bc <xTimerCreate>
 80047c0:	4602      	mov	r2, r0
 80047c2:	4b10      	ldr	r3, [pc, #64]	; (8004804 <led_toggle_start+0x64>)
 80047c4:	601a      	str	r2, [r3, #0]

		//2. start the software timer
		xTimerStart(led_timer_handle,portMAX_DELAY);
 80047c6:	4b0f      	ldr	r3, [pc, #60]	; (8004804 <led_toggle_start+0x64>)
 80047c8:	681c      	ldr	r4, [r3, #0]
 80047ca:	f7fe f883 	bl	80028d4 <xTaskGetTickCount>
 80047ce:	4602      	mov	r2, r0
 80047d0:	f04f 33ff 	mov.w	r3, #4294967295
 80047d4:	9300      	str	r3, [sp, #0]
 80047d6:	2300      	movs	r3, #0
 80047d8:	2101      	movs	r1, #1
 80047da:	4620      	mov	r0, r4
 80047dc:	f7fe fe3c 	bl	8003458 <xTimerGenericCommand>
	else
	{
		//start the software timer
		xTimerStart(led_timer_handle,portMAX_DELAY);
	}
}
 80047e0:	e00c      	b.n	80047fc <led_toggle_start+0x5c>
		xTimerStart(led_timer_handle,portMAX_DELAY);
 80047e2:	4b08      	ldr	r3, [pc, #32]	; (8004804 <led_toggle_start+0x64>)
 80047e4:	681c      	ldr	r4, [r3, #0]
 80047e6:	f7fe f875 	bl	80028d4 <xTaskGetTickCount>
 80047ea:	4602      	mov	r2, r0
 80047ec:	f04f 33ff 	mov.w	r3, #4294967295
 80047f0:	9300      	str	r3, [sp, #0]
 80047f2:	2300      	movs	r3, #0
 80047f4:	2101      	movs	r1, #1
 80047f6:	4620      	mov	r0, r4
 80047f8:	f7fe fe2e 	bl	8003458 <xTimerGenericCommand>
}
 80047fc:	bf00      	nop
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	bd90      	pop	{r4, r7, pc}
 8004804:	20013954 	.word	0x20013954
 8004808:	08004785 	.word	0x08004785
 800480c:	08008214 	.word	0x08008214

08004810 <led_toggle_stop>:


void led_toggle_stop(void)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b082      	sub	sp, #8
 8004814:	af02      	add	r7, sp, #8
	 xTimerStop(led_timer_handle,portMAX_DELAY);
 8004816:	4b06      	ldr	r3, [pc, #24]	; (8004830 <led_toggle_stop+0x20>)
 8004818:	6818      	ldr	r0, [r3, #0]
 800481a:	f04f 33ff 	mov.w	r3, #4294967295
 800481e:	9300      	str	r3, [sp, #0]
 8004820:	2300      	movs	r3, #0
 8004822:	2200      	movs	r2, #0
 8004824:	2103      	movs	r1, #3
 8004826:	f7fe fe17 	bl	8003458 <xTimerGenericCommand>
}
 800482a:	bf00      	nop
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}
 8004830:	20013954 	.word	0x20013954

08004834 <read_led_status>:


void read_led_status(char *task_msg)
{
 8004834:	b590      	push	{r4, r7, lr}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
	sprintf(task_msg , "\r\nLED status is : %d\r\n", GPIO_ReadOutputDataBit(GPIOA,GPIO_Pin_5));
 800483c:	687c      	ldr	r4, [r7, #4]
 800483e:	2120      	movs	r1, #32
 8004840:	480a      	ldr	r0, [pc, #40]	; (800486c <read_led_status+0x38>)
 8004842:	f7fc fc41 	bl	80010c8 <GPIO_ReadOutputDataBit>
 8004846:	4603      	mov	r3, r0
 8004848:	461a      	mov	r2, r3
 800484a:	4909      	ldr	r1, [pc, #36]	; (8004870 <read_led_status+0x3c>)
 800484c:	4620      	mov	r0, r4
 800484e:	f000 fa65 	bl	8004d1c <sprintf>
	xQueueSend(uart_write_queue,&task_msg,portMAX_DELAY);
 8004852:	4b08      	ldr	r3, [pc, #32]	; (8004874 <read_led_status+0x40>)
 8004854:	6818      	ldr	r0, [r3, #0]
 8004856:	1d39      	adds	r1, r7, #4
 8004858:	2300      	movs	r3, #0
 800485a:	f04f 32ff 	mov.w	r2, #4294967295
 800485e:	f7fd fa2b 	bl	8001cb8 <xQueueGenericSend>
}
 8004862:	bf00      	nop
 8004864:	370c      	adds	r7, #12
 8004866:	46bd      	mov	sp, r7
 8004868:	bd90      	pop	{r4, r7, pc}
 800486a:	bf00      	nop
 800486c:	40020000 	.word	0x40020000
 8004870:	08008220 	.word	0x08008220
 8004874:	20013950 	.word	0x20013950

08004878 <read_rtc_info>:


void read_rtc_info(char *task_msg)
{
 8004878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800487a:	b08d      	sub	sp, #52	; 0x34
 800487c:	af04      	add	r7, sp, #16
 800487e:	6078      	str	r0, [r7, #4]
	RTC_InitTypeDef RTC_handler;
	RTC_TimeTypeDef RTC_time;
	RTC_DateTypeDef RTC_date;
	//read time and date from RTC peripheral of the microcontroller

	RTC_GetTime(RTC_Format_BIN, &RTC_time);
 8004880:	f107 0310 	add.w	r3, r7, #16
 8004884:	4619      	mov	r1, r3
 8004886:	2000      	movs	r0, #0
 8004888:	f7fc fe3e 	bl	8001508 <RTC_GetTime>
	RTC_GetDate(RTC_Format_BIN, &RTC_date);
 800488c:	f107 030c 	add.w	r3, r7, #12
 8004890:	4619      	mov	r1, r3
 8004892:	2000      	movs	r0, #0
 8004894:	f7fc fe8a 	bl	80015ac <RTC_GetDate>

	sprintf(task_msg,"\r\nTime: %02d:%02d:%02d \r\n Date : %02d-%2d-%2d \r\n",RTC_time.RTC_Hours,RTC_time.RTC_Minutes,RTC_time.RTC_Seconds, \
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	7c3b      	ldrb	r3, [r7, #16]
 800489c:	461d      	mov	r5, r3
 800489e:	7c7b      	ldrb	r3, [r7, #17]
 80048a0:	461e      	mov	r6, r3
 80048a2:	7cbb      	ldrb	r3, [r7, #18]
									RTC_date.RTC_Date,RTC_date.RTC_Month,RTC_date.RTC_Year );
 80048a4:	7bba      	ldrb	r2, [r7, #14]
 80048a6:	7b79      	ldrb	r1, [r7, #13]
 80048a8:	7bfc      	ldrb	r4, [r7, #15]
	sprintf(task_msg,"\r\nTime: %02d:%02d:%02d \r\n Date : %02d-%2d-%2d \r\n",RTC_time.RTC_Hours,RTC_time.RTC_Minutes,RTC_time.RTC_Seconds, \
 80048aa:	9403      	str	r4, [sp, #12]
 80048ac:	9102      	str	r1, [sp, #8]
 80048ae:	9201      	str	r2, [sp, #4]
 80048b0:	9300      	str	r3, [sp, #0]
 80048b2:	4633      	mov	r3, r6
 80048b4:	462a      	mov	r2, r5
 80048b6:	4907      	ldr	r1, [pc, #28]	; (80048d4 <read_rtc_info+0x5c>)
 80048b8:	f000 fa30 	bl	8004d1c <sprintf>
	xQueueSend(uart_write_queue,&task_msg,portMAX_DELAY);
 80048bc:	4b06      	ldr	r3, [pc, #24]	; (80048d8 <read_rtc_info+0x60>)
 80048be:	6818      	ldr	r0, [r3, #0]
 80048c0:	1d39      	adds	r1, r7, #4
 80048c2:	2300      	movs	r3, #0
 80048c4:	f04f 32ff 	mov.w	r2, #4294967295
 80048c8:	f7fd f9f6 	bl	8001cb8 <xQueueGenericSend>


}
 80048cc:	bf00      	nop
 80048ce:	3724      	adds	r7, #36	; 0x24
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048d4:	08008238 	.word	0x08008238
 80048d8:	20013950 	.word	0x20013950

080048dc <print_error_message>:


void print_error_message(char *task_msg)
{
 80048dc:	b5b0      	push	{r4, r5, r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
	sprintf( task_msg,"\r\nInvalid command received\r\n");
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a0d      	ldr	r2, [pc, #52]	; (800491c <print_error_message+0x40>)
 80048e8:	461d      	mov	r5, r3
 80048ea:	4614      	mov	r4, r2
 80048ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048ee:	6028      	str	r0, [r5, #0]
 80048f0:	6069      	str	r1, [r5, #4]
 80048f2:	60aa      	str	r2, [r5, #8]
 80048f4:	60eb      	str	r3, [r5, #12]
 80048f6:	cc07      	ldmia	r4!, {r0, r1, r2}
 80048f8:	6128      	str	r0, [r5, #16]
 80048fa:	6169      	str	r1, [r5, #20]
 80048fc:	61aa      	str	r2, [r5, #24]
 80048fe:	7823      	ldrb	r3, [r4, #0]
 8004900:	772b      	strb	r3, [r5, #28]
	xQueueSend(uart_write_queue,&task_msg,portMAX_DELAY);
 8004902:	4b07      	ldr	r3, [pc, #28]	; (8004920 <print_error_message+0x44>)
 8004904:	6818      	ldr	r0, [r3, #0]
 8004906:	1d39      	adds	r1, r7, #4
 8004908:	2300      	movs	r3, #0
 800490a:	f04f 32ff 	mov.w	r2, #4294967295
 800490e:	f7fd f9d3 	bl	8001cb8 <xQueueGenericSend>
}
 8004912:	bf00      	nop
 8004914:	3708      	adds	r7, #8
 8004916:	46bd      	mov	sp, r7
 8004918:	bdb0      	pop	{r4, r5, r7, pc}
 800491a:	bf00      	nop
 800491c:	0800826c 	.word	0x0800826c
 8004920:	20013950 	.word	0x20013950

08004924 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004928:	4b16      	ldr	r3, [pc, #88]	; (8004984 <SystemInit+0x60>)
 800492a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800492e:	4a15      	ldr	r2, [pc, #84]	; (8004984 <SystemInit+0x60>)
 8004930:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004934:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004938:	4b13      	ldr	r3, [pc, #76]	; (8004988 <SystemInit+0x64>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a12      	ldr	r2, [pc, #72]	; (8004988 <SystemInit+0x64>)
 800493e:	f043 0301 	orr.w	r3, r3, #1
 8004942:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004944:	4b10      	ldr	r3, [pc, #64]	; (8004988 <SystemInit+0x64>)
 8004946:	2200      	movs	r2, #0
 8004948:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800494a:	4b0f      	ldr	r3, [pc, #60]	; (8004988 <SystemInit+0x64>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a0e      	ldr	r2, [pc, #56]	; (8004988 <SystemInit+0x64>)
 8004950:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004954:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004958:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800495a:	4b0b      	ldr	r3, [pc, #44]	; (8004988 <SystemInit+0x64>)
 800495c:	4a0b      	ldr	r2, [pc, #44]	; (800498c <SystemInit+0x68>)
 800495e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004960:	4b09      	ldr	r3, [pc, #36]	; (8004988 <SystemInit+0x64>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a08      	ldr	r2, [pc, #32]	; (8004988 <SystemInit+0x64>)
 8004966:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800496a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800496c:	4b06      	ldr	r3, [pc, #24]	; (8004988 <SystemInit+0x64>)
 800496e:	2200      	movs	r2, #0
 8004970:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8004972:	f000 f8db 	bl	8004b2c <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004976:	4b03      	ldr	r3, [pc, #12]	; (8004984 <SystemInit+0x60>)
 8004978:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800497c:	609a      	str	r2, [r3, #8]
#endif
}
 800497e:	bf00      	nop
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	e000ed00 	.word	0xe000ed00
 8004988:	40023800 	.word	0x40023800
 800498c:	24003010 	.word	0x24003010

08004990 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8004990:	b480      	push	{r7}
 8004992:	b087      	sub	sp, #28
 8004994:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8004996:	2300      	movs	r3, #0
 8004998:	613b      	str	r3, [r7, #16]
 800499a:	2300      	movs	r3, #0
 800499c:	617b      	str	r3, [r7, #20]
 800499e:	2302      	movs	r3, #2
 80049a0:	60fb      	str	r3, [r7, #12]
 80049a2:	2300      	movs	r3, #0
 80049a4:	60bb      	str	r3, [r7, #8]
 80049a6:	2302      	movs	r3, #2
 80049a8:	607b      	str	r3, [r7, #4]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
 80049aa:	2302      	movs	r3, #2
 80049ac:	603b      	str	r3, [r7, #0]
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80049ae:	4b5a      	ldr	r3, [pc, #360]	; (8004b18 <SystemCoreClockUpdate+0x188>)
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f003 030c 	and.w	r3, r3, #12
 80049b6:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	2b0c      	cmp	r3, #12
 80049bc:	f200 8092 	bhi.w	8004ae4 <SystemCoreClockUpdate+0x154>
 80049c0:	a201      	add	r2, pc, #4	; (adr r2, 80049c8 <SystemCoreClockUpdate+0x38>)
 80049c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049c6:	bf00      	nop
 80049c8:	080049fd 	.word	0x080049fd
 80049cc:	08004ae5 	.word	0x08004ae5
 80049d0:	08004ae5 	.word	0x08004ae5
 80049d4:	08004ae5 	.word	0x08004ae5
 80049d8:	08004a05 	.word	0x08004a05
 80049dc:	08004ae5 	.word	0x08004ae5
 80049e0:	08004ae5 	.word	0x08004ae5
 80049e4:	08004ae5 	.word	0x08004ae5
 80049e8:	08004a0d 	.word	0x08004a0d
 80049ec:	08004ae5 	.word	0x08004ae5
 80049f0:	08004ae5 	.word	0x08004ae5
 80049f4:	08004ae5 	.word	0x08004ae5
 80049f8:	08004a79 	.word	0x08004a79
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80049fc:	4b47      	ldr	r3, [pc, #284]	; (8004b1c <SystemCoreClockUpdate+0x18c>)
 80049fe:	4a48      	ldr	r2, [pc, #288]	; (8004b20 <SystemCoreClockUpdate+0x190>)
 8004a00:	601a      	str	r2, [r3, #0]
      break;
 8004a02:	e073      	b.n	8004aec <SystemCoreClockUpdate+0x15c>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8004a04:	4b45      	ldr	r3, [pc, #276]	; (8004b1c <SystemCoreClockUpdate+0x18c>)
 8004a06:	4a47      	ldr	r2, [pc, #284]	; (8004b24 <SystemCoreClockUpdate+0x194>)
 8004a08:	601a      	str	r2, [r3, #0]
      break;
 8004a0a:	e06f      	b.n	8004aec <SystemCoreClockUpdate+0x15c>
    case 0x08:  /* PLL P used as system clock source */
       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8004a0c:	4b42      	ldr	r3, [pc, #264]	; (8004b18 <SystemCoreClockUpdate+0x188>)
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	0d9b      	lsrs	r3, r3, #22
 8004a12:	f003 0301 	and.w	r3, r3, #1
 8004a16:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a18:	4b3f      	ldr	r3, [pc, #252]	; (8004b18 <SystemCoreClockUpdate+0x188>)
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a20:	607b      	str	r3, [r7, #4]
      
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx) || defined(STM32F469_479xx)
      if (pllsource != 0)
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d00c      	beq.n	8004a42 <SystemCoreClockUpdate+0xb2>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8004a28:	4a3e      	ldr	r2, [pc, #248]	; (8004b24 <SystemCoreClockUpdate+0x194>)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a30:	4a39      	ldr	r2, [pc, #228]	; (8004b18 <SystemCoreClockUpdate+0x188>)
 8004a32:	6852      	ldr	r2, [r2, #4]
 8004a34:	0992      	lsrs	r2, r2, #6
 8004a36:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a3a:	fb02 f303 	mul.w	r3, r2, r3
 8004a3e:	617b      	str	r3, [r7, #20]
 8004a40:	e00b      	b.n	8004a5a <SystemCoreClockUpdate+0xca>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8004a42:	4a37      	ldr	r2, [pc, #220]	; (8004b20 <SystemCoreClockUpdate+0x190>)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a4a:	4a33      	ldr	r2, [pc, #204]	; (8004b18 <SystemCoreClockUpdate+0x188>)
 8004a4c:	6852      	ldr	r2, [r2, #4]
 8004a4e:	0992      	lsrs	r2, r2, #6
 8004a50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a54:	fb02 f303 	mul.w	r3, r2, r3
 8004a58:	617b      	str	r3, [r7, #20]
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }  
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F412xG || STM32F413_423xx ||  STM32F446xx || STM32F469_479xx */  
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8004a5a:	4b2f      	ldr	r3, [pc, #188]	; (8004b18 <SystemCoreClockUpdate+0x188>)
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	0c1b      	lsrs	r3, r3, #16
 8004a60:	f003 0303 	and.w	r3, r3, #3
 8004a64:	3301      	adds	r3, #1
 8004a66:	005b      	lsls	r3, r3, #1
 8004a68:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;      
 8004a6a:	697a      	ldr	r2, [r7, #20]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a72:	4a2a      	ldr	r2, [pc, #168]	; (8004b1c <SystemCoreClockUpdate+0x18c>)
 8004a74:	6013      	str	r3, [r2, #0]
      break;
 8004a76:	e039      	b.n	8004aec <SystemCoreClockUpdate+0x15c>
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)      
      case 0x0C:  /* PLL R used as system clock source */
       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_R
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8004a78:	4b27      	ldr	r3, [pc, #156]	; (8004b18 <SystemCoreClockUpdate+0x188>)
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	0d9b      	lsrs	r3, r3, #22
 8004a7e:	f003 0301 	and.w	r3, r3, #1
 8004a82:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a84:	4b24      	ldr	r3, [pc, #144]	; (8004b18 <SystemCoreClockUpdate+0x188>)
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a8c:	607b      	str	r3, [r7, #4]
      if (pllsource != 0)
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d00c      	beq.n	8004aae <SystemCoreClockUpdate+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8004a94:	4a23      	ldr	r2, [pc, #140]	; (8004b24 <SystemCoreClockUpdate+0x194>)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a9c:	4a1e      	ldr	r2, [pc, #120]	; (8004b18 <SystemCoreClockUpdate+0x188>)
 8004a9e:	6852      	ldr	r2, [r2, #4]
 8004aa0:	0992      	lsrs	r2, r2, #6
 8004aa2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004aa6:	fb02 f303 	mul.w	r3, r2, r3
 8004aaa:	617b      	str	r3, [r7, #20]
 8004aac:	e00b      	b.n	8004ac6 <SystemCoreClockUpdate+0x136>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8004aae:	4a1c      	ldr	r2, [pc, #112]	; (8004b20 <SystemCoreClockUpdate+0x190>)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab6:	4a18      	ldr	r2, [pc, #96]	; (8004b18 <SystemCoreClockUpdate+0x188>)
 8004ab8:	6852      	ldr	r2, [r2, #4]
 8004aba:	0992      	lsrs	r2, r2, #6
 8004abc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ac0:	fb02 f303 	mul.w	r3, r2, r3
 8004ac4:	617b      	str	r3, [r7, #20]
      }
 
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >>28) + 1 ) *2;
 8004ac6:	4b14      	ldr	r3, [pc, #80]	; (8004b18 <SystemCoreClockUpdate+0x188>)
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	0f1b      	lsrs	r3, r3, #28
 8004acc:	f003 0307 	and.w	r3, r3, #7
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	005b      	lsls	r3, r3, #1
 8004ad4:	603b      	str	r3, [r7, #0]
      SystemCoreClock = pllvco/pllr;      
 8004ad6:	697a      	ldr	r2, [r7, #20]
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ade:	4a0f      	ldr	r2, [pc, #60]	; (8004b1c <SystemCoreClockUpdate+0x18c>)
 8004ae0:	6013      	str	r3, [r2, #0]
      break;
 8004ae2:	e003      	b.n	8004aec <SystemCoreClockUpdate+0x15c>
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    default:
      SystemCoreClock = HSI_VALUE;
 8004ae4:	4b0d      	ldr	r3, [pc, #52]	; (8004b1c <SystemCoreClockUpdate+0x18c>)
 8004ae6:	4a0e      	ldr	r2, [pc, #56]	; (8004b20 <SystemCoreClockUpdate+0x190>)
 8004ae8:	601a      	str	r2, [r3, #0]
      break;
 8004aea:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8004aec:	4b0a      	ldr	r3, [pc, #40]	; (8004b18 <SystemCoreClockUpdate+0x188>)
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	091b      	lsrs	r3, r3, #4
 8004af2:	f003 030f 	and.w	r3, r3, #15
 8004af6:	4a0c      	ldr	r2, [pc, #48]	; (8004b28 <SystemCoreClockUpdate+0x198>)
 8004af8:	5cd3      	ldrb	r3, [r2, r3]
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8004afe:	4b07      	ldr	r3, [pc, #28]	; (8004b1c <SystemCoreClockUpdate+0x18c>)
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	fa22 f303 	lsr.w	r3, r2, r3
 8004b08:	4a04      	ldr	r2, [pc, #16]	; (8004b1c <SystemCoreClockUpdate+0x18c>)
 8004b0a:	6013      	str	r3, [r2, #0]
}
 8004b0c:	bf00      	nop
 8004b0e:	371c      	adds	r7, #28
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr
 8004b18:	40023800 	.word	0x40023800
 8004b1c:	200000fc 	.word	0x200000fc
 8004b20:	00f42400 	.word	0x00f42400
 8004b24:	007a1200 	.word	0x007a1200
 8004b28:	20000100 	.word	0x20000100

08004b2c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)|| defined(STM32F469_479xx)
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8004b32:	2300      	movs	r3, #0
 8004b34:	607b      	str	r3, [r7, #4]
 8004b36:	2300      	movs	r3, #0
 8004b38:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8004b3a:	4b43      	ldr	r3, [pc, #268]	; (8004c48 <SetSysClock+0x11c>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a42      	ldr	r2, [pc, #264]	; (8004c48 <SetSysClock+0x11c>)
 8004b40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b44:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8004b46:	4b40      	ldr	r3, [pc, #256]	; (8004c48 <SetSysClock+0x11c>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b4e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	3301      	adds	r3, #1
 8004b54:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d103      	bne.n	8004b64 <SetSysClock+0x38>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004b62:	d1f0      	bne.n	8004b46 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8004b64:	4b38      	ldr	r3, [pc, #224]	; (8004c48 <SetSysClock+0x11c>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d002      	beq.n	8004b76 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8004b70:	2301      	movs	r3, #1
 8004b72:	603b      	str	r3, [r7, #0]
 8004b74:	e001      	b.n	8004b7a <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8004b76:	2300      	movs	r3, #0
 8004b78:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d15c      	bne.n	8004c3a <SetSysClock+0x10e>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8004b80:	4b31      	ldr	r3, [pc, #196]	; (8004c48 <SetSysClock+0x11c>)
 8004b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b84:	4a30      	ldr	r2, [pc, #192]	; (8004c48 <SetSysClock+0x11c>)
 8004b86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b8a:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8004b8c:	4b2f      	ldr	r3, [pc, #188]	; (8004c4c <SetSysClock+0x120>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a2e      	ldr	r2, [pc, #184]	; (8004c4c <SetSysClock+0x120>)
 8004b92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b96:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8004b98:	4b2b      	ldr	r3, [pc, #172]	; (8004c48 <SetSysClock+0x11c>)
 8004b9a:	4a2b      	ldr	r2, [pc, #172]	; (8004c48 <SetSysClock+0x11c>)
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	6093      	str	r3, [r2, #8]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) ||  defined(STM32F412xG) || defined(STM32F446xx) || defined(STM32F469_479xx)    
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8004ba0:	4b29      	ldr	r3, [pc, #164]	; (8004c48 <SetSysClock+0x11c>)
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	4a28      	ldr	r2, [pc, #160]	; (8004c48 <SetSysClock+0x11c>)
 8004ba6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004baa:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8004bac:	4b26      	ldr	r3, [pc, #152]	; (8004c48 <SetSysClock+0x11c>)
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	4a25      	ldr	r2, [pc, #148]	; (8004c48 <SetSysClock+0x11c>)
 8004bb2:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8004bb6:	6093      	str	r3, [r2, #8]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
#endif /* STM32F40_41xxx || STM32F401xx || STM32F427_437x || STM32F429_439xx || STM32F469_479xx */

#if  defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8004bb8:	4b23      	ldr	r3, [pc, #140]	; (8004c48 <SetSysClock+0x11c>)
 8004bba:	4a25      	ldr	r2, [pc, #148]	; (8004c50 <SetSysClock+0x124>)
 8004bbc:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24) | (PLL_R << 28);
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */    
    
    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8004bbe:	4b22      	ldr	r3, [pc, #136]	; (8004c48 <SetSysClock+0x11c>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a21      	ldr	r2, [pc, #132]	; (8004c48 <SetSysClock+0x11c>)
 8004bc4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bc8:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8004bca:	bf00      	nop
 8004bcc:	4b1e      	ldr	r3, [pc, #120]	; (8004c48 <SetSysClock+0x11c>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d0f9      	beq.n	8004bcc <SetSysClock+0xa0>
    {
    }
   
#if defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx)
    /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
    PWR->CR |= PWR_CR_ODEN;
 8004bd8:	4b1c      	ldr	r3, [pc, #112]	; (8004c4c <SetSysClock+0x120>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a1b      	ldr	r2, [pc, #108]	; (8004c4c <SetSysClock+0x120>)
 8004bde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004be2:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODRDY) == 0)
 8004be4:	bf00      	nop
 8004be6:	4b19      	ldr	r3, [pc, #100]	; (8004c4c <SetSysClock+0x120>)
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d0f9      	beq.n	8004be6 <SetSysClock+0xba>
    {
    }
    PWR->CR |= PWR_CR_ODSWEN;
 8004bf2:	4b16      	ldr	r3, [pc, #88]	; (8004c4c <SetSysClock+0x120>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a15      	ldr	r2, [pc, #84]	; (8004c4c <SetSysClock+0x120>)
 8004bf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bfc:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODSWRDY) == 0)
 8004bfe:	bf00      	nop
 8004c00:	4b12      	ldr	r3, [pc, #72]	; (8004c4c <SetSysClock+0x120>)
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d0f9      	beq.n	8004c00 <SetSysClock+0xd4>
    {
    }      
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8004c0c:	4b11      	ldr	r3, [pc, #68]	; (8004c54 <SetSysClock+0x128>)
 8004c0e:	f240 7205 	movw	r2, #1797	; 0x705
 8004c12:	601a      	str	r2, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8004c14:	4b0c      	ldr	r3, [pc, #48]	; (8004c48 <SetSysClock+0x11c>)
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	4a0b      	ldr	r2, [pc, #44]	; (8004c48 <SetSysClock+0x11c>)
 8004c1a:	f023 0303 	bic.w	r3, r3, #3
 8004c1e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8004c20:	4b09      	ldr	r3, [pc, #36]	; (8004c48 <SetSysClock+0x11c>)
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	4a08      	ldr	r2, [pc, #32]	; (8004c48 <SetSysClock+0x11c>)
 8004c26:	f043 0302 	orr.w	r3, r3, #2
 8004c2a:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8004c2c:	bf00      	nop
 8004c2e:	4b06      	ldr	r3, [pc, #24]	; (8004c48 <SetSysClock+0x11c>)
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f003 030c 	and.w	r3, r3, #12
 8004c36:	2b08      	cmp	r3, #8
 8004c38:	d1f9      	bne.n	8004c2e <SetSysClock+0x102>
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
  {
  }
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F469_479xx */  
}
 8004c3a:	bf00      	nop
 8004c3c:	370c      	adds	r7, #12
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr
 8004c46:	bf00      	nop
 8004c48:	40023800 	.word	0x40023800
 8004c4c:	40007000 	.word	0x40007000
 8004c50:	77405a08 	.word	0x77405a08
 8004c54:	40023c00 	.word	0x40023c00

08004c58 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004c58:	480d      	ldr	r0, [pc, #52]	; (8004c90 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004c5a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004c5c:	480d      	ldr	r0, [pc, #52]	; (8004c94 <LoopForever+0x6>)
  ldr r1, =_edata
 8004c5e:	490e      	ldr	r1, [pc, #56]	; (8004c98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004c60:	4a0e      	ldr	r2, [pc, #56]	; (8004c9c <LoopForever+0xe>)
  movs r3, #0
 8004c62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004c64:	e002      	b.n	8004c6c <LoopCopyDataInit>

08004c66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004c66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004c68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004c6a:	3304      	adds	r3, #4

08004c6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004c6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004c6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004c70:	d3f9      	bcc.n	8004c66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004c72:	4a0b      	ldr	r2, [pc, #44]	; (8004ca0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004c74:	4c0b      	ldr	r4, [pc, #44]	; (8004ca4 <LoopForever+0x16>)
  movs r3, #0
 8004c76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004c78:	e001      	b.n	8004c7e <LoopFillZerobss>

08004c7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004c7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004c7c:	3204      	adds	r2, #4

08004c7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004c7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004c80:	d3fb      	bcc.n	8004c7a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004c82:	f7ff fe4f 	bl	8004924 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8004c86:	f000 f811 	bl	8004cac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004c8a:	f7ff fadb 	bl	8004244 <main>

08004c8e <LoopForever>:

LoopForever:
    b LoopForever
 8004c8e:	e7fe      	b.n	8004c8e <LoopForever>
  ldr   r0, =_estack
 8004c90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004c94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004c98:	20000ac4 	.word	0x20000ac4
  ldr r2, =_sidata
 8004c9c:	08008514 	.word	0x08008514
  ldr r2, =_sbss
 8004ca0:	20000ac4 	.word	0x20000ac4
  ldr r4, =_ebss
 8004ca4:	200139f8 	.word	0x200139f8

08004ca8 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004ca8:	e7fe      	b.n	8004ca8 <ADC_IRQHandler>
	...

08004cac <__libc_init_array>:
 8004cac:	b570      	push	{r4, r5, r6, lr}
 8004cae:	4e0d      	ldr	r6, [pc, #52]	; (8004ce4 <__libc_init_array+0x38>)
 8004cb0:	4c0d      	ldr	r4, [pc, #52]	; (8004ce8 <__libc_init_array+0x3c>)
 8004cb2:	1ba4      	subs	r4, r4, r6
 8004cb4:	10a4      	asrs	r4, r4, #2
 8004cb6:	2500      	movs	r5, #0
 8004cb8:	42a5      	cmp	r5, r4
 8004cba:	d109      	bne.n	8004cd0 <__libc_init_array+0x24>
 8004cbc:	4e0b      	ldr	r6, [pc, #44]	; (8004cec <__libc_init_array+0x40>)
 8004cbe:	4c0c      	ldr	r4, [pc, #48]	; (8004cf0 <__libc_init_array+0x44>)
 8004cc0:	f003 fa48 	bl	8008154 <_init>
 8004cc4:	1ba4      	subs	r4, r4, r6
 8004cc6:	10a4      	asrs	r4, r4, #2
 8004cc8:	2500      	movs	r5, #0
 8004cca:	42a5      	cmp	r5, r4
 8004ccc:	d105      	bne.n	8004cda <__libc_init_array+0x2e>
 8004cce:	bd70      	pop	{r4, r5, r6, pc}
 8004cd0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004cd4:	4798      	blx	r3
 8004cd6:	3501      	adds	r5, #1
 8004cd8:	e7ee      	b.n	8004cb8 <__libc_init_array+0xc>
 8004cda:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004cde:	4798      	blx	r3
 8004ce0:	3501      	adds	r5, #1
 8004ce2:	e7f2      	b.n	8004cca <__libc_init_array+0x1e>
 8004ce4:	08008508 	.word	0x08008508
 8004ce8:	08008508 	.word	0x08008508
 8004cec:	08008508 	.word	0x08008508
 8004cf0:	08008510 	.word	0x08008510

08004cf4 <memcpy>:
 8004cf4:	b510      	push	{r4, lr}
 8004cf6:	1e43      	subs	r3, r0, #1
 8004cf8:	440a      	add	r2, r1
 8004cfa:	4291      	cmp	r1, r2
 8004cfc:	d100      	bne.n	8004d00 <memcpy+0xc>
 8004cfe:	bd10      	pop	{r4, pc}
 8004d00:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d08:	e7f7      	b.n	8004cfa <memcpy+0x6>

08004d0a <memset>:
 8004d0a:	4402      	add	r2, r0
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d100      	bne.n	8004d14 <memset+0xa>
 8004d12:	4770      	bx	lr
 8004d14:	f803 1b01 	strb.w	r1, [r3], #1
 8004d18:	e7f9      	b.n	8004d0e <memset+0x4>
	...

08004d1c <sprintf>:
 8004d1c:	b40e      	push	{r1, r2, r3}
 8004d1e:	b500      	push	{lr}
 8004d20:	b09c      	sub	sp, #112	; 0x70
 8004d22:	ab1d      	add	r3, sp, #116	; 0x74
 8004d24:	9002      	str	r0, [sp, #8]
 8004d26:	9006      	str	r0, [sp, #24]
 8004d28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004d2c:	4809      	ldr	r0, [pc, #36]	; (8004d54 <sprintf+0x38>)
 8004d2e:	9107      	str	r1, [sp, #28]
 8004d30:	9104      	str	r1, [sp, #16]
 8004d32:	4909      	ldr	r1, [pc, #36]	; (8004d58 <sprintf+0x3c>)
 8004d34:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d38:	9105      	str	r1, [sp, #20]
 8004d3a:	6800      	ldr	r0, [r0, #0]
 8004d3c:	9301      	str	r3, [sp, #4]
 8004d3e:	a902      	add	r1, sp, #8
 8004d40:	f000 f80e 	bl	8004d60 <_svfprintf_r>
 8004d44:	9b02      	ldr	r3, [sp, #8]
 8004d46:	2200      	movs	r2, #0
 8004d48:	701a      	strb	r2, [r3, #0]
 8004d4a:	b01c      	add	sp, #112	; 0x70
 8004d4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d50:	b003      	add	sp, #12
 8004d52:	4770      	bx	lr
 8004d54:	20000110 	.word	0x20000110
 8004d58:	ffff0208 	.word	0xffff0208
 8004d5c:	00000000 	.word	0x00000000

08004d60 <_svfprintf_r>:
 8004d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d64:	b0d3      	sub	sp, #332	; 0x14c
 8004d66:	4688      	mov	r8, r1
 8004d68:	4693      	mov	fp, r2
 8004d6a:	461e      	mov	r6, r3
 8004d6c:	9003      	str	r0, [sp, #12]
 8004d6e:	f002 f97f 	bl	8007070 <_localeconv_r>
 8004d72:	6803      	ldr	r3, [r0, #0]
 8004d74:	9316      	str	r3, [sp, #88]	; 0x58
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7fb fa3a 	bl	80001f0 <strlen>
 8004d7c:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8004d80:	900d      	str	r0, [sp, #52]	; 0x34
 8004d82:	0618      	lsls	r0, r3, #24
 8004d84:	d518      	bpl.n	8004db8 <_svfprintf_r+0x58>
 8004d86:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8004d8a:	b9ab      	cbnz	r3, 8004db8 <_svfprintf_r+0x58>
 8004d8c:	2140      	movs	r1, #64	; 0x40
 8004d8e:	9803      	ldr	r0, [sp, #12]
 8004d90:	f002 f97e 	bl	8007090 <_malloc_r>
 8004d94:	f8c8 0000 	str.w	r0, [r8]
 8004d98:	f8c8 0010 	str.w	r0, [r8, #16]
 8004d9c:	b948      	cbnz	r0, 8004db2 <_svfprintf_r+0x52>
 8004d9e:	9a03      	ldr	r2, [sp, #12]
 8004da0:	230c      	movs	r3, #12
 8004da2:	6013      	str	r3, [r2, #0]
 8004da4:	f04f 33ff 	mov.w	r3, #4294967295
 8004da8:	930e      	str	r3, [sp, #56]	; 0x38
 8004daa:	980e      	ldr	r0, [sp, #56]	; 0x38
 8004dac:	b053      	add	sp, #332	; 0x14c
 8004dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004db2:	2340      	movs	r3, #64	; 0x40
 8004db4:	f8c8 3014 	str.w	r3, [r8, #20]
 8004db8:	ed9f 7bc9 	vldr	d7, [pc, #804]	; 80050e0 <_svfprintf_r+0x380>
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	e9cd 3327 	strd	r3, r3, [sp, #156]	; 0x9c
 8004dc2:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8004dc6:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
 8004dca:	ac29      	add	r4, sp, #164	; 0xa4
 8004dcc:	9426      	str	r4, [sp, #152]	; 0x98
 8004dce:	9304      	str	r3, [sp, #16]
 8004dd0:	9309      	str	r3, [sp, #36]	; 0x24
 8004dd2:	9312      	str	r3, [sp, #72]	; 0x48
 8004dd4:	9319      	str	r3, [sp, #100]	; 0x64
 8004dd6:	930e      	str	r3, [sp, #56]	; 0x38
 8004dd8:	465d      	mov	r5, fp
 8004dda:	462b      	mov	r3, r5
 8004ddc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004de0:	b112      	cbz	r2, 8004de8 <_svfprintf_r+0x88>
 8004de2:	2a25      	cmp	r2, #37	; 0x25
 8004de4:	f040 80e4 	bne.w	8004fb0 <_svfprintf_r+0x250>
 8004de8:	ebb5 070b 	subs.w	r7, r5, fp
 8004dec:	d00e      	beq.n	8004e0c <_svfprintf_r+0xac>
 8004dee:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004df0:	443b      	add	r3, r7
 8004df2:	9328      	str	r3, [sp, #160]	; 0xa0
 8004df4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8004df6:	3301      	adds	r3, #1
 8004df8:	2b07      	cmp	r3, #7
 8004dfa:	e9c4 b700 	strd	fp, r7, [r4]
 8004dfe:	9327      	str	r3, [sp, #156]	; 0x9c
 8004e00:	f300 80d8 	bgt.w	8004fb4 <_svfprintf_r+0x254>
 8004e04:	3408      	adds	r4, #8
 8004e06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e08:	443b      	add	r3, r7
 8004e0a:	930e      	str	r3, [sp, #56]	; 0x38
 8004e0c:	782b      	ldrb	r3, [r5, #0]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	f001 81b4 	beq.w	800617c <_svfprintf_r+0x141c>
 8004e14:	1c6b      	adds	r3, r5, #1
 8004e16:	930c      	str	r3, [sp, #48]	; 0x30
 8004e18:	2300      	movs	r3, #0
 8004e1a:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8004e1e:	f04f 35ff 	mov.w	r5, #4294967295
 8004e22:	930f      	str	r3, [sp, #60]	; 0x3c
 8004e24:	469a      	mov	sl, r3
 8004e26:	270a      	movs	r7, #10
 8004e28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	9306      	str	r3, [sp, #24]
 8004e2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004e30:	3301      	adds	r3, #1
 8004e32:	930c      	str	r3, [sp, #48]	; 0x30
 8004e34:	9b06      	ldr	r3, [sp, #24]
 8004e36:	3b20      	subs	r3, #32
 8004e38:	2b5a      	cmp	r3, #90	; 0x5a
 8004e3a:	f200 8624 	bhi.w	8005a86 <_svfprintf_r+0xd26>
 8004e3e:	a201      	add	r2, pc, #4	; (adr r2, 8004e44 <_svfprintf_r+0xe4>)
 8004e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e44:	08005047 	.word	0x08005047
 8004e48:	08005a87 	.word	0x08005a87
 8004e4c:	08005a87 	.word	0x08005a87
 8004e50:	08005059 	.word	0x08005059
 8004e54:	08005a87 	.word	0x08005a87
 8004e58:	08005a87 	.word	0x08005a87
 8004e5c:	08005a87 	.word	0x08005a87
 8004e60:	0800500d 	.word	0x0800500d
 8004e64:	08005a87 	.word	0x08005a87
 8004e68:	08005a87 	.word	0x08005a87
 8004e6c:	0800505f 	.word	0x0800505f
 8004e70:	08005077 	.word	0x08005077
 8004e74:	08005a87 	.word	0x08005a87
 8004e78:	08005071 	.word	0x08005071
 8004e7c:	0800507b 	.word	0x0800507b
 8004e80:	08005a87 	.word	0x08005a87
 8004e84:	080050af 	.word	0x080050af
 8004e88:	080050b5 	.word	0x080050b5
 8004e8c:	080050b5 	.word	0x080050b5
 8004e90:	080050b5 	.word	0x080050b5
 8004e94:	080050b5 	.word	0x080050b5
 8004e98:	080050b5 	.word	0x080050b5
 8004e9c:	080050b5 	.word	0x080050b5
 8004ea0:	080050b5 	.word	0x080050b5
 8004ea4:	080050b5 	.word	0x080050b5
 8004ea8:	080050b5 	.word	0x080050b5
 8004eac:	08005a87 	.word	0x08005a87
 8004eb0:	08005a87 	.word	0x08005a87
 8004eb4:	08005a87 	.word	0x08005a87
 8004eb8:	08005a87 	.word	0x08005a87
 8004ebc:	08005a87 	.word	0x08005a87
 8004ec0:	08005a87 	.word	0x08005a87
 8004ec4:	08005a87 	.word	0x08005a87
 8004ec8:	080051b7 	.word	0x080051b7
 8004ecc:	08005a87 	.word	0x08005a87
 8004ed0:	08005121 	.word	0x08005121
 8004ed4:	08005143 	.word	0x08005143
 8004ed8:	080051b7 	.word	0x080051b7
 8004edc:	080051b7 	.word	0x080051b7
 8004ee0:	080051b7 	.word	0x080051b7
 8004ee4:	08005a87 	.word	0x08005a87
 8004ee8:	08005a87 	.word	0x08005a87
 8004eec:	08005a87 	.word	0x08005a87
 8004ef0:	08005a87 	.word	0x08005a87
 8004ef4:	080050d5 	.word	0x080050d5
 8004ef8:	08005a87 	.word	0x08005a87
 8004efc:	08005a87 	.word	0x08005a87
 8004f00:	08005689 	.word	0x08005689
 8004f04:	08005a87 	.word	0x08005a87
 8004f08:	08005a87 	.word	0x08005a87
 8004f0c:	08005a87 	.word	0x08005a87
 8004f10:	08005715 	.word	0x08005715
 8004f14:	08005a87 	.word	0x08005a87
 8004f18:	080058f7 	.word	0x080058f7
 8004f1c:	08005a87 	.word	0x08005a87
 8004f20:	08005a87 	.word	0x08005a87
 8004f24:	08004fcd 	.word	0x08004fcd
 8004f28:	08005a87 	.word	0x08005a87
 8004f2c:	08005a87 	.word	0x08005a87
 8004f30:	08005a87 	.word	0x08005a87
 8004f34:	08005a87 	.word	0x08005a87
 8004f38:	08005a87 	.word	0x08005a87
 8004f3c:	08005a87 	.word	0x08005a87
 8004f40:	08005a87 	.word	0x08005a87
 8004f44:	08005a87 	.word	0x08005a87
 8004f48:	080051b7 	.word	0x080051b7
 8004f4c:	08005a87 	.word	0x08005a87
 8004f50:	08005121 	.word	0x08005121
 8004f54:	08005147 	.word	0x08005147
 8004f58:	080051b7 	.word	0x080051b7
 8004f5c:	080051b7 	.word	0x080051b7
 8004f60:	080051b7 	.word	0x080051b7
 8004f64:	080050ed 	.word	0x080050ed
 8004f68:	08005147 	.word	0x08005147
 8004f6c:	08005115 	.word	0x08005115
 8004f70:	08005a87 	.word	0x08005a87
 8004f74:	08005107 	.word	0x08005107
 8004f78:	08005a87 	.word	0x08005a87
 8004f7c:	08005643 	.word	0x08005643
 8004f80:	0800568d 	.word	0x0800568d
 8004f84:	080056f5 	.word	0x080056f5
 8004f88:	08005115 	.word	0x08005115
 8004f8c:	08005a87 	.word	0x08005a87
 8004f90:	08005715 	.word	0x08005715
 8004f94:	08004e29 	.word	0x08004e29
 8004f98:	080058fb 	.word	0x080058fb
 8004f9c:	08005a87 	.word	0x08005a87
 8004fa0:	08005a87 	.word	0x08005a87
 8004fa4:	08005939 	.word	0x08005939
 8004fa8:	08005a87 	.word	0x08005a87
 8004fac:	08004e29 	.word	0x08004e29
 8004fb0:	461d      	mov	r5, r3
 8004fb2:	e712      	b.n	8004dda <_svfprintf_r+0x7a>
 8004fb4:	aa26      	add	r2, sp, #152	; 0x98
 8004fb6:	4641      	mov	r1, r8
 8004fb8:	9803      	ldr	r0, [sp, #12]
 8004fba:	f002 fdb6 	bl	8007b2a <__ssprint_r>
 8004fbe:	2800      	cmp	r0, #0
 8004fc0:	f040 8166 	bne.w	8005290 <_svfprintf_r+0x530>
 8004fc4:	ac29      	add	r4, sp, #164	; 0xa4
 8004fc6:	e71e      	b.n	8004e06 <_svfprintf_r+0xa6>
 8004fc8:	461e      	mov	r6, r3
 8004fca:	e72d      	b.n	8004e28 <_svfprintf_r+0xc8>
 8004fcc:	4b46      	ldr	r3, [pc, #280]	; (80050e8 <_svfprintf_r+0x388>)
 8004fce:	9318      	str	r3, [sp, #96]	; 0x60
 8004fd0:	f01a 0f20 	tst.w	sl, #32
 8004fd4:	f000 84b3 	beq.w	800593e <_svfprintf_r+0xbde>
 8004fd8:	3607      	adds	r6, #7
 8004fda:	f026 0607 	bic.w	r6, r6, #7
 8004fde:	f106 0308 	add.w	r3, r6, #8
 8004fe2:	e9d6 6700 	ldrd	r6, r7, [r6]
 8004fe6:	9308      	str	r3, [sp, #32]
 8004fe8:	f01a 0f01 	tst.w	sl, #1
 8004fec:	d00a      	beq.n	8005004 <_svfprintf_r+0x2a4>
 8004fee:	ea56 0307 	orrs.w	r3, r6, r7
 8004ff2:	d007      	beq.n	8005004 <_svfprintf_r+0x2a4>
 8004ff4:	2330      	movs	r3, #48	; 0x30
 8004ff6:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8004ffa:	9b06      	ldr	r3, [sp, #24]
 8004ffc:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 8005000:	f04a 0a02 	orr.w	sl, sl, #2
 8005004:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8005008:	2302      	movs	r3, #2
 800500a:	e34d      	b.n	80056a8 <_svfprintf_r+0x948>
 800500c:	9803      	ldr	r0, [sp, #12]
 800500e:	f002 f82f 	bl	8007070 <_localeconv_r>
 8005012:	6843      	ldr	r3, [r0, #4]
 8005014:	9319      	str	r3, [sp, #100]	; 0x64
 8005016:	4618      	mov	r0, r3
 8005018:	f7fb f8ea 	bl	80001f0 <strlen>
 800501c:	9012      	str	r0, [sp, #72]	; 0x48
 800501e:	9803      	ldr	r0, [sp, #12]
 8005020:	f002 f826 	bl	8007070 <_localeconv_r>
 8005024:	6883      	ldr	r3, [r0, #8]
 8005026:	9309      	str	r3, [sp, #36]	; 0x24
 8005028:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800502a:	2b00      	cmp	r3, #0
 800502c:	f43f aefc 	beq.w	8004e28 <_svfprintf_r+0xc8>
 8005030:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005032:	2b00      	cmp	r3, #0
 8005034:	f43f aef8 	beq.w	8004e28 <_svfprintf_r+0xc8>
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	2b00      	cmp	r3, #0
 800503c:	f43f aef4 	beq.w	8004e28 <_svfprintf_r+0xc8>
 8005040:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 8005044:	e6f0      	b.n	8004e28 <_svfprintf_r+0xc8>
 8005046:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 800504a:	2b00      	cmp	r3, #0
 800504c:	f47f aeec 	bne.w	8004e28 <_svfprintf_r+0xc8>
 8005050:	2320      	movs	r3, #32
 8005052:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8005056:	e6e7      	b.n	8004e28 <_svfprintf_r+0xc8>
 8005058:	f04a 0a01 	orr.w	sl, sl, #1
 800505c:	e6e4      	b.n	8004e28 <_svfprintf_r+0xc8>
 800505e:	6832      	ldr	r2, [r6, #0]
 8005060:	920f      	str	r2, [sp, #60]	; 0x3c
 8005062:	2a00      	cmp	r2, #0
 8005064:	f106 0304 	add.w	r3, r6, #4
 8005068:	daae      	bge.n	8004fc8 <_svfprintf_r+0x268>
 800506a:	4252      	negs	r2, r2
 800506c:	920f      	str	r2, [sp, #60]	; 0x3c
 800506e:	461e      	mov	r6, r3
 8005070:	f04a 0a04 	orr.w	sl, sl, #4
 8005074:	e6d8      	b.n	8004e28 <_svfprintf_r+0xc8>
 8005076:	232b      	movs	r3, #43	; 0x2b
 8005078:	e7eb      	b.n	8005052 <_svfprintf_r+0x2f2>
 800507a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800507c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800507e:	7812      	ldrb	r2, [r2, #0]
 8005080:	9206      	str	r2, [sp, #24]
 8005082:	2a2a      	cmp	r2, #42	; 0x2a
 8005084:	f103 0301 	add.w	r3, r3, #1
 8005088:	d10f      	bne.n	80050aa <_svfprintf_r+0x34a>
 800508a:	6835      	ldr	r5, [r6, #0]
 800508c:	930c      	str	r3, [sp, #48]	; 0x30
 800508e:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 8005092:	3604      	adds	r6, #4
 8005094:	e6c8      	b.n	8004e28 <_svfprintf_r+0xc8>
 8005096:	fb07 2505 	mla	r5, r7, r5, r2
 800509a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800509e:	9206      	str	r2, [sp, #24]
 80050a0:	9a06      	ldr	r2, [sp, #24]
 80050a2:	3a30      	subs	r2, #48	; 0x30
 80050a4:	2a09      	cmp	r2, #9
 80050a6:	d9f6      	bls.n	8005096 <_svfprintf_r+0x336>
 80050a8:	e6c3      	b.n	8004e32 <_svfprintf_r+0xd2>
 80050aa:	2500      	movs	r5, #0
 80050ac:	e7f8      	b.n	80050a0 <_svfprintf_r+0x340>
 80050ae:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 80050b2:	e6b9      	b.n	8004e28 <_svfprintf_r+0xc8>
 80050b4:	2200      	movs	r2, #0
 80050b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80050b8:	920f      	str	r2, [sp, #60]	; 0x3c
 80050ba:	9a06      	ldr	r2, [sp, #24]
 80050bc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80050be:	3a30      	subs	r2, #48	; 0x30
 80050c0:	fb07 2201 	mla	r2, r7, r1, r2
 80050c4:	920f      	str	r2, [sp, #60]	; 0x3c
 80050c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80050ca:	9206      	str	r2, [sp, #24]
 80050cc:	3a30      	subs	r2, #48	; 0x30
 80050ce:	2a09      	cmp	r2, #9
 80050d0:	d9f3      	bls.n	80050ba <_svfprintf_r+0x35a>
 80050d2:	e6ae      	b.n	8004e32 <_svfprintf_r+0xd2>
 80050d4:	f04a 0a08 	orr.w	sl, sl, #8
 80050d8:	e6a6      	b.n	8004e28 <_svfprintf_r+0xc8>
 80050da:	bf00      	nop
 80050dc:	f3af 8000 	nop.w
	...
 80050e8:	080082b1 	.word	0x080082b1
 80050ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	2b68      	cmp	r3, #104	; 0x68
 80050f2:	bf01      	itttt	eq
 80050f4:	9b0c      	ldreq	r3, [sp, #48]	; 0x30
 80050f6:	3301      	addeq	r3, #1
 80050f8:	930c      	streq	r3, [sp, #48]	; 0x30
 80050fa:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 80050fe:	bf18      	it	ne
 8005100:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 8005104:	e690      	b.n	8004e28 <_svfprintf_r+0xc8>
 8005106:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	2b6c      	cmp	r3, #108	; 0x6c
 800510c:	d105      	bne.n	800511a <_svfprintf_r+0x3ba>
 800510e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005110:	3301      	adds	r3, #1
 8005112:	930c      	str	r3, [sp, #48]	; 0x30
 8005114:	f04a 0a20 	orr.w	sl, sl, #32
 8005118:	e686      	b.n	8004e28 <_svfprintf_r+0xc8>
 800511a:	f04a 0a10 	orr.w	sl, sl, #16
 800511e:	e683      	b.n	8004e28 <_svfprintf_r+0xc8>
 8005120:	1d33      	adds	r3, r6, #4
 8005122:	9308      	str	r3, [sp, #32]
 8005124:	2000      	movs	r0, #0
 8005126:	6833      	ldr	r3, [r6, #0]
 8005128:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 800512c:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 8005130:	4681      	mov	r9, r0
 8005132:	2501      	movs	r5, #1
 8005134:	9010      	str	r0, [sp, #64]	; 0x40
 8005136:	4607      	mov	r7, r0
 8005138:	9007      	str	r0, [sp, #28]
 800513a:	4606      	mov	r6, r0
 800513c:	f10d 0be4 	add.w	fp, sp, #228	; 0xe4
 8005140:	e301      	b.n	8005746 <_svfprintf_r+0x9e6>
 8005142:	f04a 0a10 	orr.w	sl, sl, #16
 8005146:	f01a 0f20 	tst.w	sl, #32
 800514a:	d021      	beq.n	8005190 <_svfprintf_r+0x430>
 800514c:	3607      	adds	r6, #7
 800514e:	f026 0607 	bic.w	r6, r6, #7
 8005152:	f106 0308 	add.w	r3, r6, #8
 8005156:	e9d6 6700 	ldrd	r6, r7, [r6]
 800515a:	9308      	str	r3, [sp, #32]
 800515c:	2e00      	cmp	r6, #0
 800515e:	f177 0300 	sbcs.w	r3, r7, #0
 8005162:	da06      	bge.n	8005172 <_svfprintf_r+0x412>
 8005164:	4276      	negs	r6, r6
 8005166:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800516a:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800516e:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8005172:	1c6b      	adds	r3, r5, #1
 8005174:	f040 83f6 	bne.w	8005964 <_svfprintf_r+0xc04>
 8005178:	2f00      	cmp	r7, #0
 800517a:	bf08      	it	eq
 800517c:	2e0a      	cmpeq	r6, #10
 800517e:	f080 8427 	bcs.w	80059d0 <_svfprintf_r+0xc70>
 8005182:	f50d 7ba4 	add.w	fp, sp, #328	; 0x148
 8005186:	3630      	adds	r6, #48	; 0x30
 8005188:	f80b 6d01 	strb.w	r6, [fp, #-1]!
 800518c:	f000 bc0d 	b.w	80059aa <_svfprintf_r+0xc4a>
 8005190:	1d33      	adds	r3, r6, #4
 8005192:	f01a 0f10 	tst.w	sl, #16
 8005196:	9308      	str	r3, [sp, #32]
 8005198:	d002      	beq.n	80051a0 <_svfprintf_r+0x440>
 800519a:	6836      	ldr	r6, [r6, #0]
 800519c:	17f7      	asrs	r7, r6, #31
 800519e:	e7dd      	b.n	800515c <_svfprintf_r+0x3fc>
 80051a0:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80051a4:	6836      	ldr	r6, [r6, #0]
 80051a6:	d001      	beq.n	80051ac <_svfprintf_r+0x44c>
 80051a8:	b236      	sxth	r6, r6
 80051aa:	e7f7      	b.n	800519c <_svfprintf_r+0x43c>
 80051ac:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80051b0:	bf18      	it	ne
 80051b2:	b276      	sxtbne	r6, r6
 80051b4:	e7f2      	b.n	800519c <_svfprintf_r+0x43c>
 80051b6:	3607      	adds	r6, #7
 80051b8:	f026 0607 	bic.w	r6, r6, #7
 80051bc:	ed96 7b00 	vldr	d7, [r6]
 80051c0:	f106 0308 	add.w	r3, r6, #8
 80051c4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80051c8:	9308      	str	r3, [sp, #32]
 80051ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051cc:	931a      	str	r3, [sp, #104]	; 0x68
 80051ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80051d4:	931b      	str	r3, [sp, #108]	; 0x6c
 80051d6:	f04f 32ff 	mov.w	r2, #4294967295
 80051da:	4bb2      	ldr	r3, [pc, #712]	; (80054a4 <_svfprintf_r+0x744>)
 80051dc:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 80051e0:	f7fb fcb4 	bl	8000b4c <__aeabi_dcmpun>
 80051e4:	bb00      	cbnz	r0, 8005228 <_svfprintf_r+0x4c8>
 80051e6:	f04f 32ff 	mov.w	r2, #4294967295
 80051ea:	4bae      	ldr	r3, [pc, #696]	; (80054a4 <_svfprintf_r+0x744>)
 80051ec:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 80051f0:	f7fb fc8e 	bl	8000b10 <__aeabi_dcmple>
 80051f4:	b9c0      	cbnz	r0, 8005228 <_svfprintf_r+0x4c8>
 80051f6:	2200      	movs	r2, #0
 80051f8:	2300      	movs	r3, #0
 80051fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80051fe:	f7fb fc7d 	bl	8000afc <__aeabi_dcmplt>
 8005202:	b110      	cbz	r0, 800520a <_svfprintf_r+0x4aa>
 8005204:	232d      	movs	r3, #45	; 0x2d
 8005206:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 800520a:	4aa7      	ldr	r2, [pc, #668]	; (80054a8 <_svfprintf_r+0x748>)
 800520c:	4ba7      	ldr	r3, [pc, #668]	; (80054ac <_svfprintf_r+0x74c>)
 800520e:	9906      	ldr	r1, [sp, #24]
 8005210:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 8005214:	2947      	cmp	r1, #71	; 0x47
 8005216:	bfcc      	ite	gt
 8005218:	4693      	movgt	fp, r2
 800521a:	469b      	movle	fp, r3
 800521c:	f04f 0900 	mov.w	r9, #0
 8005220:	2503      	movs	r5, #3
 8005222:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 8005226:	e3c6      	b.n	80059b6 <_svfprintf_r+0xc56>
 8005228:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800522c:	4610      	mov	r0, r2
 800522e:	4619      	mov	r1, r3
 8005230:	f7fb fc8c 	bl	8000b4c <__aeabi_dcmpun>
 8005234:	4681      	mov	r9, r0
 8005236:	b140      	cbz	r0, 800524a <_svfprintf_r+0x4ea>
 8005238:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800523a:	4a9d      	ldr	r2, [pc, #628]	; (80054b0 <_svfprintf_r+0x750>)
 800523c:	2b00      	cmp	r3, #0
 800523e:	bfbc      	itt	lt
 8005240:	232d      	movlt	r3, #45	; 0x2d
 8005242:	f88d 307b 	strblt.w	r3, [sp, #123]	; 0x7b
 8005246:	4b9b      	ldr	r3, [pc, #620]	; (80054b4 <_svfprintf_r+0x754>)
 8005248:	e7e1      	b.n	800520e <_svfprintf_r+0x4ae>
 800524a:	9b06      	ldr	r3, [sp, #24]
 800524c:	f023 0320 	bic.w	r3, r3, #32
 8005250:	2b41      	cmp	r3, #65	; 0x41
 8005252:	9307      	str	r3, [sp, #28]
 8005254:	d125      	bne.n	80052a2 <_svfprintf_r+0x542>
 8005256:	2330      	movs	r3, #48	; 0x30
 8005258:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 800525c:	9b06      	ldr	r3, [sp, #24]
 800525e:	2b61      	cmp	r3, #97	; 0x61
 8005260:	bf14      	ite	ne
 8005262:	2358      	movne	r3, #88	; 0x58
 8005264:	2378      	moveq	r3, #120	; 0x78
 8005266:	2d63      	cmp	r5, #99	; 0x63
 8005268:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 800526c:	f04a 0a02 	orr.w	sl, sl, #2
 8005270:	f340 8108 	ble.w	8005484 <_svfprintf_r+0x724>
 8005274:	1c69      	adds	r1, r5, #1
 8005276:	9803      	ldr	r0, [sp, #12]
 8005278:	f001 ff0a 	bl	8007090 <_malloc_r>
 800527c:	4683      	mov	fp, r0
 800527e:	2800      	cmp	r0, #0
 8005280:	f040 8103 	bne.w	800548a <_svfprintf_r+0x72a>
 8005284:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8005288:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800528c:	f8a8 300c 	strh.w	r3, [r8, #12]
 8005290:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8005294:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005298:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800529a:	bf18      	it	ne
 800529c:	f04f 33ff 	movne.w	r3, #4294967295
 80052a0:	e582      	b.n	8004da8 <_svfprintf_r+0x48>
 80052a2:	1c69      	adds	r1, r5, #1
 80052a4:	f000 80f3 	beq.w	800548e <_svfprintf_r+0x72e>
 80052a8:	9b07      	ldr	r3, [sp, #28]
 80052aa:	2b47      	cmp	r3, #71	; 0x47
 80052ac:	d102      	bne.n	80052b4 <_svfprintf_r+0x554>
 80052ae:	2d00      	cmp	r5, #0
 80052b0:	f000 80ef 	beq.w	8005492 <_svfprintf_r+0x732>
 80052b4:	f44a 7380 	orr.w	r3, sl, #256	; 0x100
 80052b8:	9310      	str	r3, [sp, #64]	; 0x40
 80052ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80052bc:	2b00      	cmp	r3, #0
 80052be:	f280 80eb 	bge.w	8005498 <_svfprintf_r+0x738>
 80052c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052c4:	9314      	str	r3, [sp, #80]	; 0x50
 80052c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80052c8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80052cc:	9315      	str	r3, [sp, #84]	; 0x54
 80052ce:	232d      	movs	r3, #45	; 0x2d
 80052d0:	9313      	str	r3, [sp, #76]	; 0x4c
 80052d2:	9b07      	ldr	r3, [sp, #28]
 80052d4:	2b41      	cmp	r3, #65	; 0x41
 80052d6:	f040 8105 	bne.w	80054e4 <_svfprintf_r+0x784>
 80052da:	a820      	add	r0, sp, #128	; 0x80
 80052dc:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 80052e0:	f002 fbc8 	bl	8007a74 <frexp>
 80052e4:	2200      	movs	r2, #0
 80052e6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80052ea:	ec51 0b10 	vmov	r0, r1, d0
 80052ee:	f7fb f993 	bl	8000618 <__aeabi_dmul>
 80052f2:	2200      	movs	r2, #0
 80052f4:	2300      	movs	r3, #0
 80052f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80052fa:	f7fb fbf5 	bl	8000ae8 <__aeabi_dcmpeq>
 80052fe:	b108      	cbz	r0, 8005304 <_svfprintf_r+0x5a4>
 8005300:	2301      	movs	r3, #1
 8005302:	9320      	str	r3, [sp, #128]	; 0x80
 8005304:	4f6c      	ldr	r7, [pc, #432]	; (80054b8 <_svfprintf_r+0x758>)
 8005306:	4b6d      	ldr	r3, [pc, #436]	; (80054bc <_svfprintf_r+0x75c>)
 8005308:	9a06      	ldr	r2, [sp, #24]
 800530a:	2a61      	cmp	r2, #97	; 0x61
 800530c:	bf08      	it	eq
 800530e:	461f      	moveq	r7, r3
 8005310:	9711      	str	r7, [sp, #68]	; 0x44
 8005312:	465e      	mov	r6, fp
 8005314:	1e6f      	subs	r7, r5, #1
 8005316:	2200      	movs	r2, #0
 8005318:	4b69      	ldr	r3, [pc, #420]	; (80054c0 <_svfprintf_r+0x760>)
 800531a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800531e:	f7fb f97b 	bl	8000618 <__aeabi_dmul>
 8005322:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005326:	f7fb fc27 	bl	8000b78 <__aeabi_d2iz>
 800532a:	901c      	str	r0, [sp, #112]	; 0x70
 800532c:	f7fb f90a 	bl	8000544 <__aeabi_i2d>
 8005330:	4602      	mov	r2, r0
 8005332:	460b      	mov	r3, r1
 8005334:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005338:	f7fa ffb6 	bl	80002a8 <__aeabi_dsub>
 800533c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800533e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005340:	971d      	str	r7, [sp, #116]	; 0x74
 8005342:	5c9b      	ldrb	r3, [r3, r2]
 8005344:	f806 3b01 	strb.w	r3, [r6], #1
 8005348:	1c7a      	adds	r2, r7, #1
 800534a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800534e:	d006      	beq.n	800535e <_svfprintf_r+0x5fe>
 8005350:	2200      	movs	r2, #0
 8005352:	2300      	movs	r3, #0
 8005354:	3f01      	subs	r7, #1
 8005356:	f7fb fbc7 	bl	8000ae8 <__aeabi_dcmpeq>
 800535a:	2800      	cmp	r0, #0
 800535c:	d0db      	beq.n	8005316 <_svfprintf_r+0x5b6>
 800535e:	2200      	movs	r2, #0
 8005360:	4b58      	ldr	r3, [pc, #352]	; (80054c4 <_svfprintf_r+0x764>)
 8005362:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005366:	f7fb fbe7 	bl	8000b38 <__aeabi_dcmpgt>
 800536a:	b960      	cbnz	r0, 8005386 <_svfprintf_r+0x626>
 800536c:	2200      	movs	r2, #0
 800536e:	4b55      	ldr	r3, [pc, #340]	; (80054c4 <_svfprintf_r+0x764>)
 8005370:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005374:	f7fb fbb8 	bl	8000ae8 <__aeabi_dcmpeq>
 8005378:	2800      	cmp	r0, #0
 800537a:	f000 80ae 	beq.w	80054da <_svfprintf_r+0x77a>
 800537e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8005380:	07db      	lsls	r3, r3, #31
 8005382:	f140 80aa 	bpl.w	80054da <_svfprintf_r+0x77a>
 8005386:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005388:	9624      	str	r6, [sp, #144]	; 0x90
 800538a:	7bd9      	ldrb	r1, [r3, #15]
 800538c:	2030      	movs	r0, #48	; 0x30
 800538e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005390:	1e53      	subs	r3, r2, #1
 8005392:	9324      	str	r3, [sp, #144]	; 0x90
 8005394:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8005398:	428b      	cmp	r3, r1
 800539a:	f000 8095 	beq.w	80054c8 <_svfprintf_r+0x768>
 800539e:	2b39      	cmp	r3, #57	; 0x39
 80053a0:	bf0b      	itete	eq
 80053a2:	9b11      	ldreq	r3, [sp, #68]	; 0x44
 80053a4:	3301      	addne	r3, #1
 80053a6:	7a9b      	ldrbeq	r3, [r3, #10]
 80053a8:	b2db      	uxtbne	r3, r3
 80053aa:	f802 3c01 	strb.w	r3, [r2, #-1]
 80053ae:	4633      	mov	r3, r6
 80053b0:	eba3 030b 	sub.w	r3, r3, fp
 80053b4:	9304      	str	r3, [sp, #16]
 80053b6:	9b07      	ldr	r3, [sp, #28]
 80053b8:	9e20      	ldr	r6, [sp, #128]	; 0x80
 80053ba:	2b47      	cmp	r3, #71	; 0x47
 80053bc:	f040 80d7 	bne.w	800556e <_svfprintf_r+0x80e>
 80053c0:	1cf7      	adds	r7, r6, #3
 80053c2:	db02      	blt.n	80053ca <_svfprintf_r+0x66a>
 80053c4:	42b5      	cmp	r5, r6
 80053c6:	f280 80fd 	bge.w	80055c4 <_svfprintf_r+0x864>
 80053ca:	9b06      	ldr	r3, [sp, #24]
 80053cc:	3b02      	subs	r3, #2
 80053ce:	9306      	str	r3, [sp, #24]
 80053d0:	9906      	ldr	r1, [sp, #24]
 80053d2:	f89d 2018 	ldrb.w	r2, [sp, #24]
 80053d6:	f021 0120 	bic.w	r1, r1, #32
 80053da:	2941      	cmp	r1, #65	; 0x41
 80053dc:	bf08      	it	eq
 80053de:	320f      	addeq	r2, #15
 80053e0:	f106 33ff 	add.w	r3, r6, #4294967295
 80053e4:	bf06      	itte	eq
 80053e6:	b2d2      	uxtbeq	r2, r2
 80053e8:	2101      	moveq	r1, #1
 80053ea:	2100      	movne	r1, #0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	9320      	str	r3, [sp, #128]	; 0x80
 80053f0:	bfb8      	it	lt
 80053f2:	f1c6 0301 	rsblt	r3, r6, #1
 80053f6:	f88d 2088 	strb.w	r2, [sp, #136]	; 0x88
 80053fa:	bfb4      	ite	lt
 80053fc:	222d      	movlt	r2, #45	; 0x2d
 80053fe:	222b      	movge	r2, #43	; 0x2b
 8005400:	2b09      	cmp	r3, #9
 8005402:	f88d 2089 	strb.w	r2, [sp, #137]	; 0x89
 8005406:	f340 80c9 	ble.w	800559c <_svfprintf_r+0x83c>
 800540a:	f10d 0297 	add.w	r2, sp, #151	; 0x97
 800540e:	250a      	movs	r5, #10
 8005410:	fb93 f0f5 	sdiv	r0, r3, r5
 8005414:	fb05 3310 	mls	r3, r5, r0, r3
 8005418:	3330      	adds	r3, #48	; 0x30
 800541a:	2809      	cmp	r0, #9
 800541c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005420:	f102 31ff 	add.w	r1, r2, #4294967295
 8005424:	4603      	mov	r3, r0
 8005426:	f300 80b2 	bgt.w	800558e <_svfprintf_r+0x82e>
 800542a:	3330      	adds	r3, #48	; 0x30
 800542c:	f801 3c01 	strb.w	r3, [r1, #-1]
 8005430:	3a02      	subs	r2, #2
 8005432:	f10d 038a 	add.w	r3, sp, #138	; 0x8a
 8005436:	f10d 0097 	add.w	r0, sp, #151	; 0x97
 800543a:	4282      	cmp	r2, r0
 800543c:	4619      	mov	r1, r3
 800543e:	f0c0 80a8 	bcc.w	8005592 <_svfprintf_r+0x832>
 8005442:	9a04      	ldr	r2, [sp, #16]
 8005444:	ab22      	add	r3, sp, #136	; 0x88
 8005446:	1acb      	subs	r3, r1, r3
 8005448:	2a01      	cmp	r2, #1
 800544a:	9317      	str	r3, [sp, #92]	; 0x5c
 800544c:	eb03 0502 	add.w	r5, r3, r2
 8005450:	dc02      	bgt.n	8005458 <_svfprintf_r+0x6f8>
 8005452:	f01a 0f01 	tst.w	sl, #1
 8005456:	d001      	beq.n	800545c <_svfprintf_r+0x6fc>
 8005458:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800545a:	441d      	add	r5, r3
 800545c:	f42a 6380 	bic.w	r3, sl, #1024	; 0x400
 8005460:	2700      	movs	r7, #0
 8005462:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005466:	9310      	str	r3, [sp, #64]	; 0x40
 8005468:	9707      	str	r7, [sp, #28]
 800546a:	463e      	mov	r6, r7
 800546c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800546e:	2b00      	cmp	r3, #0
 8005470:	f000 8315 	beq.w	8005a9e <_svfprintf_r+0xd3e>
 8005474:	232d      	movs	r3, #45	; 0x2d
 8005476:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 800547a:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 800547e:	2300      	movs	r3, #0
 8005480:	9310      	str	r3, [sp, #64]	; 0x40
 8005482:	e160      	b.n	8005746 <_svfprintf_r+0x9e6>
 8005484:	f10d 0be4 	add.w	fp, sp, #228	; 0xe4
 8005488:	e714      	b.n	80052b4 <_svfprintf_r+0x554>
 800548a:	4681      	mov	r9, r0
 800548c:	e712      	b.n	80052b4 <_svfprintf_r+0x554>
 800548e:	2506      	movs	r5, #6
 8005490:	e710      	b.n	80052b4 <_svfprintf_r+0x554>
 8005492:	46a9      	mov	r9, r5
 8005494:	2501      	movs	r5, #1
 8005496:	e70d      	b.n	80052b4 <_svfprintf_r+0x554>
 8005498:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 800549c:	2300      	movs	r3, #0
 800549e:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 80054a2:	e715      	b.n	80052d0 <_svfprintf_r+0x570>
 80054a4:	7fefffff 	.word	0x7fefffff
 80054a8:	08008294 	.word	0x08008294
 80054ac:	08008290 	.word	0x08008290
 80054b0:	0800829c 	.word	0x0800829c
 80054b4:	08008298 	.word	0x08008298
 80054b8:	080082b1 	.word	0x080082b1
 80054bc:	080082a0 	.word	0x080082a0
 80054c0:	40300000 	.word	0x40300000
 80054c4:	3fe00000 	.word	0x3fe00000
 80054c8:	f802 0c01 	strb.w	r0, [r2, #-1]
 80054cc:	e75f      	b.n	800538e <_svfprintf_r+0x62e>
 80054ce:	f803 1b01 	strb.w	r1, [r3], #1
 80054d2:	1af2      	subs	r2, r6, r3
 80054d4:	2a00      	cmp	r2, #0
 80054d6:	dafa      	bge.n	80054ce <_svfprintf_r+0x76e>
 80054d8:	e76a      	b.n	80053b0 <_svfprintf_r+0x650>
 80054da:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80054dc:	4633      	mov	r3, r6
 80054de:	2130      	movs	r1, #48	; 0x30
 80054e0:	4416      	add	r6, r2
 80054e2:	e7f6      	b.n	80054d2 <_svfprintf_r+0x772>
 80054e4:	9b07      	ldr	r3, [sp, #28]
 80054e6:	2b46      	cmp	r3, #70	; 0x46
 80054e8:	d004      	beq.n	80054f4 <_svfprintf_r+0x794>
 80054ea:	2b45      	cmp	r3, #69	; 0x45
 80054ec:	d13a      	bne.n	8005564 <_svfprintf_r+0x804>
 80054ee:	1c6e      	adds	r6, r5, #1
 80054f0:	2102      	movs	r1, #2
 80054f2:	e001      	b.n	80054f8 <_svfprintf_r+0x798>
 80054f4:	462e      	mov	r6, r5
 80054f6:	2103      	movs	r1, #3
 80054f8:	ab24      	add	r3, sp, #144	; 0x90
 80054fa:	9301      	str	r3, [sp, #4]
 80054fc:	ab21      	add	r3, sp, #132	; 0x84
 80054fe:	9300      	str	r3, [sp, #0]
 8005500:	4632      	mov	r2, r6
 8005502:	ab20      	add	r3, sp, #128	; 0x80
 8005504:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 8005508:	9803      	ldr	r0, [sp, #12]
 800550a:	f000 fee5 	bl	80062d8 <_dtoa_r>
 800550e:	9b07      	ldr	r3, [sp, #28]
 8005510:	2b47      	cmp	r3, #71	; 0x47
 8005512:	4683      	mov	fp, r0
 8005514:	d102      	bne.n	800551c <_svfprintf_r+0x7bc>
 8005516:	f01a 0f01 	tst.w	sl, #1
 800551a:	d026      	beq.n	800556a <_svfprintf_r+0x80a>
 800551c:	9b07      	ldr	r3, [sp, #28]
 800551e:	2b46      	cmp	r3, #70	; 0x46
 8005520:	eb0b 0706 	add.w	r7, fp, r6
 8005524:	d10f      	bne.n	8005546 <_svfprintf_r+0x7e6>
 8005526:	f89b 3000 	ldrb.w	r3, [fp]
 800552a:	2b30      	cmp	r3, #48	; 0x30
 800552c:	d109      	bne.n	8005542 <_svfprintf_r+0x7e2>
 800552e:	2200      	movs	r2, #0
 8005530:	2300      	movs	r3, #0
 8005532:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8005536:	f7fb fad7 	bl	8000ae8 <__aeabi_dcmpeq>
 800553a:	b910      	cbnz	r0, 8005542 <_svfprintf_r+0x7e2>
 800553c:	f1c6 0601 	rsb	r6, r6, #1
 8005540:	9620      	str	r6, [sp, #128]	; 0x80
 8005542:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005544:	441f      	add	r7, r3
 8005546:	2200      	movs	r2, #0
 8005548:	2300      	movs	r3, #0
 800554a:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 800554e:	f7fb facb 	bl	8000ae8 <__aeabi_dcmpeq>
 8005552:	b948      	cbnz	r0, 8005568 <_svfprintf_r+0x808>
 8005554:	2230      	movs	r2, #48	; 0x30
 8005556:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005558:	429f      	cmp	r7, r3
 800555a:	d906      	bls.n	800556a <_svfprintf_r+0x80a>
 800555c:	1c59      	adds	r1, r3, #1
 800555e:	9124      	str	r1, [sp, #144]	; 0x90
 8005560:	701a      	strb	r2, [r3, #0]
 8005562:	e7f8      	b.n	8005556 <_svfprintf_r+0x7f6>
 8005564:	462e      	mov	r6, r5
 8005566:	e7c3      	b.n	80054f0 <_svfprintf_r+0x790>
 8005568:	9724      	str	r7, [sp, #144]	; 0x90
 800556a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800556c:	e720      	b.n	80053b0 <_svfprintf_r+0x650>
 800556e:	9b07      	ldr	r3, [sp, #28]
 8005570:	2b46      	cmp	r3, #70	; 0x46
 8005572:	f47f af2d 	bne.w	80053d0 <_svfprintf_r+0x670>
 8005576:	2e00      	cmp	r6, #0
 8005578:	dd1d      	ble.n	80055b6 <_svfprintf_r+0x856>
 800557a:	b915      	cbnz	r5, 8005582 <_svfprintf_r+0x822>
 800557c:	f01a 0f01 	tst.w	sl, #1
 8005580:	d034      	beq.n	80055ec <_svfprintf_r+0x88c>
 8005582:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005584:	18f3      	adds	r3, r6, r3
 8005586:	441d      	add	r5, r3
 8005588:	2366      	movs	r3, #102	; 0x66
 800558a:	9306      	str	r3, [sp, #24]
 800558c:	e033      	b.n	80055f6 <_svfprintf_r+0x896>
 800558e:	460a      	mov	r2, r1
 8005590:	e73e      	b.n	8005410 <_svfprintf_r+0x6b0>
 8005592:	f812 1b01 	ldrb.w	r1, [r2], #1
 8005596:	f803 1b01 	strb.w	r1, [r3], #1
 800559a:	e74e      	b.n	800543a <_svfprintf_r+0x6da>
 800559c:	b941      	cbnz	r1, 80055b0 <_svfprintf_r+0x850>
 800559e:	2230      	movs	r2, #48	; 0x30
 80055a0:	f88d 208a 	strb.w	r2, [sp, #138]	; 0x8a
 80055a4:	f10d 028b 	add.w	r2, sp, #139	; 0x8b
 80055a8:	3330      	adds	r3, #48	; 0x30
 80055aa:	1c51      	adds	r1, r2, #1
 80055ac:	7013      	strb	r3, [r2, #0]
 80055ae:	e748      	b.n	8005442 <_svfprintf_r+0x6e2>
 80055b0:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 80055b4:	e7f8      	b.n	80055a8 <_svfprintf_r+0x848>
 80055b6:	b915      	cbnz	r5, 80055be <_svfprintf_r+0x85e>
 80055b8:	f01a 0f01 	tst.w	sl, #1
 80055bc:	d018      	beq.n	80055f0 <_svfprintf_r+0x890>
 80055be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80055c0:	3301      	adds	r3, #1
 80055c2:	e7e0      	b.n	8005586 <_svfprintf_r+0x826>
 80055c4:	9b04      	ldr	r3, [sp, #16]
 80055c6:	42b3      	cmp	r3, r6
 80055c8:	dc06      	bgt.n	80055d8 <_svfprintf_r+0x878>
 80055ca:	f01a 0f01 	tst.w	sl, #1
 80055ce:	d025      	beq.n	800561c <_svfprintf_r+0x8bc>
 80055d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80055d2:	18f5      	adds	r5, r6, r3
 80055d4:	2367      	movs	r3, #103	; 0x67
 80055d6:	e7d8      	b.n	800558a <_svfprintf_r+0x82a>
 80055d8:	9b04      	ldr	r3, [sp, #16]
 80055da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80055dc:	2e00      	cmp	r6, #0
 80055de:	eb03 0502 	add.w	r5, r3, r2
 80055e2:	dcf7      	bgt.n	80055d4 <_svfprintf_r+0x874>
 80055e4:	f1c6 0301 	rsb	r3, r6, #1
 80055e8:	441d      	add	r5, r3
 80055ea:	e7f3      	b.n	80055d4 <_svfprintf_r+0x874>
 80055ec:	4635      	mov	r5, r6
 80055ee:	e7cb      	b.n	8005588 <_svfprintf_r+0x828>
 80055f0:	2366      	movs	r3, #102	; 0x66
 80055f2:	9306      	str	r3, [sp, #24]
 80055f4:	2501      	movs	r5, #1
 80055f6:	f41a 6380 	ands.w	r3, sl, #1024	; 0x400
 80055fa:	9307      	str	r3, [sp, #28]
 80055fc:	d01f      	beq.n	800563e <_svfprintf_r+0x8de>
 80055fe:	2700      	movs	r7, #0
 8005600:	2e00      	cmp	r6, #0
 8005602:	9707      	str	r7, [sp, #28]
 8005604:	f77f af32 	ble.w	800546c <_svfprintf_r+0x70c>
 8005608:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	2bff      	cmp	r3, #255	; 0xff
 800560e:	d107      	bne.n	8005620 <_svfprintf_r+0x8c0>
 8005610:	9b07      	ldr	r3, [sp, #28]
 8005612:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005614:	443b      	add	r3, r7
 8005616:	fb02 5503 	mla	r5, r2, r3, r5
 800561a:	e727      	b.n	800546c <_svfprintf_r+0x70c>
 800561c:	4635      	mov	r5, r6
 800561e:	e7d9      	b.n	80055d4 <_svfprintf_r+0x874>
 8005620:	42b3      	cmp	r3, r6
 8005622:	daf5      	bge.n	8005610 <_svfprintf_r+0x8b0>
 8005624:	1af6      	subs	r6, r6, r3
 8005626:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005628:	785b      	ldrb	r3, [r3, #1]
 800562a:	b133      	cbz	r3, 800563a <_svfprintf_r+0x8da>
 800562c:	9b07      	ldr	r3, [sp, #28]
 800562e:	3301      	adds	r3, #1
 8005630:	9307      	str	r3, [sp, #28]
 8005632:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005634:	3301      	adds	r3, #1
 8005636:	9309      	str	r3, [sp, #36]	; 0x24
 8005638:	e7e6      	b.n	8005608 <_svfprintf_r+0x8a8>
 800563a:	3701      	adds	r7, #1
 800563c:	e7e4      	b.n	8005608 <_svfprintf_r+0x8a8>
 800563e:	9f07      	ldr	r7, [sp, #28]
 8005640:	e714      	b.n	800546c <_svfprintf_r+0x70c>
 8005642:	4632      	mov	r2, r6
 8005644:	f01a 0f20 	tst.w	sl, #32
 8005648:	f852 3b04 	ldr.w	r3, [r2], #4
 800564c:	9208      	str	r2, [sp, #32]
 800564e:	d009      	beq.n	8005664 <_svfprintf_r+0x904>
 8005650:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005652:	4610      	mov	r0, r2
 8005654:	17d1      	asrs	r1, r2, #31
 8005656:	e9c3 0100 	strd	r0, r1, [r3]
 800565a:	9e08      	ldr	r6, [sp, #32]
 800565c:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 8005660:	f7ff bbba 	b.w	8004dd8 <_svfprintf_r+0x78>
 8005664:	f01a 0f10 	tst.w	sl, #16
 8005668:	d002      	beq.n	8005670 <_svfprintf_r+0x910>
 800566a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800566c:	601a      	str	r2, [r3, #0]
 800566e:	e7f4      	b.n	800565a <_svfprintf_r+0x8fa>
 8005670:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8005674:	d002      	beq.n	800567c <_svfprintf_r+0x91c>
 8005676:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005678:	801a      	strh	r2, [r3, #0]
 800567a:	e7ee      	b.n	800565a <_svfprintf_r+0x8fa>
 800567c:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8005680:	d0f3      	beq.n	800566a <_svfprintf_r+0x90a>
 8005682:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005684:	701a      	strb	r2, [r3, #0]
 8005686:	e7e8      	b.n	800565a <_svfprintf_r+0x8fa>
 8005688:	f04a 0a10 	orr.w	sl, sl, #16
 800568c:	f01a 0f20 	tst.w	sl, #32
 8005690:	d01e      	beq.n	80056d0 <_svfprintf_r+0x970>
 8005692:	3607      	adds	r6, #7
 8005694:	f026 0607 	bic.w	r6, r6, #7
 8005698:	f106 0308 	add.w	r3, r6, #8
 800569c:	e9d6 6700 	ldrd	r6, r7, [r6]
 80056a0:	9308      	str	r3, [sp, #32]
 80056a2:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 80056a6:	2300      	movs	r3, #0
 80056a8:	2200      	movs	r2, #0
 80056aa:	1c69      	adds	r1, r5, #1
 80056ac:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 80056b0:	f000 815b 	beq.w	800596a <_svfprintf_r+0xc0a>
 80056b4:	4652      	mov	r2, sl
 80056b6:	ea56 0107 	orrs.w	r1, r6, r7
 80056ba:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 80056be:	f040 8154 	bne.w	800596a <_svfprintf_r+0xc0a>
 80056c2:	2d00      	cmp	r5, #0
 80056c4:	f000 81d5 	beq.w	8005a72 <_svfprintf_r+0xd12>
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	f040 8151 	bne.w	8005970 <_svfprintf_r+0xc10>
 80056ce:	e558      	b.n	8005182 <_svfprintf_r+0x422>
 80056d0:	1d33      	adds	r3, r6, #4
 80056d2:	f01a 0f10 	tst.w	sl, #16
 80056d6:	9308      	str	r3, [sp, #32]
 80056d8:	d001      	beq.n	80056de <_svfprintf_r+0x97e>
 80056da:	6836      	ldr	r6, [r6, #0]
 80056dc:	e003      	b.n	80056e6 <_svfprintf_r+0x986>
 80056de:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80056e2:	d002      	beq.n	80056ea <_svfprintf_r+0x98a>
 80056e4:	8836      	ldrh	r6, [r6, #0]
 80056e6:	2700      	movs	r7, #0
 80056e8:	e7db      	b.n	80056a2 <_svfprintf_r+0x942>
 80056ea:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80056ee:	d0f4      	beq.n	80056da <_svfprintf_r+0x97a>
 80056f0:	7836      	ldrb	r6, [r6, #0]
 80056f2:	e7f8      	b.n	80056e6 <_svfprintf_r+0x986>
 80056f4:	1d33      	adds	r3, r6, #4
 80056f6:	9308      	str	r3, [sp, #32]
 80056f8:	f647 0330 	movw	r3, #30768	; 0x7830
 80056fc:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
 8005700:	2278      	movs	r2, #120	; 0x78
 8005702:	4bb0      	ldr	r3, [pc, #704]	; (80059c4 <_svfprintf_r+0xc64>)
 8005704:	9318      	str	r3, [sp, #96]	; 0x60
 8005706:	6836      	ldr	r6, [r6, #0]
 8005708:	9206      	str	r2, [sp, #24]
 800570a:	2700      	movs	r7, #0
 800570c:	f04a 0a02 	orr.w	sl, sl, #2
 8005710:	2302      	movs	r3, #2
 8005712:	e7c9      	b.n	80056a8 <_svfprintf_r+0x948>
 8005714:	1d33      	adds	r3, r6, #4
 8005716:	f8d6 b000 	ldr.w	fp, [r6]
 800571a:	9308      	str	r3, [sp, #32]
 800571c:	2600      	movs	r6, #0
 800571e:	1c68      	adds	r0, r5, #1
 8005720:	f88d 607b 	strb.w	r6, [sp, #123]	; 0x7b
 8005724:	f000 80e1 	beq.w	80058ea <_svfprintf_r+0xb8a>
 8005728:	462a      	mov	r2, r5
 800572a:	4631      	mov	r1, r6
 800572c:	4658      	mov	r0, fp
 800572e:	f7fa fd67 	bl	8000200 <memchr>
 8005732:	4681      	mov	r9, r0
 8005734:	2800      	cmp	r0, #0
 8005736:	f43f ad74 	beq.w	8005222 <_svfprintf_r+0x4c2>
 800573a:	eba0 050b 	sub.w	r5, r0, fp
 800573e:	46b1      	mov	r9, r6
 8005740:	9610      	str	r6, [sp, #64]	; 0x40
 8005742:	4637      	mov	r7, r6
 8005744:	9607      	str	r6, [sp, #28]
 8005746:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005748:	42ab      	cmp	r3, r5
 800574a:	bfb8      	it	lt
 800574c:	462b      	movlt	r3, r5
 800574e:	9311      	str	r3, [sp, #68]	; 0x44
 8005750:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8005754:	b113      	cbz	r3, 800575c <_svfprintf_r+0x9fc>
 8005756:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005758:	3301      	adds	r3, #1
 800575a:	9311      	str	r3, [sp, #68]	; 0x44
 800575c:	f01a 0302 	ands.w	r3, sl, #2
 8005760:	931c      	str	r3, [sp, #112]	; 0x70
 8005762:	bf1e      	ittt	ne
 8005764:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 8005766:	3302      	addne	r3, #2
 8005768:	9311      	strne	r3, [sp, #68]	; 0x44
 800576a:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 800576e:	931d      	str	r3, [sp, #116]	; 0x74
 8005770:	d122      	bne.n	80057b8 <_svfprintf_r+0xa58>
 8005772:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005774:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005776:	1a9b      	subs	r3, r3, r2
 8005778:	2b00      	cmp	r3, #0
 800577a:	9313      	str	r3, [sp, #76]	; 0x4c
 800577c:	dd1c      	ble.n	80057b8 <_svfprintf_r+0xa58>
 800577e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8005780:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 8005784:	2810      	cmp	r0, #16
 8005786:	4890      	ldr	r0, [pc, #576]	; (80059c8 <_svfprintf_r+0xc68>)
 8005788:	6020      	str	r0, [r4, #0]
 800578a:	f102 0201 	add.w	r2, r2, #1
 800578e:	f104 0108 	add.w	r1, r4, #8
 8005792:	f300 8188 	bgt.w	8005aa6 <_svfprintf_r+0xd46>
 8005796:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8005798:	6060      	str	r0, [r4, #4]
 800579a:	4403      	add	r3, r0
 800579c:	2a07      	cmp	r2, #7
 800579e:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 80057a2:	f340 8195 	ble.w	8005ad0 <_svfprintf_r+0xd70>
 80057a6:	aa26      	add	r2, sp, #152	; 0x98
 80057a8:	4641      	mov	r1, r8
 80057aa:	9803      	ldr	r0, [sp, #12]
 80057ac:	f002 f9bd 	bl	8007b2a <__ssprint_r>
 80057b0:	2800      	cmp	r0, #0
 80057b2:	f040 84c1 	bne.w	8006138 <_svfprintf_r+0x13d8>
 80057b6:	ac29      	add	r4, sp, #164	; 0xa4
 80057b8:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 80057bc:	b173      	cbz	r3, 80057dc <_svfprintf_r+0xa7c>
 80057be:	f10d 037b 	add.w	r3, sp, #123	; 0x7b
 80057c2:	6023      	str	r3, [r4, #0]
 80057c4:	2301      	movs	r3, #1
 80057c6:	6063      	str	r3, [r4, #4]
 80057c8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80057ca:	3301      	adds	r3, #1
 80057cc:	9328      	str	r3, [sp, #160]	; 0xa0
 80057ce:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80057d0:	3301      	adds	r3, #1
 80057d2:	2b07      	cmp	r3, #7
 80057d4:	9327      	str	r3, [sp, #156]	; 0x9c
 80057d6:	f300 817d 	bgt.w	8005ad4 <_svfprintf_r+0xd74>
 80057da:	3408      	adds	r4, #8
 80057dc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80057de:	b16b      	cbz	r3, 80057fc <_svfprintf_r+0xa9c>
 80057e0:	ab1f      	add	r3, sp, #124	; 0x7c
 80057e2:	6023      	str	r3, [r4, #0]
 80057e4:	2302      	movs	r3, #2
 80057e6:	6063      	str	r3, [r4, #4]
 80057e8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80057ea:	3302      	adds	r3, #2
 80057ec:	9328      	str	r3, [sp, #160]	; 0xa0
 80057ee:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80057f0:	3301      	adds	r3, #1
 80057f2:	2b07      	cmp	r3, #7
 80057f4:	9327      	str	r3, [sp, #156]	; 0x9c
 80057f6:	f300 8177 	bgt.w	8005ae8 <_svfprintf_r+0xd88>
 80057fa:	3408      	adds	r4, #8
 80057fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80057fe:	2b80      	cmp	r3, #128	; 0x80
 8005800:	d122      	bne.n	8005848 <_svfprintf_r+0xae8>
 8005802:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005804:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005806:	1a9b      	subs	r3, r3, r2
 8005808:	2b00      	cmp	r3, #0
 800580a:	9313      	str	r3, [sp, #76]	; 0x4c
 800580c:	dd1c      	ble.n	8005848 <_svfprintf_r+0xae8>
 800580e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8005810:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 8005814:	2810      	cmp	r0, #16
 8005816:	486d      	ldr	r0, [pc, #436]	; (80059cc <_svfprintf_r+0xc6c>)
 8005818:	6020      	str	r0, [r4, #0]
 800581a:	f102 0201 	add.w	r2, r2, #1
 800581e:	f104 0108 	add.w	r1, r4, #8
 8005822:	f300 816b 	bgt.w	8005afc <_svfprintf_r+0xd9c>
 8005826:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8005828:	6060      	str	r0, [r4, #4]
 800582a:	4403      	add	r3, r0
 800582c:	2a07      	cmp	r2, #7
 800582e:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8005832:	f340 8178 	ble.w	8005b26 <_svfprintf_r+0xdc6>
 8005836:	aa26      	add	r2, sp, #152	; 0x98
 8005838:	4641      	mov	r1, r8
 800583a:	9803      	ldr	r0, [sp, #12]
 800583c:	f002 f975 	bl	8007b2a <__ssprint_r>
 8005840:	2800      	cmp	r0, #0
 8005842:	f040 8479 	bne.w	8006138 <_svfprintf_r+0x13d8>
 8005846:	ac29      	add	r4, sp, #164	; 0xa4
 8005848:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800584a:	1b5b      	subs	r3, r3, r5
 800584c:	2b00      	cmp	r3, #0
 800584e:	9310      	str	r3, [sp, #64]	; 0x40
 8005850:	dd1c      	ble.n	800588c <_svfprintf_r+0xb2c>
 8005852:	9810      	ldr	r0, [sp, #64]	; 0x40
 8005854:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 8005858:	2810      	cmp	r0, #16
 800585a:	485c      	ldr	r0, [pc, #368]	; (80059cc <_svfprintf_r+0xc6c>)
 800585c:	6020      	str	r0, [r4, #0]
 800585e:	f102 0201 	add.w	r2, r2, #1
 8005862:	f104 0108 	add.w	r1, r4, #8
 8005866:	f300 8160 	bgt.w	8005b2a <_svfprintf_r+0xdca>
 800586a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800586c:	6060      	str	r0, [r4, #4]
 800586e:	4403      	add	r3, r0
 8005870:	2a07      	cmp	r2, #7
 8005872:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8005876:	f340 816d 	ble.w	8005b54 <_svfprintf_r+0xdf4>
 800587a:	aa26      	add	r2, sp, #152	; 0x98
 800587c:	4641      	mov	r1, r8
 800587e:	9803      	ldr	r0, [sp, #12]
 8005880:	f002 f953 	bl	8007b2a <__ssprint_r>
 8005884:	2800      	cmp	r0, #0
 8005886:	f040 8457 	bne.w	8006138 <_svfprintf_r+0x13d8>
 800588a:	ac29      	add	r4, sp, #164	; 0xa4
 800588c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800588e:	9310      	str	r3, [sp, #64]	; 0x40
 8005890:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005894:	f040 8160 	bne.w	8005b58 <_svfprintf_r+0xdf8>
 8005898:	e9c4 b500 	strd	fp, r5, [r4]
 800589c:	441d      	add	r5, r3
 800589e:	9528      	str	r5, [sp, #160]	; 0xa0
 80058a0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80058a2:	3301      	adds	r3, #1
 80058a4:	2b07      	cmp	r3, #7
 80058a6:	9327      	str	r3, [sp, #156]	; 0x9c
 80058a8:	f300 819c 	bgt.w	8005be4 <_svfprintf_r+0xe84>
 80058ac:	3408      	adds	r4, #8
 80058ae:	f01a 0f04 	tst.w	sl, #4
 80058b2:	f040 8423 	bne.w	80060fc <_svfprintf_r+0x139c>
 80058b6:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 80058ba:	9911      	ldr	r1, [sp, #68]	; 0x44
 80058bc:	428a      	cmp	r2, r1
 80058be:	bfac      	ite	ge
 80058c0:	189b      	addge	r3, r3, r2
 80058c2:	185b      	addlt	r3, r3, r1
 80058c4:	930e      	str	r3, [sp, #56]	; 0x38
 80058c6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80058c8:	b13b      	cbz	r3, 80058da <_svfprintf_r+0xb7a>
 80058ca:	aa26      	add	r2, sp, #152	; 0x98
 80058cc:	4641      	mov	r1, r8
 80058ce:	9803      	ldr	r0, [sp, #12]
 80058d0:	f002 f92b 	bl	8007b2a <__ssprint_r>
 80058d4:	2800      	cmp	r0, #0
 80058d6:	f040 842f 	bne.w	8006138 <_svfprintf_r+0x13d8>
 80058da:	2300      	movs	r3, #0
 80058dc:	9327      	str	r3, [sp, #156]	; 0x9c
 80058de:	f1b9 0f00 	cmp.w	r9, #0
 80058e2:	f040 8445 	bne.w	8006170 <_svfprintf_r+0x1410>
 80058e6:	ac29      	add	r4, sp, #164	; 0xa4
 80058e8:	e6b7      	b.n	800565a <_svfprintf_r+0x8fa>
 80058ea:	4658      	mov	r0, fp
 80058ec:	f7fa fc80 	bl	80001f0 <strlen>
 80058f0:	46b1      	mov	r9, r6
 80058f2:	4605      	mov	r5, r0
 80058f4:	e495      	b.n	8005222 <_svfprintf_r+0x4c2>
 80058f6:	f04a 0a10 	orr.w	sl, sl, #16
 80058fa:	f01a 0f20 	tst.w	sl, #32
 80058fe:	d009      	beq.n	8005914 <_svfprintf_r+0xbb4>
 8005900:	3607      	adds	r6, #7
 8005902:	f026 0607 	bic.w	r6, r6, #7
 8005906:	f106 0308 	add.w	r3, r6, #8
 800590a:	e9d6 6700 	ldrd	r6, r7, [r6]
 800590e:	9308      	str	r3, [sp, #32]
 8005910:	2301      	movs	r3, #1
 8005912:	e6c9      	b.n	80056a8 <_svfprintf_r+0x948>
 8005914:	1d33      	adds	r3, r6, #4
 8005916:	f01a 0f10 	tst.w	sl, #16
 800591a:	9308      	str	r3, [sp, #32]
 800591c:	d001      	beq.n	8005922 <_svfprintf_r+0xbc2>
 800591e:	6836      	ldr	r6, [r6, #0]
 8005920:	e003      	b.n	800592a <_svfprintf_r+0xbca>
 8005922:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8005926:	d002      	beq.n	800592e <_svfprintf_r+0xbce>
 8005928:	8836      	ldrh	r6, [r6, #0]
 800592a:	2700      	movs	r7, #0
 800592c:	e7f0      	b.n	8005910 <_svfprintf_r+0xbb0>
 800592e:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8005932:	d0f4      	beq.n	800591e <_svfprintf_r+0xbbe>
 8005934:	7836      	ldrb	r6, [r6, #0]
 8005936:	e7f8      	b.n	800592a <_svfprintf_r+0xbca>
 8005938:	4b22      	ldr	r3, [pc, #136]	; (80059c4 <_svfprintf_r+0xc64>)
 800593a:	f7ff bb48 	b.w	8004fce <_svfprintf_r+0x26e>
 800593e:	1d33      	adds	r3, r6, #4
 8005940:	f01a 0f10 	tst.w	sl, #16
 8005944:	9308      	str	r3, [sp, #32]
 8005946:	d001      	beq.n	800594c <_svfprintf_r+0xbec>
 8005948:	6836      	ldr	r6, [r6, #0]
 800594a:	e003      	b.n	8005954 <_svfprintf_r+0xbf4>
 800594c:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8005950:	d003      	beq.n	800595a <_svfprintf_r+0xbfa>
 8005952:	8836      	ldrh	r6, [r6, #0]
 8005954:	2700      	movs	r7, #0
 8005956:	f7ff bb47 	b.w	8004fe8 <_svfprintf_r+0x288>
 800595a:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800595e:	d0f3      	beq.n	8005948 <_svfprintf_r+0xbe8>
 8005960:	7836      	ldrb	r6, [r6, #0]
 8005962:	e7f7      	b.n	8005954 <_svfprintf_r+0xbf4>
 8005964:	4652      	mov	r2, sl
 8005966:	2301      	movs	r3, #1
 8005968:	e6a5      	b.n	80056b6 <_svfprintf_r+0x956>
 800596a:	2b01      	cmp	r3, #1
 800596c:	f43f ac04 	beq.w	8005178 <_svfprintf_r+0x418>
 8005970:	2b02      	cmp	r3, #2
 8005972:	d06c      	beq.n	8005a4e <_svfprintf_r+0xcee>
 8005974:	ab52      	add	r3, sp, #328	; 0x148
 8005976:	08f1      	lsrs	r1, r6, #3
 8005978:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 800597c:	08f8      	lsrs	r0, r7, #3
 800597e:	f006 0207 	and.w	r2, r6, #7
 8005982:	4607      	mov	r7, r0
 8005984:	460e      	mov	r6, r1
 8005986:	3230      	adds	r2, #48	; 0x30
 8005988:	ea56 0107 	orrs.w	r1, r6, r7
 800598c:	f103 3bff 	add.w	fp, r3, #4294967295
 8005990:	f803 2c01 	strb.w	r2, [r3, #-1]
 8005994:	d114      	bne.n	80059c0 <_svfprintf_r+0xc60>
 8005996:	f01a 0f01 	tst.w	sl, #1
 800599a:	d006      	beq.n	80059aa <_svfprintf_r+0xc4a>
 800599c:	2a30      	cmp	r2, #48	; 0x30
 800599e:	d004      	beq.n	80059aa <_svfprintf_r+0xc4a>
 80059a0:	2230      	movs	r2, #48	; 0x30
 80059a2:	f80b 2c01 	strb.w	r2, [fp, #-1]
 80059a6:	f1a3 0b02 	sub.w	fp, r3, #2
 80059aa:	ab52      	add	r3, sp, #328	; 0x148
 80059ac:	9510      	str	r5, [sp, #64]	; 0x40
 80059ae:	f04f 0900 	mov.w	r9, #0
 80059b2:	eba3 050b 	sub.w	r5, r3, fp
 80059b6:	464f      	mov	r7, r9
 80059b8:	f8cd 901c 	str.w	r9, [sp, #28]
 80059bc:	464e      	mov	r6, r9
 80059be:	e6c2      	b.n	8005746 <_svfprintf_r+0x9e6>
 80059c0:	465b      	mov	r3, fp
 80059c2:	e7d8      	b.n	8005976 <_svfprintf_r+0xc16>
 80059c4:	080082a0 	.word	0x080082a0
 80059c8:	080082c4 	.word	0x080082c4
 80059cc:	080082d4 	.word	0x080082d4
 80059d0:	2300      	movs	r3, #0
 80059d2:	9304      	str	r3, [sp, #16]
 80059d4:	f40a 6380 	and.w	r3, sl, #1024	; 0x400
 80059d8:	f50d 79a4 	add.w	r9, sp, #328	; 0x148
 80059dc:	9307      	str	r3, [sp, #28]
 80059de:	220a      	movs	r2, #10
 80059e0:	2300      	movs	r3, #0
 80059e2:	4630      	mov	r0, r6
 80059e4:	4639      	mov	r1, r7
 80059e6:	f7fb f8ef 	bl	8000bc8 <__aeabi_uldivmod>
 80059ea:	9b04      	ldr	r3, [sp, #16]
 80059ec:	3301      	adds	r3, #1
 80059ee:	9304      	str	r3, [sp, #16]
 80059f0:	9b07      	ldr	r3, [sp, #28]
 80059f2:	3230      	adds	r2, #48	; 0x30
 80059f4:	f109 3bff 	add.w	fp, r9, #4294967295
 80059f8:	f809 2c01 	strb.w	r2, [r9, #-1]
 80059fc:	b1d3      	cbz	r3, 8005a34 <_svfprintf_r+0xcd4>
 80059fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a00:	9a04      	ldr	r2, [sp, #16]
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d115      	bne.n	8005a34 <_svfprintf_r+0xcd4>
 8005a08:	2aff      	cmp	r2, #255	; 0xff
 8005a0a:	d013      	beq.n	8005a34 <_svfprintf_r+0xcd4>
 8005a0c:	2f00      	cmp	r7, #0
 8005a0e:	bf08      	it	eq
 8005a10:	2e0a      	cmpeq	r6, #10
 8005a12:	d30f      	bcc.n	8005a34 <_svfprintf_r+0xcd4>
 8005a14:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005a16:	9919      	ldr	r1, [sp, #100]	; 0x64
 8005a18:	ebab 0b03 	sub.w	fp, fp, r3
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	4658      	mov	r0, fp
 8005a20:	f002 f86e 	bl	8007b00 <strncpy>
 8005a24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a26:	785b      	ldrb	r3, [r3, #1]
 8005a28:	b11b      	cbz	r3, 8005a32 <_svfprintf_r+0xcd2>
 8005a2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a2c:	3301      	adds	r3, #1
 8005a2e:	9309      	str	r3, [sp, #36]	; 0x24
 8005a30:	2300      	movs	r3, #0
 8005a32:	9304      	str	r3, [sp, #16]
 8005a34:	2300      	movs	r3, #0
 8005a36:	4630      	mov	r0, r6
 8005a38:	4639      	mov	r1, r7
 8005a3a:	220a      	movs	r2, #10
 8005a3c:	f7fb f8c4 	bl	8000bc8 <__aeabi_uldivmod>
 8005a40:	4606      	mov	r6, r0
 8005a42:	460f      	mov	r7, r1
 8005a44:	ea56 0307 	orrs.w	r3, r6, r7
 8005a48:	d0af      	beq.n	80059aa <_svfprintf_r+0xc4a>
 8005a4a:	46d9      	mov	r9, fp
 8005a4c:	e7c7      	b.n	80059de <_svfprintf_r+0xc7e>
 8005a4e:	f50d 7ba4 	add.w	fp, sp, #328	; 0x148
 8005a52:	f006 030f 	and.w	r3, r6, #15
 8005a56:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005a58:	5cd3      	ldrb	r3, [r2, r3]
 8005a5a:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 8005a5e:	0933      	lsrs	r3, r6, #4
 8005a60:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8005a64:	093a      	lsrs	r2, r7, #4
 8005a66:	461e      	mov	r6, r3
 8005a68:	4617      	mov	r7, r2
 8005a6a:	ea56 0307 	orrs.w	r3, r6, r7
 8005a6e:	d1f0      	bne.n	8005a52 <_svfprintf_r+0xcf2>
 8005a70:	e79b      	b.n	80059aa <_svfprintf_r+0xc4a>
 8005a72:	f50d 7ba4 	add.w	fp, sp, #328	; 0x148
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d197      	bne.n	80059aa <_svfprintf_r+0xc4a>
 8005a7a:	07d2      	lsls	r2, r2, #31
 8005a7c:	bf44      	itt	mi
 8005a7e:	2330      	movmi	r3, #48	; 0x30
 8005a80:	f80b 3d01 	strbmi.w	r3, [fp, #-1]!
 8005a84:	e791      	b.n	80059aa <_svfprintf_r+0xc4a>
 8005a86:	9b06      	ldr	r3, [sp, #24]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	f000 8377 	beq.w	800617c <_svfprintf_r+0x141c>
 8005a8e:	2000      	movs	r0, #0
 8005a90:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 8005a94:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 8005a98:	9608      	str	r6, [sp, #32]
 8005a9a:	f7ff bb49 	b.w	8005130 <_svfprintf_r+0x3d0>
 8005a9e:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 8005aa2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005aa4:	e4ec      	b.n	8005480 <_svfprintf_r+0x720>
 8005aa6:	2010      	movs	r0, #16
 8005aa8:	4403      	add	r3, r0
 8005aaa:	2a07      	cmp	r2, #7
 8005aac:	6060      	str	r0, [r4, #4]
 8005aae:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8005ab2:	dd08      	ble.n	8005ac6 <_svfprintf_r+0xd66>
 8005ab4:	aa26      	add	r2, sp, #152	; 0x98
 8005ab6:	4641      	mov	r1, r8
 8005ab8:	9803      	ldr	r0, [sp, #12]
 8005aba:	f002 f836 	bl	8007b2a <__ssprint_r>
 8005abe:	2800      	cmp	r0, #0
 8005ac0:	f040 833a 	bne.w	8006138 <_svfprintf_r+0x13d8>
 8005ac4:	a929      	add	r1, sp, #164	; 0xa4
 8005ac6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005ac8:	3b10      	subs	r3, #16
 8005aca:	9313      	str	r3, [sp, #76]	; 0x4c
 8005acc:	460c      	mov	r4, r1
 8005ace:	e656      	b.n	800577e <_svfprintf_r+0xa1e>
 8005ad0:	460c      	mov	r4, r1
 8005ad2:	e671      	b.n	80057b8 <_svfprintf_r+0xa58>
 8005ad4:	aa26      	add	r2, sp, #152	; 0x98
 8005ad6:	4641      	mov	r1, r8
 8005ad8:	9803      	ldr	r0, [sp, #12]
 8005ada:	f002 f826 	bl	8007b2a <__ssprint_r>
 8005ade:	2800      	cmp	r0, #0
 8005ae0:	f040 832a 	bne.w	8006138 <_svfprintf_r+0x13d8>
 8005ae4:	ac29      	add	r4, sp, #164	; 0xa4
 8005ae6:	e679      	b.n	80057dc <_svfprintf_r+0xa7c>
 8005ae8:	aa26      	add	r2, sp, #152	; 0x98
 8005aea:	4641      	mov	r1, r8
 8005aec:	9803      	ldr	r0, [sp, #12]
 8005aee:	f002 f81c 	bl	8007b2a <__ssprint_r>
 8005af2:	2800      	cmp	r0, #0
 8005af4:	f040 8320 	bne.w	8006138 <_svfprintf_r+0x13d8>
 8005af8:	ac29      	add	r4, sp, #164	; 0xa4
 8005afa:	e67f      	b.n	80057fc <_svfprintf_r+0xa9c>
 8005afc:	2010      	movs	r0, #16
 8005afe:	4403      	add	r3, r0
 8005b00:	2a07      	cmp	r2, #7
 8005b02:	6060      	str	r0, [r4, #4]
 8005b04:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8005b08:	dd08      	ble.n	8005b1c <_svfprintf_r+0xdbc>
 8005b0a:	aa26      	add	r2, sp, #152	; 0x98
 8005b0c:	4641      	mov	r1, r8
 8005b0e:	9803      	ldr	r0, [sp, #12]
 8005b10:	f002 f80b 	bl	8007b2a <__ssprint_r>
 8005b14:	2800      	cmp	r0, #0
 8005b16:	f040 830f 	bne.w	8006138 <_svfprintf_r+0x13d8>
 8005b1a:	a929      	add	r1, sp, #164	; 0xa4
 8005b1c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005b1e:	3b10      	subs	r3, #16
 8005b20:	9313      	str	r3, [sp, #76]	; 0x4c
 8005b22:	460c      	mov	r4, r1
 8005b24:	e673      	b.n	800580e <_svfprintf_r+0xaae>
 8005b26:	460c      	mov	r4, r1
 8005b28:	e68e      	b.n	8005848 <_svfprintf_r+0xae8>
 8005b2a:	2010      	movs	r0, #16
 8005b2c:	4403      	add	r3, r0
 8005b2e:	2a07      	cmp	r2, #7
 8005b30:	6060      	str	r0, [r4, #4]
 8005b32:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8005b36:	dd08      	ble.n	8005b4a <_svfprintf_r+0xdea>
 8005b38:	aa26      	add	r2, sp, #152	; 0x98
 8005b3a:	4641      	mov	r1, r8
 8005b3c:	9803      	ldr	r0, [sp, #12]
 8005b3e:	f001 fff4 	bl	8007b2a <__ssprint_r>
 8005b42:	2800      	cmp	r0, #0
 8005b44:	f040 82f8 	bne.w	8006138 <_svfprintf_r+0x13d8>
 8005b48:	a929      	add	r1, sp, #164	; 0xa4
 8005b4a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005b4c:	3b10      	subs	r3, #16
 8005b4e:	9310      	str	r3, [sp, #64]	; 0x40
 8005b50:	460c      	mov	r4, r1
 8005b52:	e67e      	b.n	8005852 <_svfprintf_r+0xaf2>
 8005b54:	460c      	mov	r4, r1
 8005b56:	e699      	b.n	800588c <_svfprintf_r+0xb2c>
 8005b58:	9b06      	ldr	r3, [sp, #24]
 8005b5a:	2b65      	cmp	r3, #101	; 0x65
 8005b5c:	f340 8234 	ble.w	8005fc8 <_svfprintf_r+0x1268>
 8005b60:	2200      	movs	r2, #0
 8005b62:	2300      	movs	r3, #0
 8005b64:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005b68:	f7fa ffbe 	bl	8000ae8 <__aeabi_dcmpeq>
 8005b6c:	2800      	cmp	r0, #0
 8005b6e:	d069      	beq.n	8005c44 <_svfprintf_r+0xee4>
 8005b70:	4b6e      	ldr	r3, [pc, #440]	; (8005d2c <_svfprintf_r+0xfcc>)
 8005b72:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005b74:	6023      	str	r3, [r4, #0]
 8005b76:	2301      	movs	r3, #1
 8005b78:	441d      	add	r5, r3
 8005b7a:	6063      	str	r3, [r4, #4]
 8005b7c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8005b7e:	9528      	str	r5, [sp, #160]	; 0xa0
 8005b80:	3301      	adds	r3, #1
 8005b82:	2b07      	cmp	r3, #7
 8005b84:	9327      	str	r3, [sp, #156]	; 0x9c
 8005b86:	dc37      	bgt.n	8005bf8 <_svfprintf_r+0xe98>
 8005b88:	3408      	adds	r4, #8
 8005b8a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005b8c:	9a04      	ldr	r2, [sp, #16]
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	db03      	blt.n	8005b9a <_svfprintf_r+0xe3a>
 8005b92:	f01a 0f01 	tst.w	sl, #1
 8005b96:	f43f ae8a 	beq.w	80058ae <_svfprintf_r+0xb4e>
 8005b9a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005b9c:	6023      	str	r3, [r4, #0]
 8005b9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ba0:	6063      	str	r3, [r4, #4]
 8005ba2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005ba4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005ba6:	4413      	add	r3, r2
 8005ba8:	9328      	str	r3, [sp, #160]	; 0xa0
 8005baa:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8005bac:	3301      	adds	r3, #1
 8005bae:	2b07      	cmp	r3, #7
 8005bb0:	9327      	str	r3, [sp, #156]	; 0x9c
 8005bb2:	dc2b      	bgt.n	8005c0c <_svfprintf_r+0xeac>
 8005bb4:	3408      	adds	r4, #8
 8005bb6:	9b04      	ldr	r3, [sp, #16]
 8005bb8:	1e5d      	subs	r5, r3, #1
 8005bba:	2d00      	cmp	r5, #0
 8005bbc:	f77f ae77 	ble.w	80058ae <_svfprintf_r+0xb4e>
 8005bc0:	4e5b      	ldr	r6, [pc, #364]	; (8005d30 <_svfprintf_r+0xfd0>)
 8005bc2:	2710      	movs	r7, #16
 8005bc4:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8005bc8:	2d10      	cmp	r5, #16
 8005bca:	f103 0301 	add.w	r3, r3, #1
 8005bce:	f104 0108 	add.w	r1, r4, #8
 8005bd2:	6026      	str	r6, [r4, #0]
 8005bd4:	dc24      	bgt.n	8005c20 <_svfprintf_r+0xec0>
 8005bd6:	6065      	str	r5, [r4, #4]
 8005bd8:	2b07      	cmp	r3, #7
 8005bda:	4415      	add	r5, r2
 8005bdc:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8005be0:	f340 8289 	ble.w	80060f6 <_svfprintf_r+0x1396>
 8005be4:	aa26      	add	r2, sp, #152	; 0x98
 8005be6:	4641      	mov	r1, r8
 8005be8:	9803      	ldr	r0, [sp, #12]
 8005bea:	f001 ff9e 	bl	8007b2a <__ssprint_r>
 8005bee:	2800      	cmp	r0, #0
 8005bf0:	f040 82a2 	bne.w	8006138 <_svfprintf_r+0x13d8>
 8005bf4:	ac29      	add	r4, sp, #164	; 0xa4
 8005bf6:	e65a      	b.n	80058ae <_svfprintf_r+0xb4e>
 8005bf8:	aa26      	add	r2, sp, #152	; 0x98
 8005bfa:	4641      	mov	r1, r8
 8005bfc:	9803      	ldr	r0, [sp, #12]
 8005bfe:	f001 ff94 	bl	8007b2a <__ssprint_r>
 8005c02:	2800      	cmp	r0, #0
 8005c04:	f040 8298 	bne.w	8006138 <_svfprintf_r+0x13d8>
 8005c08:	ac29      	add	r4, sp, #164	; 0xa4
 8005c0a:	e7be      	b.n	8005b8a <_svfprintf_r+0xe2a>
 8005c0c:	aa26      	add	r2, sp, #152	; 0x98
 8005c0e:	4641      	mov	r1, r8
 8005c10:	9803      	ldr	r0, [sp, #12]
 8005c12:	f001 ff8a 	bl	8007b2a <__ssprint_r>
 8005c16:	2800      	cmp	r0, #0
 8005c18:	f040 828e 	bne.w	8006138 <_svfprintf_r+0x13d8>
 8005c1c:	ac29      	add	r4, sp, #164	; 0xa4
 8005c1e:	e7ca      	b.n	8005bb6 <_svfprintf_r+0xe56>
 8005c20:	3210      	adds	r2, #16
 8005c22:	2b07      	cmp	r3, #7
 8005c24:	6067      	str	r7, [r4, #4]
 8005c26:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8005c2a:	dd08      	ble.n	8005c3e <_svfprintf_r+0xede>
 8005c2c:	aa26      	add	r2, sp, #152	; 0x98
 8005c2e:	4641      	mov	r1, r8
 8005c30:	9803      	ldr	r0, [sp, #12]
 8005c32:	f001 ff7a 	bl	8007b2a <__ssprint_r>
 8005c36:	2800      	cmp	r0, #0
 8005c38:	f040 827e 	bne.w	8006138 <_svfprintf_r+0x13d8>
 8005c3c:	a929      	add	r1, sp, #164	; 0xa4
 8005c3e:	3d10      	subs	r5, #16
 8005c40:	460c      	mov	r4, r1
 8005c42:	e7bf      	b.n	8005bc4 <_svfprintf_r+0xe64>
 8005c44:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	dc74      	bgt.n	8005d34 <_svfprintf_r+0xfd4>
 8005c4a:	4b38      	ldr	r3, [pc, #224]	; (8005d2c <_svfprintf_r+0xfcc>)
 8005c4c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005c4e:	6023      	str	r3, [r4, #0]
 8005c50:	2301      	movs	r3, #1
 8005c52:	441d      	add	r5, r3
 8005c54:	6063      	str	r3, [r4, #4]
 8005c56:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8005c58:	9528      	str	r5, [sp, #160]	; 0xa0
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	2b07      	cmp	r3, #7
 8005c5e:	9327      	str	r3, [sp, #156]	; 0x9c
 8005c60:	dc3e      	bgt.n	8005ce0 <_svfprintf_r+0xf80>
 8005c62:	3408      	adds	r4, #8
 8005c64:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005c66:	b92b      	cbnz	r3, 8005c74 <_svfprintf_r+0xf14>
 8005c68:	9b04      	ldr	r3, [sp, #16]
 8005c6a:	b91b      	cbnz	r3, 8005c74 <_svfprintf_r+0xf14>
 8005c6c:	f01a 0f01 	tst.w	sl, #1
 8005c70:	f43f ae1d 	beq.w	80058ae <_svfprintf_r+0xb4e>
 8005c74:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005c76:	6023      	str	r3, [r4, #0]
 8005c78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c7a:	6063      	str	r3, [r4, #4]
 8005c7c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005c7e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005c80:	4413      	add	r3, r2
 8005c82:	9328      	str	r3, [sp, #160]	; 0xa0
 8005c84:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8005c86:	3301      	adds	r3, #1
 8005c88:	2b07      	cmp	r3, #7
 8005c8a:	9327      	str	r3, [sp, #156]	; 0x9c
 8005c8c:	dc32      	bgt.n	8005cf4 <_svfprintf_r+0xf94>
 8005c8e:	3408      	adds	r4, #8
 8005c90:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8005c92:	2d00      	cmp	r5, #0
 8005c94:	da1b      	bge.n	8005cce <_svfprintf_r+0xf6e>
 8005c96:	4e26      	ldr	r6, [pc, #152]	; (8005d30 <_svfprintf_r+0xfd0>)
 8005c98:	426d      	negs	r5, r5
 8005c9a:	4623      	mov	r3, r4
 8005c9c:	2710      	movs	r7, #16
 8005c9e:	e9dd 2127 	ldrd	r2, r1, [sp, #156]	; 0x9c
 8005ca2:	2d10      	cmp	r5, #16
 8005ca4:	f102 0201 	add.w	r2, r2, #1
 8005ca8:	f104 0408 	add.w	r4, r4, #8
 8005cac:	601e      	str	r6, [r3, #0]
 8005cae:	dc2b      	bgt.n	8005d08 <_svfprintf_r+0xfa8>
 8005cb0:	605d      	str	r5, [r3, #4]
 8005cb2:	2a07      	cmp	r2, #7
 8005cb4:	440d      	add	r5, r1
 8005cb6:	e9cd 2527 	strd	r2, r5, [sp, #156]	; 0x9c
 8005cba:	dd08      	ble.n	8005cce <_svfprintf_r+0xf6e>
 8005cbc:	aa26      	add	r2, sp, #152	; 0x98
 8005cbe:	4641      	mov	r1, r8
 8005cc0:	9803      	ldr	r0, [sp, #12]
 8005cc2:	f001 ff32 	bl	8007b2a <__ssprint_r>
 8005cc6:	2800      	cmp	r0, #0
 8005cc8:	f040 8236 	bne.w	8006138 <_svfprintf_r+0x13d8>
 8005ccc:	ac29      	add	r4, sp, #164	; 0xa4
 8005cce:	9b04      	ldr	r3, [sp, #16]
 8005cd0:	6063      	str	r3, [r4, #4]
 8005cd2:	9a04      	ldr	r2, [sp, #16]
 8005cd4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005cd6:	f8c4 b000 	str.w	fp, [r4]
 8005cda:	4413      	add	r3, r2
 8005cdc:	9328      	str	r3, [sp, #160]	; 0xa0
 8005cde:	e5df      	b.n	80058a0 <_svfprintf_r+0xb40>
 8005ce0:	aa26      	add	r2, sp, #152	; 0x98
 8005ce2:	4641      	mov	r1, r8
 8005ce4:	9803      	ldr	r0, [sp, #12]
 8005ce6:	f001 ff20 	bl	8007b2a <__ssprint_r>
 8005cea:	2800      	cmp	r0, #0
 8005cec:	f040 8224 	bne.w	8006138 <_svfprintf_r+0x13d8>
 8005cf0:	ac29      	add	r4, sp, #164	; 0xa4
 8005cf2:	e7b7      	b.n	8005c64 <_svfprintf_r+0xf04>
 8005cf4:	aa26      	add	r2, sp, #152	; 0x98
 8005cf6:	4641      	mov	r1, r8
 8005cf8:	9803      	ldr	r0, [sp, #12]
 8005cfa:	f001 ff16 	bl	8007b2a <__ssprint_r>
 8005cfe:	2800      	cmp	r0, #0
 8005d00:	f040 821a 	bne.w	8006138 <_svfprintf_r+0x13d8>
 8005d04:	ac29      	add	r4, sp, #164	; 0xa4
 8005d06:	e7c3      	b.n	8005c90 <_svfprintf_r+0xf30>
 8005d08:	3110      	adds	r1, #16
 8005d0a:	2a07      	cmp	r2, #7
 8005d0c:	605f      	str	r7, [r3, #4]
 8005d0e:	e9cd 2127 	strd	r2, r1, [sp, #156]	; 0x9c
 8005d12:	dd08      	ble.n	8005d26 <_svfprintf_r+0xfc6>
 8005d14:	aa26      	add	r2, sp, #152	; 0x98
 8005d16:	4641      	mov	r1, r8
 8005d18:	9803      	ldr	r0, [sp, #12]
 8005d1a:	f001 ff06 	bl	8007b2a <__ssprint_r>
 8005d1e:	2800      	cmp	r0, #0
 8005d20:	f040 820a 	bne.w	8006138 <_svfprintf_r+0x13d8>
 8005d24:	ac29      	add	r4, sp, #164	; 0xa4
 8005d26:	3d10      	subs	r5, #16
 8005d28:	4623      	mov	r3, r4
 8005d2a:	e7b8      	b.n	8005c9e <_svfprintf_r+0xf3e>
 8005d2c:	080082c2 	.word	0x080082c2
 8005d30:	080082d4 	.word	0x080082d4
 8005d34:	9b04      	ldr	r3, [sp, #16]
 8005d36:	42b3      	cmp	r3, r6
 8005d38:	bfa8      	it	ge
 8005d3a:	4633      	movge	r3, r6
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	461d      	mov	r5, r3
 8005d40:	dd0b      	ble.n	8005d5a <_svfprintf_r+0xffa>
 8005d42:	e9c4 b300 	strd	fp, r3, [r4]
 8005d46:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005d48:	442b      	add	r3, r5
 8005d4a:	9328      	str	r3, [sp, #160]	; 0xa0
 8005d4c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8005d4e:	3301      	adds	r3, #1
 8005d50:	2b07      	cmp	r3, #7
 8005d52:	9327      	str	r3, [sp, #156]	; 0x9c
 8005d54:	f300 8086 	bgt.w	8005e64 <_svfprintf_r+0x1104>
 8005d58:	3408      	adds	r4, #8
 8005d5a:	2d00      	cmp	r5, #0
 8005d5c:	bfac      	ite	ge
 8005d5e:	1b75      	subge	r5, r6, r5
 8005d60:	4635      	movlt	r5, r6
 8005d62:	2d00      	cmp	r5, #0
 8005d64:	dd19      	ble.n	8005d9a <_svfprintf_r+0x103a>
 8005d66:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8005d6a:	4896      	ldr	r0, [pc, #600]	; (8005fc4 <_svfprintf_r+0x1264>)
 8005d6c:	6020      	str	r0, [r4, #0]
 8005d6e:	2d10      	cmp	r5, #16
 8005d70:	f103 0301 	add.w	r3, r3, #1
 8005d74:	f104 0108 	add.w	r1, r4, #8
 8005d78:	dc7e      	bgt.n	8005e78 <_svfprintf_r+0x1118>
 8005d7a:	6065      	str	r5, [r4, #4]
 8005d7c:	2b07      	cmp	r3, #7
 8005d7e:	4415      	add	r5, r2
 8005d80:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8005d84:	f340 808b 	ble.w	8005e9e <_svfprintf_r+0x113e>
 8005d88:	aa26      	add	r2, sp, #152	; 0x98
 8005d8a:	4641      	mov	r1, r8
 8005d8c:	9803      	ldr	r0, [sp, #12]
 8005d8e:	f001 fecc 	bl	8007b2a <__ssprint_r>
 8005d92:	2800      	cmp	r0, #0
 8005d94:	f040 81d0 	bne.w	8006138 <_svfprintf_r+0x13d8>
 8005d98:	ac29      	add	r4, sp, #164	; 0xa4
 8005d9a:	f41a 6f80 	tst.w	sl, #1024	; 0x400
 8005d9e:	445e      	add	r6, fp
 8005da0:	d009      	beq.n	8005db6 <_svfprintf_r+0x1056>
 8005da2:	9b07      	ldr	r3, [sp, #28]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d17c      	bne.n	8005ea2 <_svfprintf_r+0x1142>
 8005da8:	2f00      	cmp	r7, #0
 8005daa:	d17c      	bne.n	8005ea6 <_svfprintf_r+0x1146>
 8005dac:	9b04      	ldr	r3, [sp, #16]
 8005dae:	445b      	add	r3, fp
 8005db0:	429e      	cmp	r6, r3
 8005db2:	bf28      	it	cs
 8005db4:	461e      	movcs	r6, r3
 8005db6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005db8:	9a04      	ldr	r2, [sp, #16]
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	db02      	blt.n	8005dc4 <_svfprintf_r+0x1064>
 8005dbe:	f01a 0f01 	tst.w	sl, #1
 8005dc2:	d00e      	beq.n	8005de2 <_svfprintf_r+0x1082>
 8005dc4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005dc6:	6023      	str	r3, [r4, #0]
 8005dc8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005dca:	6063      	str	r3, [r4, #4]
 8005dcc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005dce:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005dd0:	4413      	add	r3, r2
 8005dd2:	9328      	str	r3, [sp, #160]	; 0xa0
 8005dd4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	2b07      	cmp	r3, #7
 8005dda:	9327      	str	r3, [sp, #156]	; 0x9c
 8005ddc:	f300 80dd 	bgt.w	8005f9a <_svfprintf_r+0x123a>
 8005de0:	3408      	adds	r4, #8
 8005de2:	9b04      	ldr	r3, [sp, #16]
 8005de4:	9a04      	ldr	r2, [sp, #16]
 8005de6:	eb0b 0503 	add.w	r5, fp, r3
 8005dea:	1bab      	subs	r3, r5, r6
 8005dec:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8005dee:	1b55      	subs	r5, r2, r5
 8005df0:	429d      	cmp	r5, r3
 8005df2:	bfa8      	it	ge
 8005df4:	461d      	movge	r5, r3
 8005df6:	2d00      	cmp	r5, #0
 8005df8:	dd0b      	ble.n	8005e12 <_svfprintf_r+0x10b2>
 8005dfa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005dfc:	442b      	add	r3, r5
 8005dfe:	9328      	str	r3, [sp, #160]	; 0xa0
 8005e00:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8005e02:	3301      	adds	r3, #1
 8005e04:	2b07      	cmp	r3, #7
 8005e06:	e9c4 6500 	strd	r6, r5, [r4]
 8005e0a:	9327      	str	r3, [sp, #156]	; 0x9c
 8005e0c:	f300 80cf 	bgt.w	8005fae <_svfprintf_r+0x124e>
 8005e10:	3408      	adds	r4, #8
 8005e12:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005e14:	9a04      	ldr	r2, [sp, #16]
 8005e16:	2d00      	cmp	r5, #0
 8005e18:	eba2 0303 	sub.w	r3, r2, r3
 8005e1c:	bfac      	ite	ge
 8005e1e:	1b5d      	subge	r5, r3, r5
 8005e20:	461d      	movlt	r5, r3
 8005e22:	2d00      	cmp	r5, #0
 8005e24:	f77f ad43 	ble.w	80058ae <_svfprintf_r+0xb4e>
 8005e28:	4e66      	ldr	r6, [pc, #408]	; (8005fc4 <_svfprintf_r+0x1264>)
 8005e2a:	2710      	movs	r7, #16
 8005e2c:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8005e30:	2d10      	cmp	r5, #16
 8005e32:	f103 0301 	add.w	r3, r3, #1
 8005e36:	f104 0108 	add.w	r1, r4, #8
 8005e3a:	6026      	str	r6, [r4, #0]
 8005e3c:	f77f aecb 	ble.w	8005bd6 <_svfprintf_r+0xe76>
 8005e40:	3210      	adds	r2, #16
 8005e42:	2b07      	cmp	r3, #7
 8005e44:	6067      	str	r7, [r4, #4]
 8005e46:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8005e4a:	dd08      	ble.n	8005e5e <_svfprintf_r+0x10fe>
 8005e4c:	aa26      	add	r2, sp, #152	; 0x98
 8005e4e:	4641      	mov	r1, r8
 8005e50:	9803      	ldr	r0, [sp, #12]
 8005e52:	f001 fe6a 	bl	8007b2a <__ssprint_r>
 8005e56:	2800      	cmp	r0, #0
 8005e58:	f040 816e 	bne.w	8006138 <_svfprintf_r+0x13d8>
 8005e5c:	a929      	add	r1, sp, #164	; 0xa4
 8005e5e:	3d10      	subs	r5, #16
 8005e60:	460c      	mov	r4, r1
 8005e62:	e7e3      	b.n	8005e2c <_svfprintf_r+0x10cc>
 8005e64:	aa26      	add	r2, sp, #152	; 0x98
 8005e66:	4641      	mov	r1, r8
 8005e68:	9803      	ldr	r0, [sp, #12]
 8005e6a:	f001 fe5e 	bl	8007b2a <__ssprint_r>
 8005e6e:	2800      	cmp	r0, #0
 8005e70:	f040 8162 	bne.w	8006138 <_svfprintf_r+0x13d8>
 8005e74:	ac29      	add	r4, sp, #164	; 0xa4
 8005e76:	e770      	b.n	8005d5a <_svfprintf_r+0xffa>
 8005e78:	2010      	movs	r0, #16
 8005e7a:	4402      	add	r2, r0
 8005e7c:	2b07      	cmp	r3, #7
 8005e7e:	6060      	str	r0, [r4, #4]
 8005e80:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8005e84:	dd08      	ble.n	8005e98 <_svfprintf_r+0x1138>
 8005e86:	aa26      	add	r2, sp, #152	; 0x98
 8005e88:	4641      	mov	r1, r8
 8005e8a:	9803      	ldr	r0, [sp, #12]
 8005e8c:	f001 fe4d 	bl	8007b2a <__ssprint_r>
 8005e90:	2800      	cmp	r0, #0
 8005e92:	f040 8151 	bne.w	8006138 <_svfprintf_r+0x13d8>
 8005e96:	a929      	add	r1, sp, #164	; 0xa4
 8005e98:	3d10      	subs	r5, #16
 8005e9a:	460c      	mov	r4, r1
 8005e9c:	e763      	b.n	8005d66 <_svfprintf_r+0x1006>
 8005e9e:	460c      	mov	r4, r1
 8005ea0:	e77b      	b.n	8005d9a <_svfprintf_r+0x103a>
 8005ea2:	2f00      	cmp	r7, #0
 8005ea4:	d049      	beq.n	8005f3a <_svfprintf_r+0x11da>
 8005ea6:	3f01      	subs	r7, #1
 8005ea8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005eaa:	6023      	str	r3, [r4, #0]
 8005eac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005eae:	6063      	str	r3, [r4, #4]
 8005eb0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005eb2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005eb4:	4413      	add	r3, r2
 8005eb6:	9328      	str	r3, [sp, #160]	; 0xa0
 8005eb8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8005eba:	3301      	adds	r3, #1
 8005ebc:	2b07      	cmp	r3, #7
 8005ebe:	9327      	str	r3, [sp, #156]	; 0x9c
 8005ec0:	dc42      	bgt.n	8005f48 <_svfprintf_r+0x11e8>
 8005ec2:	3408      	adds	r4, #8
 8005ec4:	9b04      	ldr	r3, [sp, #16]
 8005ec6:	445b      	add	r3, fp
 8005ec8:	1b9a      	subs	r2, r3, r6
 8005eca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	bfa8      	it	ge
 8005ed2:	4613      	movge	r3, r2
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	461d      	mov	r5, r3
 8005ed8:	dd0a      	ble.n	8005ef0 <_svfprintf_r+0x1190>
 8005eda:	e9c4 6300 	strd	r6, r3, [r4]
 8005ede:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005ee0:	442b      	add	r3, r5
 8005ee2:	9328      	str	r3, [sp, #160]	; 0xa0
 8005ee4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8005ee6:	3301      	adds	r3, #1
 8005ee8:	2b07      	cmp	r3, #7
 8005eea:	9327      	str	r3, [sp, #156]	; 0x9c
 8005eec:	dc36      	bgt.n	8005f5c <_svfprintf_r+0x11fc>
 8005eee:	3408      	adds	r4, #8
 8005ef0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	2d00      	cmp	r5, #0
 8005ef6:	bfac      	ite	ge
 8005ef8:	1b5d      	subge	r5, r3, r5
 8005efa:	461d      	movlt	r5, r3
 8005efc:	2d00      	cmp	r5, #0
 8005efe:	dd18      	ble.n	8005f32 <_svfprintf_r+0x11d2>
 8005f00:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 8005f04:	482f      	ldr	r0, [pc, #188]	; (8005fc4 <_svfprintf_r+0x1264>)
 8005f06:	6020      	str	r0, [r4, #0]
 8005f08:	2d10      	cmp	r5, #16
 8005f0a:	f102 0201 	add.w	r2, r2, #1
 8005f0e:	f104 0108 	add.w	r1, r4, #8
 8005f12:	dc2d      	bgt.n	8005f70 <_svfprintf_r+0x1210>
 8005f14:	442b      	add	r3, r5
 8005f16:	2a07      	cmp	r2, #7
 8005f18:	6065      	str	r5, [r4, #4]
 8005f1a:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8005f1e:	dd3a      	ble.n	8005f96 <_svfprintf_r+0x1236>
 8005f20:	aa26      	add	r2, sp, #152	; 0x98
 8005f22:	4641      	mov	r1, r8
 8005f24:	9803      	ldr	r0, [sp, #12]
 8005f26:	f001 fe00 	bl	8007b2a <__ssprint_r>
 8005f2a:	2800      	cmp	r0, #0
 8005f2c:	f040 8104 	bne.w	8006138 <_svfprintf_r+0x13d8>
 8005f30:	ac29      	add	r4, sp, #164	; 0xa4
 8005f32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	441e      	add	r6, r3
 8005f38:	e733      	b.n	8005da2 <_svfprintf_r+0x1042>
 8005f3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f3c:	3b01      	subs	r3, #1
 8005f3e:	9309      	str	r3, [sp, #36]	; 0x24
 8005f40:	9b07      	ldr	r3, [sp, #28]
 8005f42:	3b01      	subs	r3, #1
 8005f44:	9307      	str	r3, [sp, #28]
 8005f46:	e7af      	b.n	8005ea8 <_svfprintf_r+0x1148>
 8005f48:	aa26      	add	r2, sp, #152	; 0x98
 8005f4a:	4641      	mov	r1, r8
 8005f4c:	9803      	ldr	r0, [sp, #12]
 8005f4e:	f001 fdec 	bl	8007b2a <__ssprint_r>
 8005f52:	2800      	cmp	r0, #0
 8005f54:	f040 80f0 	bne.w	8006138 <_svfprintf_r+0x13d8>
 8005f58:	ac29      	add	r4, sp, #164	; 0xa4
 8005f5a:	e7b3      	b.n	8005ec4 <_svfprintf_r+0x1164>
 8005f5c:	aa26      	add	r2, sp, #152	; 0x98
 8005f5e:	4641      	mov	r1, r8
 8005f60:	9803      	ldr	r0, [sp, #12]
 8005f62:	f001 fde2 	bl	8007b2a <__ssprint_r>
 8005f66:	2800      	cmp	r0, #0
 8005f68:	f040 80e6 	bne.w	8006138 <_svfprintf_r+0x13d8>
 8005f6c:	ac29      	add	r4, sp, #164	; 0xa4
 8005f6e:	e7bf      	b.n	8005ef0 <_svfprintf_r+0x1190>
 8005f70:	2010      	movs	r0, #16
 8005f72:	4403      	add	r3, r0
 8005f74:	2a07      	cmp	r2, #7
 8005f76:	6060      	str	r0, [r4, #4]
 8005f78:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8005f7c:	dd08      	ble.n	8005f90 <_svfprintf_r+0x1230>
 8005f7e:	aa26      	add	r2, sp, #152	; 0x98
 8005f80:	4641      	mov	r1, r8
 8005f82:	9803      	ldr	r0, [sp, #12]
 8005f84:	f001 fdd1 	bl	8007b2a <__ssprint_r>
 8005f88:	2800      	cmp	r0, #0
 8005f8a:	f040 80d5 	bne.w	8006138 <_svfprintf_r+0x13d8>
 8005f8e:	a929      	add	r1, sp, #164	; 0xa4
 8005f90:	3d10      	subs	r5, #16
 8005f92:	460c      	mov	r4, r1
 8005f94:	e7b4      	b.n	8005f00 <_svfprintf_r+0x11a0>
 8005f96:	460c      	mov	r4, r1
 8005f98:	e7cb      	b.n	8005f32 <_svfprintf_r+0x11d2>
 8005f9a:	aa26      	add	r2, sp, #152	; 0x98
 8005f9c:	4641      	mov	r1, r8
 8005f9e:	9803      	ldr	r0, [sp, #12]
 8005fa0:	f001 fdc3 	bl	8007b2a <__ssprint_r>
 8005fa4:	2800      	cmp	r0, #0
 8005fa6:	f040 80c7 	bne.w	8006138 <_svfprintf_r+0x13d8>
 8005faa:	ac29      	add	r4, sp, #164	; 0xa4
 8005fac:	e719      	b.n	8005de2 <_svfprintf_r+0x1082>
 8005fae:	aa26      	add	r2, sp, #152	; 0x98
 8005fb0:	4641      	mov	r1, r8
 8005fb2:	9803      	ldr	r0, [sp, #12]
 8005fb4:	f001 fdb9 	bl	8007b2a <__ssprint_r>
 8005fb8:	2800      	cmp	r0, #0
 8005fba:	f040 80bd 	bne.w	8006138 <_svfprintf_r+0x13d8>
 8005fbe:	ac29      	add	r4, sp, #164	; 0xa4
 8005fc0:	e727      	b.n	8005e12 <_svfprintf_r+0x10b2>
 8005fc2:	bf00      	nop
 8005fc4:	080082d4 	.word	0x080082d4
 8005fc8:	9a04      	ldr	r2, [sp, #16]
 8005fca:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005fcc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8005fce:	2a01      	cmp	r2, #1
 8005fd0:	f105 0501 	add.w	r5, r5, #1
 8005fd4:	f103 0301 	add.w	r3, r3, #1
 8005fd8:	f104 0608 	add.w	r6, r4, #8
 8005fdc:	dc02      	bgt.n	8005fe4 <_svfprintf_r+0x1284>
 8005fde:	f01a 0f01 	tst.w	sl, #1
 8005fe2:	d07d      	beq.n	80060e0 <_svfprintf_r+0x1380>
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	2b07      	cmp	r3, #7
 8005fe8:	f8c4 b000 	str.w	fp, [r4]
 8005fec:	6062      	str	r2, [r4, #4]
 8005fee:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8005ff2:	dd08      	ble.n	8006006 <_svfprintf_r+0x12a6>
 8005ff4:	aa26      	add	r2, sp, #152	; 0x98
 8005ff6:	4641      	mov	r1, r8
 8005ff8:	9803      	ldr	r0, [sp, #12]
 8005ffa:	f001 fd96 	bl	8007b2a <__ssprint_r>
 8005ffe:	2800      	cmp	r0, #0
 8006000:	f040 809a 	bne.w	8006138 <_svfprintf_r+0x13d8>
 8006004:	ae29      	add	r6, sp, #164	; 0xa4
 8006006:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006008:	6033      	str	r3, [r6, #0]
 800600a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800600c:	6073      	str	r3, [r6, #4]
 800600e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006010:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006012:	4413      	add	r3, r2
 8006014:	9328      	str	r3, [sp, #160]	; 0xa0
 8006016:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8006018:	3301      	adds	r3, #1
 800601a:	2b07      	cmp	r3, #7
 800601c:	9327      	str	r3, [sp, #156]	; 0x9c
 800601e:	dc31      	bgt.n	8006084 <_svfprintf_r+0x1324>
 8006020:	3608      	adds	r6, #8
 8006022:	9b04      	ldr	r3, [sp, #16]
 8006024:	2200      	movs	r2, #0
 8006026:	1e5c      	subs	r4, r3, #1
 8006028:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800602c:	2300      	movs	r3, #0
 800602e:	f7fa fd5b 	bl	8000ae8 <__aeabi_dcmpeq>
 8006032:	2800      	cmp	r0, #0
 8006034:	d12f      	bne.n	8006096 <_svfprintf_r+0x1336>
 8006036:	f10b 0301 	add.w	r3, fp, #1
 800603a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800603c:	9904      	ldr	r1, [sp, #16]
 800603e:	e9c6 3400 	strd	r3, r4, [r6]
 8006042:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006044:	3201      	adds	r2, #1
 8006046:	3b01      	subs	r3, #1
 8006048:	440b      	add	r3, r1
 800604a:	2a07      	cmp	r2, #7
 800604c:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8006050:	dd4f      	ble.n	80060f2 <_svfprintf_r+0x1392>
 8006052:	aa26      	add	r2, sp, #152	; 0x98
 8006054:	4641      	mov	r1, r8
 8006056:	9803      	ldr	r0, [sp, #12]
 8006058:	f001 fd67 	bl	8007b2a <__ssprint_r>
 800605c:	2800      	cmp	r0, #0
 800605e:	d16b      	bne.n	8006138 <_svfprintf_r+0x13d8>
 8006060:	ae29      	add	r6, sp, #164	; 0xa4
 8006062:	ab22      	add	r3, sp, #136	; 0x88
 8006064:	6033      	str	r3, [r6, #0]
 8006066:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006068:	6073      	str	r3, [r6, #4]
 800606a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800606c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800606e:	4413      	add	r3, r2
 8006070:	9328      	str	r3, [sp, #160]	; 0xa0
 8006072:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8006074:	3301      	adds	r3, #1
 8006076:	2b07      	cmp	r3, #7
 8006078:	9327      	str	r3, [sp, #156]	; 0x9c
 800607a:	f73f adb3 	bgt.w	8005be4 <_svfprintf_r+0xe84>
 800607e:	f106 0408 	add.w	r4, r6, #8
 8006082:	e414      	b.n	80058ae <_svfprintf_r+0xb4e>
 8006084:	aa26      	add	r2, sp, #152	; 0x98
 8006086:	4641      	mov	r1, r8
 8006088:	9803      	ldr	r0, [sp, #12]
 800608a:	f001 fd4e 	bl	8007b2a <__ssprint_r>
 800608e:	2800      	cmp	r0, #0
 8006090:	d152      	bne.n	8006138 <_svfprintf_r+0x13d8>
 8006092:	ae29      	add	r6, sp, #164	; 0xa4
 8006094:	e7c5      	b.n	8006022 <_svfprintf_r+0x12c2>
 8006096:	2c00      	cmp	r4, #0
 8006098:	dde3      	ble.n	8006062 <_svfprintf_r+0x1302>
 800609a:	4d3e      	ldr	r5, [pc, #248]	; (8006194 <_svfprintf_r+0x1434>)
 800609c:	2710      	movs	r7, #16
 800609e:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 80060a2:	2c10      	cmp	r4, #16
 80060a4:	f103 0301 	add.w	r3, r3, #1
 80060a8:	f106 0108 	add.w	r1, r6, #8
 80060ac:	6035      	str	r5, [r6, #0]
 80060ae:	dc07      	bgt.n	80060c0 <_svfprintf_r+0x1360>
 80060b0:	6074      	str	r4, [r6, #4]
 80060b2:	2b07      	cmp	r3, #7
 80060b4:	4414      	add	r4, r2
 80060b6:	e9cd 3427 	strd	r3, r4, [sp, #156]	; 0x9c
 80060ba:	dcca      	bgt.n	8006052 <_svfprintf_r+0x12f2>
 80060bc:	460e      	mov	r6, r1
 80060be:	e7d0      	b.n	8006062 <_svfprintf_r+0x1302>
 80060c0:	3210      	adds	r2, #16
 80060c2:	2b07      	cmp	r3, #7
 80060c4:	6077      	str	r7, [r6, #4]
 80060c6:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 80060ca:	dd06      	ble.n	80060da <_svfprintf_r+0x137a>
 80060cc:	aa26      	add	r2, sp, #152	; 0x98
 80060ce:	4641      	mov	r1, r8
 80060d0:	9803      	ldr	r0, [sp, #12]
 80060d2:	f001 fd2a 	bl	8007b2a <__ssprint_r>
 80060d6:	bb78      	cbnz	r0, 8006138 <_svfprintf_r+0x13d8>
 80060d8:	a929      	add	r1, sp, #164	; 0xa4
 80060da:	3c10      	subs	r4, #16
 80060dc:	460e      	mov	r6, r1
 80060de:	e7de      	b.n	800609e <_svfprintf_r+0x133e>
 80060e0:	2201      	movs	r2, #1
 80060e2:	2b07      	cmp	r3, #7
 80060e4:	f8c4 b000 	str.w	fp, [r4]
 80060e8:	6062      	str	r2, [r4, #4]
 80060ea:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 80060ee:	ddb8      	ble.n	8006062 <_svfprintf_r+0x1302>
 80060f0:	e7af      	b.n	8006052 <_svfprintf_r+0x12f2>
 80060f2:	3608      	adds	r6, #8
 80060f4:	e7b5      	b.n	8006062 <_svfprintf_r+0x1302>
 80060f6:	460c      	mov	r4, r1
 80060f8:	f7ff bbd9 	b.w	80058ae <_svfprintf_r+0xb4e>
 80060fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80060fe:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006100:	1a9d      	subs	r5, r3, r2
 8006102:	2d00      	cmp	r5, #0
 8006104:	f77f abd7 	ble.w	80058b6 <_svfprintf_r+0xb56>
 8006108:	4e23      	ldr	r6, [pc, #140]	; (8006198 <_svfprintf_r+0x1438>)
 800610a:	2710      	movs	r7, #16
 800610c:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8006110:	2d10      	cmp	r5, #16
 8006112:	f103 0301 	add.w	r3, r3, #1
 8006116:	6026      	str	r6, [r4, #0]
 8006118:	dc18      	bgt.n	800614c <_svfprintf_r+0x13ec>
 800611a:	6065      	str	r5, [r4, #4]
 800611c:	2b07      	cmp	r3, #7
 800611e:	4415      	add	r5, r2
 8006120:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8006124:	f77f abc7 	ble.w	80058b6 <_svfprintf_r+0xb56>
 8006128:	aa26      	add	r2, sp, #152	; 0x98
 800612a:	4641      	mov	r1, r8
 800612c:	9803      	ldr	r0, [sp, #12]
 800612e:	f001 fcfc 	bl	8007b2a <__ssprint_r>
 8006132:	2800      	cmp	r0, #0
 8006134:	f43f abbf 	beq.w	80058b6 <_svfprintf_r+0xb56>
 8006138:	f1b9 0f00 	cmp.w	r9, #0
 800613c:	f43f a8a8 	beq.w	8005290 <_svfprintf_r+0x530>
 8006140:	4649      	mov	r1, r9
 8006142:	9803      	ldr	r0, [sp, #12]
 8006144:	f000 fed8 	bl	8006ef8 <_free_r>
 8006148:	f7ff b8a2 	b.w	8005290 <_svfprintf_r+0x530>
 800614c:	3210      	adds	r2, #16
 800614e:	2b07      	cmp	r3, #7
 8006150:	6067      	str	r7, [r4, #4]
 8006152:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8006156:	dc02      	bgt.n	800615e <_svfprintf_r+0x13fe>
 8006158:	3408      	adds	r4, #8
 800615a:	3d10      	subs	r5, #16
 800615c:	e7d6      	b.n	800610c <_svfprintf_r+0x13ac>
 800615e:	aa26      	add	r2, sp, #152	; 0x98
 8006160:	4641      	mov	r1, r8
 8006162:	9803      	ldr	r0, [sp, #12]
 8006164:	f001 fce1 	bl	8007b2a <__ssprint_r>
 8006168:	2800      	cmp	r0, #0
 800616a:	d1e5      	bne.n	8006138 <_svfprintf_r+0x13d8>
 800616c:	ac29      	add	r4, sp, #164	; 0xa4
 800616e:	e7f4      	b.n	800615a <_svfprintf_r+0x13fa>
 8006170:	4649      	mov	r1, r9
 8006172:	9803      	ldr	r0, [sp, #12]
 8006174:	f000 fec0 	bl	8006ef8 <_free_r>
 8006178:	f7ff bbb5 	b.w	80058e6 <_svfprintf_r+0xb86>
 800617c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800617e:	2b00      	cmp	r3, #0
 8006180:	f43f a886 	beq.w	8005290 <_svfprintf_r+0x530>
 8006184:	aa26      	add	r2, sp, #152	; 0x98
 8006186:	4641      	mov	r1, r8
 8006188:	9803      	ldr	r0, [sp, #12]
 800618a:	f001 fcce 	bl	8007b2a <__ssprint_r>
 800618e:	f7ff b87f 	b.w	8005290 <_svfprintf_r+0x530>
 8006192:	bf00      	nop
 8006194:	080082d4 	.word	0x080082d4
 8006198:	080082c4 	.word	0x080082c4

0800619c <register_fini>:
 800619c:	4b02      	ldr	r3, [pc, #8]	; (80061a8 <register_fini+0xc>)
 800619e:	b113      	cbz	r3, 80061a6 <register_fini+0xa>
 80061a0:	4802      	ldr	r0, [pc, #8]	; (80061ac <register_fini+0x10>)
 80061a2:	f000 b805 	b.w	80061b0 <atexit>
 80061a6:	4770      	bx	lr
 80061a8:	00000000 	.word	0x00000000
 80061ac:	08006e29 	.word	0x08006e29

080061b0 <atexit>:
 80061b0:	2300      	movs	r3, #0
 80061b2:	4601      	mov	r1, r0
 80061b4:	461a      	mov	r2, r3
 80061b6:	4618      	mov	r0, r3
 80061b8:	f001 bd3c 	b.w	8007c34 <__register_exitproc>

080061bc <quorem>:
 80061bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061c0:	6903      	ldr	r3, [r0, #16]
 80061c2:	690c      	ldr	r4, [r1, #16]
 80061c4:	42a3      	cmp	r3, r4
 80061c6:	4680      	mov	r8, r0
 80061c8:	f2c0 8082 	blt.w	80062d0 <quorem+0x114>
 80061cc:	3c01      	subs	r4, #1
 80061ce:	f101 0714 	add.w	r7, r1, #20
 80061d2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80061d6:	f100 0614 	add.w	r6, r0, #20
 80061da:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80061de:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80061e2:	eb06 030c 	add.w	r3, r6, ip
 80061e6:	3501      	adds	r5, #1
 80061e8:	eb07 090c 	add.w	r9, r7, ip
 80061ec:	9301      	str	r3, [sp, #4]
 80061ee:	fbb0 f5f5 	udiv	r5, r0, r5
 80061f2:	b395      	cbz	r5, 800625a <quorem+0x9e>
 80061f4:	f04f 0a00 	mov.w	sl, #0
 80061f8:	4638      	mov	r0, r7
 80061fa:	46b6      	mov	lr, r6
 80061fc:	46d3      	mov	fp, sl
 80061fe:	f850 2b04 	ldr.w	r2, [r0], #4
 8006202:	b293      	uxth	r3, r2
 8006204:	fb05 a303 	mla	r3, r5, r3, sl
 8006208:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800620c:	b29b      	uxth	r3, r3
 800620e:	ebab 0303 	sub.w	r3, fp, r3
 8006212:	0c12      	lsrs	r2, r2, #16
 8006214:	f8de b000 	ldr.w	fp, [lr]
 8006218:	fb05 a202 	mla	r2, r5, r2, sl
 800621c:	fa13 f38b 	uxtah	r3, r3, fp
 8006220:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006224:	fa1f fb82 	uxth.w	fp, r2
 8006228:	f8de 2000 	ldr.w	r2, [lr]
 800622c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006230:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006234:	b29b      	uxth	r3, r3
 8006236:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800623a:	4581      	cmp	r9, r0
 800623c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006240:	f84e 3b04 	str.w	r3, [lr], #4
 8006244:	d2db      	bcs.n	80061fe <quorem+0x42>
 8006246:	f856 300c 	ldr.w	r3, [r6, ip]
 800624a:	b933      	cbnz	r3, 800625a <quorem+0x9e>
 800624c:	9b01      	ldr	r3, [sp, #4]
 800624e:	3b04      	subs	r3, #4
 8006250:	429e      	cmp	r6, r3
 8006252:	461a      	mov	r2, r3
 8006254:	d330      	bcc.n	80062b8 <quorem+0xfc>
 8006256:	f8c8 4010 	str.w	r4, [r8, #16]
 800625a:	4640      	mov	r0, r8
 800625c:	f001 fb44 	bl	80078e8 <__mcmp>
 8006260:	2800      	cmp	r0, #0
 8006262:	db25      	blt.n	80062b0 <quorem+0xf4>
 8006264:	3501      	adds	r5, #1
 8006266:	4630      	mov	r0, r6
 8006268:	f04f 0c00 	mov.w	ip, #0
 800626c:	f857 2b04 	ldr.w	r2, [r7], #4
 8006270:	f8d0 e000 	ldr.w	lr, [r0]
 8006274:	b293      	uxth	r3, r2
 8006276:	ebac 0303 	sub.w	r3, ip, r3
 800627a:	0c12      	lsrs	r2, r2, #16
 800627c:	fa13 f38e 	uxtah	r3, r3, lr
 8006280:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006284:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006288:	b29b      	uxth	r3, r3
 800628a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800628e:	45b9      	cmp	r9, r7
 8006290:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006294:	f840 3b04 	str.w	r3, [r0], #4
 8006298:	d2e8      	bcs.n	800626c <quorem+0xb0>
 800629a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800629e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80062a2:	b92a      	cbnz	r2, 80062b0 <quorem+0xf4>
 80062a4:	3b04      	subs	r3, #4
 80062a6:	429e      	cmp	r6, r3
 80062a8:	461a      	mov	r2, r3
 80062aa:	d30b      	bcc.n	80062c4 <quorem+0x108>
 80062ac:	f8c8 4010 	str.w	r4, [r8, #16]
 80062b0:	4628      	mov	r0, r5
 80062b2:	b003      	add	sp, #12
 80062b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062b8:	6812      	ldr	r2, [r2, #0]
 80062ba:	3b04      	subs	r3, #4
 80062bc:	2a00      	cmp	r2, #0
 80062be:	d1ca      	bne.n	8006256 <quorem+0x9a>
 80062c0:	3c01      	subs	r4, #1
 80062c2:	e7c5      	b.n	8006250 <quorem+0x94>
 80062c4:	6812      	ldr	r2, [r2, #0]
 80062c6:	3b04      	subs	r3, #4
 80062c8:	2a00      	cmp	r2, #0
 80062ca:	d1ef      	bne.n	80062ac <quorem+0xf0>
 80062cc:	3c01      	subs	r4, #1
 80062ce:	e7ea      	b.n	80062a6 <quorem+0xea>
 80062d0:	2000      	movs	r0, #0
 80062d2:	e7ee      	b.n	80062b2 <quorem+0xf6>
 80062d4:	0000      	movs	r0, r0
	...

080062d8 <_dtoa_r>:
 80062d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062dc:	b097      	sub	sp, #92	; 0x5c
 80062de:	ec57 6b10 	vmov	r6, r7, d0
 80062e2:	9106      	str	r1, [sp, #24]
 80062e4:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80062e6:	920b      	str	r2, [sp, #44]	; 0x2c
 80062e8:	4604      	mov	r4, r0
 80062ea:	9312      	str	r3, [sp, #72]	; 0x48
 80062ec:	9d20      	ldr	r5, [sp, #128]	; 0x80
 80062ee:	e9cd 6700 	strd	r6, r7, [sp]
 80062f2:	b141      	cbz	r1, 8006306 <_dtoa_r+0x2e>
 80062f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80062f6:	604a      	str	r2, [r1, #4]
 80062f8:	2301      	movs	r3, #1
 80062fa:	4093      	lsls	r3, r2
 80062fc:	608b      	str	r3, [r1, #8]
 80062fe:	f001 f92e 	bl	800755e <_Bfree>
 8006302:	2300      	movs	r3, #0
 8006304:	6423      	str	r3, [r4, #64]	; 0x40
 8006306:	1e3b      	subs	r3, r7, #0
 8006308:	bfb9      	ittee	lt
 800630a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800630e:	9301      	strlt	r3, [sp, #4]
 8006310:	2300      	movge	r3, #0
 8006312:	602b      	strge	r3, [r5, #0]
 8006314:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006318:	4baf      	ldr	r3, [pc, #700]	; (80065d8 <_dtoa_r+0x300>)
 800631a:	bfbc      	itt	lt
 800631c:	2201      	movlt	r2, #1
 800631e:	602a      	strlt	r2, [r5, #0]
 8006320:	ea33 0308 	bics.w	r3, r3, r8
 8006324:	d116      	bne.n	8006354 <_dtoa_r+0x7c>
 8006326:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006328:	f242 730f 	movw	r3, #9999	; 0x270f
 800632c:	6013      	str	r3, [r2, #0]
 800632e:	9b00      	ldr	r3, [sp, #0]
 8006330:	b923      	cbnz	r3, 800633c <_dtoa_r+0x64>
 8006332:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8006336:	2800      	cmp	r0, #0
 8006338:	f000 8543 	beq.w	8006dc2 <_dtoa_r+0xaea>
 800633c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800633e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80065ec <_dtoa_r+0x314>
 8006342:	b11b      	cbz	r3, 800634c <_dtoa_r+0x74>
 8006344:	f10b 0303 	add.w	r3, fp, #3
 8006348:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800634a:	6013      	str	r3, [r2, #0]
 800634c:	4658      	mov	r0, fp
 800634e:	b017      	add	sp, #92	; 0x5c
 8006350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006354:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006358:	2200      	movs	r2, #0
 800635a:	2300      	movs	r3, #0
 800635c:	4630      	mov	r0, r6
 800635e:	4639      	mov	r1, r7
 8006360:	f7fa fbc2 	bl	8000ae8 <__aeabi_dcmpeq>
 8006364:	4681      	mov	r9, r0
 8006366:	b160      	cbz	r0, 8006382 <_dtoa_r+0xaa>
 8006368:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800636a:	2301      	movs	r3, #1
 800636c:	6013      	str	r3, [r2, #0]
 800636e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006370:	2b00      	cmp	r3, #0
 8006372:	f000 8522 	beq.w	8006dba <_dtoa_r+0xae2>
 8006376:	4b99      	ldr	r3, [pc, #612]	; (80065dc <_dtoa_r+0x304>)
 8006378:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800637a:	f103 3bff 	add.w	fp, r3, #4294967295
 800637e:	6013      	str	r3, [r2, #0]
 8006380:	e7e4      	b.n	800634c <_dtoa_r+0x74>
 8006382:	aa14      	add	r2, sp, #80	; 0x50
 8006384:	a915      	add	r1, sp, #84	; 0x54
 8006386:	ec47 6b10 	vmov	d0, r6, r7
 800638a:	4620      	mov	r0, r4
 800638c:	f001 fb23 	bl	80079d6 <__d2b>
 8006390:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006394:	9004      	str	r0, [sp, #16]
 8006396:	2d00      	cmp	r5, #0
 8006398:	d07c      	beq.n	8006494 <_dtoa_r+0x1bc>
 800639a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800639e:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80063a2:	46b2      	mov	sl, r6
 80063a4:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80063a8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80063ac:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80063b0:	2200      	movs	r2, #0
 80063b2:	4b8b      	ldr	r3, [pc, #556]	; (80065e0 <_dtoa_r+0x308>)
 80063b4:	4650      	mov	r0, sl
 80063b6:	4659      	mov	r1, fp
 80063b8:	f7f9 ff76 	bl	80002a8 <__aeabi_dsub>
 80063bc:	a380      	add	r3, pc, #512	; (adr r3, 80065c0 <_dtoa_r+0x2e8>)
 80063be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c2:	f7fa f929 	bl	8000618 <__aeabi_dmul>
 80063c6:	a380      	add	r3, pc, #512	; (adr r3, 80065c8 <_dtoa_r+0x2f0>)
 80063c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063cc:	f7f9 ff6e 	bl	80002ac <__adddf3>
 80063d0:	4606      	mov	r6, r0
 80063d2:	4628      	mov	r0, r5
 80063d4:	460f      	mov	r7, r1
 80063d6:	f7fa f8b5 	bl	8000544 <__aeabi_i2d>
 80063da:	a37d      	add	r3, pc, #500	; (adr r3, 80065d0 <_dtoa_r+0x2f8>)
 80063dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e0:	f7fa f91a 	bl	8000618 <__aeabi_dmul>
 80063e4:	4602      	mov	r2, r0
 80063e6:	460b      	mov	r3, r1
 80063e8:	4630      	mov	r0, r6
 80063ea:	4639      	mov	r1, r7
 80063ec:	f7f9 ff5e 	bl	80002ac <__adddf3>
 80063f0:	4606      	mov	r6, r0
 80063f2:	460f      	mov	r7, r1
 80063f4:	f7fa fbc0 	bl	8000b78 <__aeabi_d2iz>
 80063f8:	2200      	movs	r2, #0
 80063fa:	4682      	mov	sl, r0
 80063fc:	2300      	movs	r3, #0
 80063fe:	4630      	mov	r0, r6
 8006400:	4639      	mov	r1, r7
 8006402:	f7fa fb7b 	bl	8000afc <__aeabi_dcmplt>
 8006406:	b148      	cbz	r0, 800641c <_dtoa_r+0x144>
 8006408:	4650      	mov	r0, sl
 800640a:	f7fa f89b 	bl	8000544 <__aeabi_i2d>
 800640e:	4632      	mov	r2, r6
 8006410:	463b      	mov	r3, r7
 8006412:	f7fa fb69 	bl	8000ae8 <__aeabi_dcmpeq>
 8006416:	b908      	cbnz	r0, 800641c <_dtoa_r+0x144>
 8006418:	f10a 3aff 	add.w	sl, sl, #4294967295
 800641c:	f1ba 0f16 	cmp.w	sl, #22
 8006420:	d859      	bhi.n	80064d6 <_dtoa_r+0x1fe>
 8006422:	4970      	ldr	r1, [pc, #448]	; (80065e4 <_dtoa_r+0x30c>)
 8006424:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006428:	e9dd 2300 	ldrd	r2, r3, [sp]
 800642c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006430:	f7fa fb82 	bl	8000b38 <__aeabi_dcmpgt>
 8006434:	2800      	cmp	r0, #0
 8006436:	d050      	beq.n	80064da <_dtoa_r+0x202>
 8006438:	f10a 3aff 	add.w	sl, sl, #4294967295
 800643c:	2300      	movs	r3, #0
 800643e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006440:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006442:	1b5d      	subs	r5, r3, r5
 8006444:	f1b5 0801 	subs.w	r8, r5, #1
 8006448:	bf49      	itett	mi
 800644a:	f1c5 0301 	rsbmi	r3, r5, #1
 800644e:	2300      	movpl	r3, #0
 8006450:	9305      	strmi	r3, [sp, #20]
 8006452:	f04f 0800 	movmi.w	r8, #0
 8006456:	bf58      	it	pl
 8006458:	9305      	strpl	r3, [sp, #20]
 800645a:	f1ba 0f00 	cmp.w	sl, #0
 800645e:	db3e      	blt.n	80064de <_dtoa_r+0x206>
 8006460:	2300      	movs	r3, #0
 8006462:	44d0      	add	r8, sl
 8006464:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8006468:	9307      	str	r3, [sp, #28]
 800646a:	9b06      	ldr	r3, [sp, #24]
 800646c:	2b09      	cmp	r3, #9
 800646e:	f200 808d 	bhi.w	800658c <_dtoa_r+0x2b4>
 8006472:	2b05      	cmp	r3, #5
 8006474:	bfc4      	itt	gt
 8006476:	3b04      	subgt	r3, #4
 8006478:	9306      	strgt	r3, [sp, #24]
 800647a:	9b06      	ldr	r3, [sp, #24]
 800647c:	f1a3 0302 	sub.w	r3, r3, #2
 8006480:	bfcc      	ite	gt
 8006482:	2500      	movgt	r5, #0
 8006484:	2501      	movle	r5, #1
 8006486:	2b03      	cmp	r3, #3
 8006488:	f200 808c 	bhi.w	80065a4 <_dtoa_r+0x2cc>
 800648c:	e8df f003 	tbb	[pc, r3]
 8006490:	6e317c7a 	.word	0x6e317c7a
 8006494:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8006498:	441d      	add	r5, r3
 800649a:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800649e:	2820      	cmp	r0, #32
 80064a0:	dd13      	ble.n	80064ca <_dtoa_r+0x1f2>
 80064a2:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80064a6:	9b00      	ldr	r3, [sp, #0]
 80064a8:	fa08 f800 	lsl.w	r8, r8, r0
 80064ac:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80064b0:	fa23 f000 	lsr.w	r0, r3, r0
 80064b4:	ea48 0000 	orr.w	r0, r8, r0
 80064b8:	f7fa f834 	bl	8000524 <__aeabi_ui2d>
 80064bc:	2301      	movs	r3, #1
 80064be:	4682      	mov	sl, r0
 80064c0:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80064c4:	3d01      	subs	r5, #1
 80064c6:	9313      	str	r3, [sp, #76]	; 0x4c
 80064c8:	e772      	b.n	80063b0 <_dtoa_r+0xd8>
 80064ca:	9b00      	ldr	r3, [sp, #0]
 80064cc:	f1c0 0020 	rsb	r0, r0, #32
 80064d0:	fa03 f000 	lsl.w	r0, r3, r0
 80064d4:	e7f0      	b.n	80064b8 <_dtoa_r+0x1e0>
 80064d6:	2301      	movs	r3, #1
 80064d8:	e7b1      	b.n	800643e <_dtoa_r+0x166>
 80064da:	900f      	str	r0, [sp, #60]	; 0x3c
 80064dc:	e7b0      	b.n	8006440 <_dtoa_r+0x168>
 80064de:	9b05      	ldr	r3, [sp, #20]
 80064e0:	eba3 030a 	sub.w	r3, r3, sl
 80064e4:	9305      	str	r3, [sp, #20]
 80064e6:	f1ca 0300 	rsb	r3, sl, #0
 80064ea:	9307      	str	r3, [sp, #28]
 80064ec:	2300      	movs	r3, #0
 80064ee:	930e      	str	r3, [sp, #56]	; 0x38
 80064f0:	e7bb      	b.n	800646a <_dtoa_r+0x192>
 80064f2:	2301      	movs	r3, #1
 80064f4:	930a      	str	r3, [sp, #40]	; 0x28
 80064f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	dd56      	ble.n	80065aa <_dtoa_r+0x2d2>
 80064fc:	9302      	str	r3, [sp, #8]
 80064fe:	4699      	mov	r9, r3
 8006500:	2200      	movs	r2, #0
 8006502:	6462      	str	r2, [r4, #68]	; 0x44
 8006504:	2204      	movs	r2, #4
 8006506:	f102 0014 	add.w	r0, r2, #20
 800650a:	4298      	cmp	r0, r3
 800650c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800650e:	d951      	bls.n	80065b4 <_dtoa_r+0x2dc>
 8006510:	4620      	mov	r0, r4
 8006512:	f000 ffff 	bl	8007514 <_Balloc>
 8006516:	f1b9 0f0e 	cmp.w	r9, #14
 800651a:	4683      	mov	fp, r0
 800651c:	6420      	str	r0, [r4, #64]	; 0x40
 800651e:	f200 80e8 	bhi.w	80066f2 <_dtoa_r+0x41a>
 8006522:	2d00      	cmp	r5, #0
 8006524:	f000 80e5 	beq.w	80066f2 <_dtoa_r+0x41a>
 8006528:	ed9d 7b00 	vldr	d7, [sp]
 800652c:	f1ba 0f00 	cmp.w	sl, #0
 8006530:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8006534:	dd76      	ble.n	8006624 <_dtoa_r+0x34c>
 8006536:	4a2b      	ldr	r2, [pc, #172]	; (80065e4 <_dtoa_r+0x30c>)
 8006538:	f00a 030f 	and.w	r3, sl, #15
 800653c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006540:	ed93 7b00 	vldr	d7, [r3]
 8006544:	ea4f 162a 	mov.w	r6, sl, asr #4
 8006548:	06f0      	lsls	r0, r6, #27
 800654a:	ed8d 7b08 	vstr	d7, [sp, #32]
 800654e:	d567      	bpl.n	8006620 <_dtoa_r+0x348>
 8006550:	4b25      	ldr	r3, [pc, #148]	; (80065e8 <_dtoa_r+0x310>)
 8006552:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006556:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800655a:	f7fa f987 	bl	800086c <__aeabi_ddiv>
 800655e:	e9cd 0100 	strd	r0, r1, [sp]
 8006562:	f006 060f 	and.w	r6, r6, #15
 8006566:	2503      	movs	r5, #3
 8006568:	4f1f      	ldr	r7, [pc, #124]	; (80065e8 <_dtoa_r+0x310>)
 800656a:	e04e      	b.n	800660a <_dtoa_r+0x332>
 800656c:	2301      	movs	r3, #1
 800656e:	930a      	str	r3, [sp, #40]	; 0x28
 8006570:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006572:	4453      	add	r3, sl
 8006574:	f103 0901 	add.w	r9, r3, #1
 8006578:	9302      	str	r3, [sp, #8]
 800657a:	464b      	mov	r3, r9
 800657c:	2b01      	cmp	r3, #1
 800657e:	bfb8      	it	lt
 8006580:	2301      	movlt	r3, #1
 8006582:	e7bd      	b.n	8006500 <_dtoa_r+0x228>
 8006584:	2300      	movs	r3, #0
 8006586:	e7b5      	b.n	80064f4 <_dtoa_r+0x21c>
 8006588:	2300      	movs	r3, #0
 800658a:	e7f0      	b.n	800656e <_dtoa_r+0x296>
 800658c:	2501      	movs	r5, #1
 800658e:	2300      	movs	r3, #0
 8006590:	9306      	str	r3, [sp, #24]
 8006592:	950a      	str	r5, [sp, #40]	; 0x28
 8006594:	f04f 33ff 	mov.w	r3, #4294967295
 8006598:	9302      	str	r3, [sp, #8]
 800659a:	4699      	mov	r9, r3
 800659c:	2200      	movs	r2, #0
 800659e:	2312      	movs	r3, #18
 80065a0:	920b      	str	r2, [sp, #44]	; 0x2c
 80065a2:	e7ad      	b.n	8006500 <_dtoa_r+0x228>
 80065a4:	2301      	movs	r3, #1
 80065a6:	930a      	str	r3, [sp, #40]	; 0x28
 80065a8:	e7f4      	b.n	8006594 <_dtoa_r+0x2bc>
 80065aa:	2301      	movs	r3, #1
 80065ac:	9302      	str	r3, [sp, #8]
 80065ae:	4699      	mov	r9, r3
 80065b0:	461a      	mov	r2, r3
 80065b2:	e7f5      	b.n	80065a0 <_dtoa_r+0x2c8>
 80065b4:	3101      	adds	r1, #1
 80065b6:	6461      	str	r1, [r4, #68]	; 0x44
 80065b8:	0052      	lsls	r2, r2, #1
 80065ba:	e7a4      	b.n	8006506 <_dtoa_r+0x22e>
 80065bc:	f3af 8000 	nop.w
 80065c0:	636f4361 	.word	0x636f4361
 80065c4:	3fd287a7 	.word	0x3fd287a7
 80065c8:	8b60c8b3 	.word	0x8b60c8b3
 80065cc:	3fc68a28 	.word	0x3fc68a28
 80065d0:	509f79fb 	.word	0x509f79fb
 80065d4:	3fd34413 	.word	0x3fd34413
 80065d8:	7ff00000 	.word	0x7ff00000
 80065dc:	080082c3 	.word	0x080082c3
 80065e0:	3ff80000 	.word	0x3ff80000
 80065e4:	08008320 	.word	0x08008320
 80065e8:	080082f8 	.word	0x080082f8
 80065ec:	080082ed 	.word	0x080082ed
 80065f0:	07f1      	lsls	r1, r6, #31
 80065f2:	d508      	bpl.n	8006606 <_dtoa_r+0x32e>
 80065f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80065f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065fc:	f7fa f80c 	bl	8000618 <__aeabi_dmul>
 8006600:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006604:	3501      	adds	r5, #1
 8006606:	1076      	asrs	r6, r6, #1
 8006608:	3708      	adds	r7, #8
 800660a:	2e00      	cmp	r6, #0
 800660c:	d1f0      	bne.n	80065f0 <_dtoa_r+0x318>
 800660e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006612:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006616:	f7fa f929 	bl	800086c <__aeabi_ddiv>
 800661a:	e9cd 0100 	strd	r0, r1, [sp]
 800661e:	e01a      	b.n	8006656 <_dtoa_r+0x37e>
 8006620:	2502      	movs	r5, #2
 8006622:	e7a1      	b.n	8006568 <_dtoa_r+0x290>
 8006624:	f000 80a0 	beq.w	8006768 <_dtoa_r+0x490>
 8006628:	f1ca 0600 	rsb	r6, sl, #0
 800662c:	4b9f      	ldr	r3, [pc, #636]	; (80068ac <_dtoa_r+0x5d4>)
 800662e:	4fa0      	ldr	r7, [pc, #640]	; (80068b0 <_dtoa_r+0x5d8>)
 8006630:	f006 020f 	and.w	r2, r6, #15
 8006634:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800663c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006640:	f7f9 ffea 	bl	8000618 <__aeabi_dmul>
 8006644:	e9cd 0100 	strd	r0, r1, [sp]
 8006648:	1136      	asrs	r6, r6, #4
 800664a:	2300      	movs	r3, #0
 800664c:	2502      	movs	r5, #2
 800664e:	2e00      	cmp	r6, #0
 8006650:	d17f      	bne.n	8006752 <_dtoa_r+0x47a>
 8006652:	2b00      	cmp	r3, #0
 8006654:	d1e1      	bne.n	800661a <_dtoa_r+0x342>
 8006656:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006658:	2b00      	cmp	r3, #0
 800665a:	f000 8087 	beq.w	800676c <_dtoa_r+0x494>
 800665e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006662:	2200      	movs	r2, #0
 8006664:	4b93      	ldr	r3, [pc, #588]	; (80068b4 <_dtoa_r+0x5dc>)
 8006666:	4630      	mov	r0, r6
 8006668:	4639      	mov	r1, r7
 800666a:	f7fa fa47 	bl	8000afc <__aeabi_dcmplt>
 800666e:	2800      	cmp	r0, #0
 8006670:	d07c      	beq.n	800676c <_dtoa_r+0x494>
 8006672:	f1b9 0f00 	cmp.w	r9, #0
 8006676:	d079      	beq.n	800676c <_dtoa_r+0x494>
 8006678:	9b02      	ldr	r3, [sp, #8]
 800667a:	2b00      	cmp	r3, #0
 800667c:	dd35      	ble.n	80066ea <_dtoa_r+0x412>
 800667e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006682:	9308      	str	r3, [sp, #32]
 8006684:	4639      	mov	r1, r7
 8006686:	2200      	movs	r2, #0
 8006688:	4b8b      	ldr	r3, [pc, #556]	; (80068b8 <_dtoa_r+0x5e0>)
 800668a:	4630      	mov	r0, r6
 800668c:	f7f9 ffc4 	bl	8000618 <__aeabi_dmul>
 8006690:	e9cd 0100 	strd	r0, r1, [sp]
 8006694:	9f02      	ldr	r7, [sp, #8]
 8006696:	3501      	adds	r5, #1
 8006698:	4628      	mov	r0, r5
 800669a:	f7f9 ff53 	bl	8000544 <__aeabi_i2d>
 800669e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80066a2:	f7f9 ffb9 	bl	8000618 <__aeabi_dmul>
 80066a6:	2200      	movs	r2, #0
 80066a8:	4b84      	ldr	r3, [pc, #528]	; (80068bc <_dtoa_r+0x5e4>)
 80066aa:	f7f9 fdff 	bl	80002ac <__adddf3>
 80066ae:	4605      	mov	r5, r0
 80066b0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80066b4:	2f00      	cmp	r7, #0
 80066b6:	d15d      	bne.n	8006774 <_dtoa_r+0x49c>
 80066b8:	2200      	movs	r2, #0
 80066ba:	4b81      	ldr	r3, [pc, #516]	; (80068c0 <_dtoa_r+0x5e8>)
 80066bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80066c0:	f7f9 fdf2 	bl	80002a8 <__aeabi_dsub>
 80066c4:	462a      	mov	r2, r5
 80066c6:	4633      	mov	r3, r6
 80066c8:	e9cd 0100 	strd	r0, r1, [sp]
 80066cc:	f7fa fa34 	bl	8000b38 <__aeabi_dcmpgt>
 80066d0:	2800      	cmp	r0, #0
 80066d2:	f040 8288 	bne.w	8006be6 <_dtoa_r+0x90e>
 80066d6:	462a      	mov	r2, r5
 80066d8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80066dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80066e0:	f7fa fa0c 	bl	8000afc <__aeabi_dcmplt>
 80066e4:	2800      	cmp	r0, #0
 80066e6:	f040 827c 	bne.w	8006be2 <_dtoa_r+0x90a>
 80066ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80066ee:	e9cd 2300 	strd	r2, r3, [sp]
 80066f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	f2c0 8150 	blt.w	800699a <_dtoa_r+0x6c2>
 80066fa:	f1ba 0f0e 	cmp.w	sl, #14
 80066fe:	f300 814c 	bgt.w	800699a <_dtoa_r+0x6c2>
 8006702:	4b6a      	ldr	r3, [pc, #424]	; (80068ac <_dtoa_r+0x5d4>)
 8006704:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006708:	ed93 7b00 	vldr	d7, [r3]
 800670c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800670e:	2b00      	cmp	r3, #0
 8006710:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006714:	f280 80d8 	bge.w	80068c8 <_dtoa_r+0x5f0>
 8006718:	f1b9 0f00 	cmp.w	r9, #0
 800671c:	f300 80d4 	bgt.w	80068c8 <_dtoa_r+0x5f0>
 8006720:	f040 825e 	bne.w	8006be0 <_dtoa_r+0x908>
 8006724:	2200      	movs	r2, #0
 8006726:	4b66      	ldr	r3, [pc, #408]	; (80068c0 <_dtoa_r+0x5e8>)
 8006728:	ec51 0b17 	vmov	r0, r1, d7
 800672c:	f7f9 ff74 	bl	8000618 <__aeabi_dmul>
 8006730:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006734:	f7fa f9f6 	bl	8000b24 <__aeabi_dcmpge>
 8006738:	464f      	mov	r7, r9
 800673a:	464e      	mov	r6, r9
 800673c:	2800      	cmp	r0, #0
 800673e:	f040 8234 	bne.w	8006baa <_dtoa_r+0x8d2>
 8006742:	2331      	movs	r3, #49	; 0x31
 8006744:	f10b 0501 	add.w	r5, fp, #1
 8006748:	f88b 3000 	strb.w	r3, [fp]
 800674c:	f10a 0a01 	add.w	sl, sl, #1
 8006750:	e22f      	b.n	8006bb2 <_dtoa_r+0x8da>
 8006752:	07f2      	lsls	r2, r6, #31
 8006754:	d505      	bpl.n	8006762 <_dtoa_r+0x48a>
 8006756:	e9d7 2300 	ldrd	r2, r3, [r7]
 800675a:	f7f9 ff5d 	bl	8000618 <__aeabi_dmul>
 800675e:	3501      	adds	r5, #1
 8006760:	2301      	movs	r3, #1
 8006762:	1076      	asrs	r6, r6, #1
 8006764:	3708      	adds	r7, #8
 8006766:	e772      	b.n	800664e <_dtoa_r+0x376>
 8006768:	2502      	movs	r5, #2
 800676a:	e774      	b.n	8006656 <_dtoa_r+0x37e>
 800676c:	f8cd a020 	str.w	sl, [sp, #32]
 8006770:	464f      	mov	r7, r9
 8006772:	e791      	b.n	8006698 <_dtoa_r+0x3c0>
 8006774:	4b4d      	ldr	r3, [pc, #308]	; (80068ac <_dtoa_r+0x5d4>)
 8006776:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800677a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800677e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006780:	2b00      	cmp	r3, #0
 8006782:	d047      	beq.n	8006814 <_dtoa_r+0x53c>
 8006784:	4602      	mov	r2, r0
 8006786:	460b      	mov	r3, r1
 8006788:	2000      	movs	r0, #0
 800678a:	494e      	ldr	r1, [pc, #312]	; (80068c4 <_dtoa_r+0x5ec>)
 800678c:	f7fa f86e 	bl	800086c <__aeabi_ddiv>
 8006790:	462a      	mov	r2, r5
 8006792:	4633      	mov	r3, r6
 8006794:	f7f9 fd88 	bl	80002a8 <__aeabi_dsub>
 8006798:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800679c:	465d      	mov	r5, fp
 800679e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80067a2:	f7fa f9e9 	bl	8000b78 <__aeabi_d2iz>
 80067a6:	4606      	mov	r6, r0
 80067a8:	f7f9 fecc 	bl	8000544 <__aeabi_i2d>
 80067ac:	4602      	mov	r2, r0
 80067ae:	460b      	mov	r3, r1
 80067b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80067b4:	f7f9 fd78 	bl	80002a8 <__aeabi_dsub>
 80067b8:	3630      	adds	r6, #48	; 0x30
 80067ba:	f805 6b01 	strb.w	r6, [r5], #1
 80067be:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80067c2:	e9cd 0100 	strd	r0, r1, [sp]
 80067c6:	f7fa f999 	bl	8000afc <__aeabi_dcmplt>
 80067ca:	2800      	cmp	r0, #0
 80067cc:	d163      	bne.n	8006896 <_dtoa_r+0x5be>
 80067ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80067d2:	2000      	movs	r0, #0
 80067d4:	4937      	ldr	r1, [pc, #220]	; (80068b4 <_dtoa_r+0x5dc>)
 80067d6:	f7f9 fd67 	bl	80002a8 <__aeabi_dsub>
 80067da:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80067de:	f7fa f98d 	bl	8000afc <__aeabi_dcmplt>
 80067e2:	2800      	cmp	r0, #0
 80067e4:	f040 80b7 	bne.w	8006956 <_dtoa_r+0x67e>
 80067e8:	eba5 030b 	sub.w	r3, r5, fp
 80067ec:	429f      	cmp	r7, r3
 80067ee:	f77f af7c 	ble.w	80066ea <_dtoa_r+0x412>
 80067f2:	2200      	movs	r2, #0
 80067f4:	4b30      	ldr	r3, [pc, #192]	; (80068b8 <_dtoa_r+0x5e0>)
 80067f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80067fa:	f7f9 ff0d 	bl	8000618 <__aeabi_dmul>
 80067fe:	2200      	movs	r2, #0
 8006800:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006804:	4b2c      	ldr	r3, [pc, #176]	; (80068b8 <_dtoa_r+0x5e0>)
 8006806:	e9dd 0100 	ldrd	r0, r1, [sp]
 800680a:	f7f9 ff05 	bl	8000618 <__aeabi_dmul>
 800680e:	e9cd 0100 	strd	r0, r1, [sp]
 8006812:	e7c4      	b.n	800679e <_dtoa_r+0x4c6>
 8006814:	462a      	mov	r2, r5
 8006816:	4633      	mov	r3, r6
 8006818:	f7f9 fefe 	bl	8000618 <__aeabi_dmul>
 800681c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006820:	eb0b 0507 	add.w	r5, fp, r7
 8006824:	465e      	mov	r6, fp
 8006826:	e9dd 0100 	ldrd	r0, r1, [sp]
 800682a:	f7fa f9a5 	bl	8000b78 <__aeabi_d2iz>
 800682e:	4607      	mov	r7, r0
 8006830:	f7f9 fe88 	bl	8000544 <__aeabi_i2d>
 8006834:	3730      	adds	r7, #48	; 0x30
 8006836:	4602      	mov	r2, r0
 8006838:	460b      	mov	r3, r1
 800683a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800683e:	f7f9 fd33 	bl	80002a8 <__aeabi_dsub>
 8006842:	f806 7b01 	strb.w	r7, [r6], #1
 8006846:	42ae      	cmp	r6, r5
 8006848:	e9cd 0100 	strd	r0, r1, [sp]
 800684c:	f04f 0200 	mov.w	r2, #0
 8006850:	d126      	bne.n	80068a0 <_dtoa_r+0x5c8>
 8006852:	4b1c      	ldr	r3, [pc, #112]	; (80068c4 <_dtoa_r+0x5ec>)
 8006854:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006858:	f7f9 fd28 	bl	80002ac <__adddf3>
 800685c:	4602      	mov	r2, r0
 800685e:	460b      	mov	r3, r1
 8006860:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006864:	f7fa f968 	bl	8000b38 <__aeabi_dcmpgt>
 8006868:	2800      	cmp	r0, #0
 800686a:	d174      	bne.n	8006956 <_dtoa_r+0x67e>
 800686c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006870:	2000      	movs	r0, #0
 8006872:	4914      	ldr	r1, [pc, #80]	; (80068c4 <_dtoa_r+0x5ec>)
 8006874:	f7f9 fd18 	bl	80002a8 <__aeabi_dsub>
 8006878:	4602      	mov	r2, r0
 800687a:	460b      	mov	r3, r1
 800687c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006880:	f7fa f93c 	bl	8000afc <__aeabi_dcmplt>
 8006884:	2800      	cmp	r0, #0
 8006886:	f43f af30 	beq.w	80066ea <_dtoa_r+0x412>
 800688a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800688e:	2b30      	cmp	r3, #48	; 0x30
 8006890:	f105 32ff 	add.w	r2, r5, #4294967295
 8006894:	d002      	beq.n	800689c <_dtoa_r+0x5c4>
 8006896:	f8dd a020 	ldr.w	sl, [sp, #32]
 800689a:	e04a      	b.n	8006932 <_dtoa_r+0x65a>
 800689c:	4615      	mov	r5, r2
 800689e:	e7f4      	b.n	800688a <_dtoa_r+0x5b2>
 80068a0:	4b05      	ldr	r3, [pc, #20]	; (80068b8 <_dtoa_r+0x5e0>)
 80068a2:	f7f9 feb9 	bl	8000618 <__aeabi_dmul>
 80068a6:	e9cd 0100 	strd	r0, r1, [sp]
 80068aa:	e7bc      	b.n	8006826 <_dtoa_r+0x54e>
 80068ac:	08008320 	.word	0x08008320
 80068b0:	080082f8 	.word	0x080082f8
 80068b4:	3ff00000 	.word	0x3ff00000
 80068b8:	40240000 	.word	0x40240000
 80068bc:	401c0000 	.word	0x401c0000
 80068c0:	40140000 	.word	0x40140000
 80068c4:	3fe00000 	.word	0x3fe00000
 80068c8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80068cc:	465d      	mov	r5, fp
 80068ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80068d2:	4630      	mov	r0, r6
 80068d4:	4639      	mov	r1, r7
 80068d6:	f7f9 ffc9 	bl	800086c <__aeabi_ddiv>
 80068da:	f7fa f94d 	bl	8000b78 <__aeabi_d2iz>
 80068de:	4680      	mov	r8, r0
 80068e0:	f7f9 fe30 	bl	8000544 <__aeabi_i2d>
 80068e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80068e8:	f7f9 fe96 	bl	8000618 <__aeabi_dmul>
 80068ec:	4602      	mov	r2, r0
 80068ee:	460b      	mov	r3, r1
 80068f0:	4630      	mov	r0, r6
 80068f2:	4639      	mov	r1, r7
 80068f4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80068f8:	f7f9 fcd6 	bl	80002a8 <__aeabi_dsub>
 80068fc:	f805 6b01 	strb.w	r6, [r5], #1
 8006900:	eba5 060b 	sub.w	r6, r5, fp
 8006904:	45b1      	cmp	r9, r6
 8006906:	4602      	mov	r2, r0
 8006908:	460b      	mov	r3, r1
 800690a:	d139      	bne.n	8006980 <_dtoa_r+0x6a8>
 800690c:	f7f9 fcce 	bl	80002ac <__adddf3>
 8006910:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006914:	4606      	mov	r6, r0
 8006916:	460f      	mov	r7, r1
 8006918:	f7fa f90e 	bl	8000b38 <__aeabi_dcmpgt>
 800691c:	b9c8      	cbnz	r0, 8006952 <_dtoa_r+0x67a>
 800691e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006922:	4630      	mov	r0, r6
 8006924:	4639      	mov	r1, r7
 8006926:	f7fa f8df 	bl	8000ae8 <__aeabi_dcmpeq>
 800692a:	b110      	cbz	r0, 8006932 <_dtoa_r+0x65a>
 800692c:	f018 0f01 	tst.w	r8, #1
 8006930:	d10f      	bne.n	8006952 <_dtoa_r+0x67a>
 8006932:	9904      	ldr	r1, [sp, #16]
 8006934:	4620      	mov	r0, r4
 8006936:	f000 fe12 	bl	800755e <_Bfree>
 800693a:	2300      	movs	r3, #0
 800693c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800693e:	702b      	strb	r3, [r5, #0]
 8006940:	f10a 0301 	add.w	r3, sl, #1
 8006944:	6013      	str	r3, [r2, #0]
 8006946:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006948:	2b00      	cmp	r3, #0
 800694a:	f43f acff 	beq.w	800634c <_dtoa_r+0x74>
 800694e:	601d      	str	r5, [r3, #0]
 8006950:	e4fc      	b.n	800634c <_dtoa_r+0x74>
 8006952:	f8cd a020 	str.w	sl, [sp, #32]
 8006956:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800695a:	2a39      	cmp	r2, #57	; 0x39
 800695c:	f105 33ff 	add.w	r3, r5, #4294967295
 8006960:	d108      	bne.n	8006974 <_dtoa_r+0x69c>
 8006962:	459b      	cmp	fp, r3
 8006964:	d10a      	bne.n	800697c <_dtoa_r+0x6a4>
 8006966:	9b08      	ldr	r3, [sp, #32]
 8006968:	3301      	adds	r3, #1
 800696a:	9308      	str	r3, [sp, #32]
 800696c:	2330      	movs	r3, #48	; 0x30
 800696e:	f88b 3000 	strb.w	r3, [fp]
 8006972:	465b      	mov	r3, fp
 8006974:	781a      	ldrb	r2, [r3, #0]
 8006976:	3201      	adds	r2, #1
 8006978:	701a      	strb	r2, [r3, #0]
 800697a:	e78c      	b.n	8006896 <_dtoa_r+0x5be>
 800697c:	461d      	mov	r5, r3
 800697e:	e7ea      	b.n	8006956 <_dtoa_r+0x67e>
 8006980:	2200      	movs	r2, #0
 8006982:	4b9b      	ldr	r3, [pc, #620]	; (8006bf0 <_dtoa_r+0x918>)
 8006984:	f7f9 fe48 	bl	8000618 <__aeabi_dmul>
 8006988:	2200      	movs	r2, #0
 800698a:	2300      	movs	r3, #0
 800698c:	4606      	mov	r6, r0
 800698e:	460f      	mov	r7, r1
 8006990:	f7fa f8aa 	bl	8000ae8 <__aeabi_dcmpeq>
 8006994:	2800      	cmp	r0, #0
 8006996:	d09a      	beq.n	80068ce <_dtoa_r+0x5f6>
 8006998:	e7cb      	b.n	8006932 <_dtoa_r+0x65a>
 800699a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800699c:	2a00      	cmp	r2, #0
 800699e:	f000 808b 	beq.w	8006ab8 <_dtoa_r+0x7e0>
 80069a2:	9a06      	ldr	r2, [sp, #24]
 80069a4:	2a01      	cmp	r2, #1
 80069a6:	dc6e      	bgt.n	8006a86 <_dtoa_r+0x7ae>
 80069a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80069aa:	2a00      	cmp	r2, #0
 80069ac:	d067      	beq.n	8006a7e <_dtoa_r+0x7a6>
 80069ae:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80069b2:	9f07      	ldr	r7, [sp, #28]
 80069b4:	9d05      	ldr	r5, [sp, #20]
 80069b6:	9a05      	ldr	r2, [sp, #20]
 80069b8:	2101      	movs	r1, #1
 80069ba:	441a      	add	r2, r3
 80069bc:	4620      	mov	r0, r4
 80069be:	9205      	str	r2, [sp, #20]
 80069c0:	4498      	add	r8, r3
 80069c2:	f000 fe5e 	bl	8007682 <__i2b>
 80069c6:	4606      	mov	r6, r0
 80069c8:	2d00      	cmp	r5, #0
 80069ca:	dd0c      	ble.n	80069e6 <_dtoa_r+0x70e>
 80069cc:	f1b8 0f00 	cmp.w	r8, #0
 80069d0:	dd09      	ble.n	80069e6 <_dtoa_r+0x70e>
 80069d2:	4545      	cmp	r5, r8
 80069d4:	9a05      	ldr	r2, [sp, #20]
 80069d6:	462b      	mov	r3, r5
 80069d8:	bfa8      	it	ge
 80069da:	4643      	movge	r3, r8
 80069dc:	1ad2      	subs	r2, r2, r3
 80069de:	9205      	str	r2, [sp, #20]
 80069e0:	1aed      	subs	r5, r5, r3
 80069e2:	eba8 0803 	sub.w	r8, r8, r3
 80069e6:	9b07      	ldr	r3, [sp, #28]
 80069e8:	b1eb      	cbz	r3, 8006a26 <_dtoa_r+0x74e>
 80069ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d067      	beq.n	8006ac0 <_dtoa_r+0x7e8>
 80069f0:	b18f      	cbz	r7, 8006a16 <_dtoa_r+0x73e>
 80069f2:	4631      	mov	r1, r6
 80069f4:	463a      	mov	r2, r7
 80069f6:	4620      	mov	r0, r4
 80069f8:	f000 fee2 	bl	80077c0 <__pow5mult>
 80069fc:	9a04      	ldr	r2, [sp, #16]
 80069fe:	4601      	mov	r1, r0
 8006a00:	4606      	mov	r6, r0
 8006a02:	4620      	mov	r0, r4
 8006a04:	f000 fe46 	bl	8007694 <__multiply>
 8006a08:	9904      	ldr	r1, [sp, #16]
 8006a0a:	9008      	str	r0, [sp, #32]
 8006a0c:	4620      	mov	r0, r4
 8006a0e:	f000 fda6 	bl	800755e <_Bfree>
 8006a12:	9b08      	ldr	r3, [sp, #32]
 8006a14:	9304      	str	r3, [sp, #16]
 8006a16:	9b07      	ldr	r3, [sp, #28]
 8006a18:	1bda      	subs	r2, r3, r7
 8006a1a:	d004      	beq.n	8006a26 <_dtoa_r+0x74e>
 8006a1c:	9904      	ldr	r1, [sp, #16]
 8006a1e:	4620      	mov	r0, r4
 8006a20:	f000 fece 	bl	80077c0 <__pow5mult>
 8006a24:	9004      	str	r0, [sp, #16]
 8006a26:	2101      	movs	r1, #1
 8006a28:	4620      	mov	r0, r4
 8006a2a:	f000 fe2a 	bl	8007682 <__i2b>
 8006a2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a30:	4607      	mov	r7, r0
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	f000 81cf 	beq.w	8006dd6 <_dtoa_r+0xafe>
 8006a38:	461a      	mov	r2, r3
 8006a3a:	4601      	mov	r1, r0
 8006a3c:	4620      	mov	r0, r4
 8006a3e:	f000 febf 	bl	80077c0 <__pow5mult>
 8006a42:	9b06      	ldr	r3, [sp, #24]
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	4607      	mov	r7, r0
 8006a48:	dc40      	bgt.n	8006acc <_dtoa_r+0x7f4>
 8006a4a:	9b00      	ldr	r3, [sp, #0]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d139      	bne.n	8006ac4 <_dtoa_r+0x7ec>
 8006a50:	9b01      	ldr	r3, [sp, #4]
 8006a52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d136      	bne.n	8006ac8 <_dtoa_r+0x7f0>
 8006a5a:	9b01      	ldr	r3, [sp, #4]
 8006a5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a60:	0d1b      	lsrs	r3, r3, #20
 8006a62:	051b      	lsls	r3, r3, #20
 8006a64:	b12b      	cbz	r3, 8006a72 <_dtoa_r+0x79a>
 8006a66:	9b05      	ldr	r3, [sp, #20]
 8006a68:	3301      	adds	r3, #1
 8006a6a:	9305      	str	r3, [sp, #20]
 8006a6c:	f108 0801 	add.w	r8, r8, #1
 8006a70:	2301      	movs	r3, #1
 8006a72:	9307      	str	r3, [sp, #28]
 8006a74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d12a      	bne.n	8006ad0 <_dtoa_r+0x7f8>
 8006a7a:	2001      	movs	r0, #1
 8006a7c:	e030      	b.n	8006ae0 <_dtoa_r+0x808>
 8006a7e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006a80:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006a84:	e795      	b.n	80069b2 <_dtoa_r+0x6da>
 8006a86:	9b07      	ldr	r3, [sp, #28]
 8006a88:	f109 37ff 	add.w	r7, r9, #4294967295
 8006a8c:	42bb      	cmp	r3, r7
 8006a8e:	bfbf      	itttt	lt
 8006a90:	9b07      	ldrlt	r3, [sp, #28]
 8006a92:	9707      	strlt	r7, [sp, #28]
 8006a94:	1afa      	sublt	r2, r7, r3
 8006a96:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006a98:	bfbb      	ittet	lt
 8006a9a:	189b      	addlt	r3, r3, r2
 8006a9c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006a9e:	1bdf      	subge	r7, r3, r7
 8006aa0:	2700      	movlt	r7, #0
 8006aa2:	f1b9 0f00 	cmp.w	r9, #0
 8006aa6:	bfb5      	itete	lt
 8006aa8:	9b05      	ldrlt	r3, [sp, #20]
 8006aaa:	9d05      	ldrge	r5, [sp, #20]
 8006aac:	eba3 0509 	sublt.w	r5, r3, r9
 8006ab0:	464b      	movge	r3, r9
 8006ab2:	bfb8      	it	lt
 8006ab4:	2300      	movlt	r3, #0
 8006ab6:	e77e      	b.n	80069b6 <_dtoa_r+0x6de>
 8006ab8:	9f07      	ldr	r7, [sp, #28]
 8006aba:	9d05      	ldr	r5, [sp, #20]
 8006abc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006abe:	e783      	b.n	80069c8 <_dtoa_r+0x6f0>
 8006ac0:	9a07      	ldr	r2, [sp, #28]
 8006ac2:	e7ab      	b.n	8006a1c <_dtoa_r+0x744>
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	e7d4      	b.n	8006a72 <_dtoa_r+0x79a>
 8006ac8:	9b00      	ldr	r3, [sp, #0]
 8006aca:	e7d2      	b.n	8006a72 <_dtoa_r+0x79a>
 8006acc:	2300      	movs	r3, #0
 8006ace:	9307      	str	r3, [sp, #28]
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8006ad6:	6918      	ldr	r0, [r3, #16]
 8006ad8:	f000 fd85 	bl	80075e6 <__hi0bits>
 8006adc:	f1c0 0020 	rsb	r0, r0, #32
 8006ae0:	4440      	add	r0, r8
 8006ae2:	f010 001f 	ands.w	r0, r0, #31
 8006ae6:	d047      	beq.n	8006b78 <_dtoa_r+0x8a0>
 8006ae8:	f1c0 0320 	rsb	r3, r0, #32
 8006aec:	2b04      	cmp	r3, #4
 8006aee:	dd3b      	ble.n	8006b68 <_dtoa_r+0x890>
 8006af0:	9b05      	ldr	r3, [sp, #20]
 8006af2:	f1c0 001c 	rsb	r0, r0, #28
 8006af6:	4403      	add	r3, r0
 8006af8:	9305      	str	r3, [sp, #20]
 8006afa:	4405      	add	r5, r0
 8006afc:	4480      	add	r8, r0
 8006afe:	9b05      	ldr	r3, [sp, #20]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	dd05      	ble.n	8006b10 <_dtoa_r+0x838>
 8006b04:	461a      	mov	r2, r3
 8006b06:	9904      	ldr	r1, [sp, #16]
 8006b08:	4620      	mov	r0, r4
 8006b0a:	f000 fe99 	bl	8007840 <__lshift>
 8006b0e:	9004      	str	r0, [sp, #16]
 8006b10:	f1b8 0f00 	cmp.w	r8, #0
 8006b14:	dd05      	ble.n	8006b22 <_dtoa_r+0x84a>
 8006b16:	4639      	mov	r1, r7
 8006b18:	4642      	mov	r2, r8
 8006b1a:	4620      	mov	r0, r4
 8006b1c:	f000 fe90 	bl	8007840 <__lshift>
 8006b20:	4607      	mov	r7, r0
 8006b22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006b24:	b353      	cbz	r3, 8006b7c <_dtoa_r+0x8a4>
 8006b26:	4639      	mov	r1, r7
 8006b28:	9804      	ldr	r0, [sp, #16]
 8006b2a:	f000 fedd 	bl	80078e8 <__mcmp>
 8006b2e:	2800      	cmp	r0, #0
 8006b30:	da24      	bge.n	8006b7c <_dtoa_r+0x8a4>
 8006b32:	2300      	movs	r3, #0
 8006b34:	220a      	movs	r2, #10
 8006b36:	9904      	ldr	r1, [sp, #16]
 8006b38:	4620      	mov	r0, r4
 8006b3a:	f000 fd19 	bl	8007570 <__multadd>
 8006b3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b40:	9004      	str	r0, [sp, #16]
 8006b42:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	f000 814c 	beq.w	8006de4 <_dtoa_r+0xb0c>
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	4631      	mov	r1, r6
 8006b50:	220a      	movs	r2, #10
 8006b52:	4620      	mov	r0, r4
 8006b54:	f000 fd0c 	bl	8007570 <__multadd>
 8006b58:	9b02      	ldr	r3, [sp, #8]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	4606      	mov	r6, r0
 8006b5e:	dc4f      	bgt.n	8006c00 <_dtoa_r+0x928>
 8006b60:	9b06      	ldr	r3, [sp, #24]
 8006b62:	2b02      	cmp	r3, #2
 8006b64:	dd4c      	ble.n	8006c00 <_dtoa_r+0x928>
 8006b66:	e011      	b.n	8006b8c <_dtoa_r+0x8b4>
 8006b68:	d0c9      	beq.n	8006afe <_dtoa_r+0x826>
 8006b6a:	9a05      	ldr	r2, [sp, #20]
 8006b6c:	331c      	adds	r3, #28
 8006b6e:	441a      	add	r2, r3
 8006b70:	9205      	str	r2, [sp, #20]
 8006b72:	441d      	add	r5, r3
 8006b74:	4498      	add	r8, r3
 8006b76:	e7c2      	b.n	8006afe <_dtoa_r+0x826>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	e7f6      	b.n	8006b6a <_dtoa_r+0x892>
 8006b7c:	f1b9 0f00 	cmp.w	r9, #0
 8006b80:	dc38      	bgt.n	8006bf4 <_dtoa_r+0x91c>
 8006b82:	9b06      	ldr	r3, [sp, #24]
 8006b84:	2b02      	cmp	r3, #2
 8006b86:	dd35      	ble.n	8006bf4 <_dtoa_r+0x91c>
 8006b88:	f8cd 9008 	str.w	r9, [sp, #8]
 8006b8c:	9b02      	ldr	r3, [sp, #8]
 8006b8e:	b963      	cbnz	r3, 8006baa <_dtoa_r+0x8d2>
 8006b90:	4639      	mov	r1, r7
 8006b92:	2205      	movs	r2, #5
 8006b94:	4620      	mov	r0, r4
 8006b96:	f000 fceb 	bl	8007570 <__multadd>
 8006b9a:	4601      	mov	r1, r0
 8006b9c:	4607      	mov	r7, r0
 8006b9e:	9804      	ldr	r0, [sp, #16]
 8006ba0:	f000 fea2 	bl	80078e8 <__mcmp>
 8006ba4:	2800      	cmp	r0, #0
 8006ba6:	f73f adcc 	bgt.w	8006742 <_dtoa_r+0x46a>
 8006baa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bac:	465d      	mov	r5, fp
 8006bae:	ea6f 0a03 	mvn.w	sl, r3
 8006bb2:	f04f 0900 	mov.w	r9, #0
 8006bb6:	4639      	mov	r1, r7
 8006bb8:	4620      	mov	r0, r4
 8006bba:	f000 fcd0 	bl	800755e <_Bfree>
 8006bbe:	2e00      	cmp	r6, #0
 8006bc0:	f43f aeb7 	beq.w	8006932 <_dtoa_r+0x65a>
 8006bc4:	f1b9 0f00 	cmp.w	r9, #0
 8006bc8:	d005      	beq.n	8006bd6 <_dtoa_r+0x8fe>
 8006bca:	45b1      	cmp	r9, r6
 8006bcc:	d003      	beq.n	8006bd6 <_dtoa_r+0x8fe>
 8006bce:	4649      	mov	r1, r9
 8006bd0:	4620      	mov	r0, r4
 8006bd2:	f000 fcc4 	bl	800755e <_Bfree>
 8006bd6:	4631      	mov	r1, r6
 8006bd8:	4620      	mov	r0, r4
 8006bda:	f000 fcc0 	bl	800755e <_Bfree>
 8006bde:	e6a8      	b.n	8006932 <_dtoa_r+0x65a>
 8006be0:	2700      	movs	r7, #0
 8006be2:	463e      	mov	r6, r7
 8006be4:	e7e1      	b.n	8006baa <_dtoa_r+0x8d2>
 8006be6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006bea:	463e      	mov	r6, r7
 8006bec:	e5a9      	b.n	8006742 <_dtoa_r+0x46a>
 8006bee:	bf00      	nop
 8006bf0:	40240000 	.word	0x40240000
 8006bf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bf6:	f8cd 9008 	str.w	r9, [sp, #8]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	f000 80f9 	beq.w	8006df2 <_dtoa_r+0xb1a>
 8006c00:	2d00      	cmp	r5, #0
 8006c02:	dd05      	ble.n	8006c10 <_dtoa_r+0x938>
 8006c04:	4631      	mov	r1, r6
 8006c06:	462a      	mov	r2, r5
 8006c08:	4620      	mov	r0, r4
 8006c0a:	f000 fe19 	bl	8007840 <__lshift>
 8006c0e:	4606      	mov	r6, r0
 8006c10:	9b07      	ldr	r3, [sp, #28]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d04c      	beq.n	8006cb0 <_dtoa_r+0x9d8>
 8006c16:	6871      	ldr	r1, [r6, #4]
 8006c18:	4620      	mov	r0, r4
 8006c1a:	f000 fc7b 	bl	8007514 <_Balloc>
 8006c1e:	6932      	ldr	r2, [r6, #16]
 8006c20:	3202      	adds	r2, #2
 8006c22:	4605      	mov	r5, r0
 8006c24:	0092      	lsls	r2, r2, #2
 8006c26:	f106 010c 	add.w	r1, r6, #12
 8006c2a:	300c      	adds	r0, #12
 8006c2c:	f7fe f862 	bl	8004cf4 <memcpy>
 8006c30:	2201      	movs	r2, #1
 8006c32:	4629      	mov	r1, r5
 8006c34:	4620      	mov	r0, r4
 8006c36:	f000 fe03 	bl	8007840 <__lshift>
 8006c3a:	9b00      	ldr	r3, [sp, #0]
 8006c3c:	f8cd b014 	str.w	fp, [sp, #20]
 8006c40:	f003 0301 	and.w	r3, r3, #1
 8006c44:	46b1      	mov	r9, r6
 8006c46:	9307      	str	r3, [sp, #28]
 8006c48:	4606      	mov	r6, r0
 8006c4a:	4639      	mov	r1, r7
 8006c4c:	9804      	ldr	r0, [sp, #16]
 8006c4e:	f7ff fab5 	bl	80061bc <quorem>
 8006c52:	4649      	mov	r1, r9
 8006c54:	4605      	mov	r5, r0
 8006c56:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006c5a:	9804      	ldr	r0, [sp, #16]
 8006c5c:	f000 fe44 	bl	80078e8 <__mcmp>
 8006c60:	4632      	mov	r2, r6
 8006c62:	9000      	str	r0, [sp, #0]
 8006c64:	4639      	mov	r1, r7
 8006c66:	4620      	mov	r0, r4
 8006c68:	f000 fe58 	bl	800791c <__mdiff>
 8006c6c:	68c3      	ldr	r3, [r0, #12]
 8006c6e:	4602      	mov	r2, r0
 8006c70:	bb03      	cbnz	r3, 8006cb4 <_dtoa_r+0x9dc>
 8006c72:	4601      	mov	r1, r0
 8006c74:	9008      	str	r0, [sp, #32]
 8006c76:	9804      	ldr	r0, [sp, #16]
 8006c78:	f000 fe36 	bl	80078e8 <__mcmp>
 8006c7c:	9a08      	ldr	r2, [sp, #32]
 8006c7e:	4603      	mov	r3, r0
 8006c80:	4611      	mov	r1, r2
 8006c82:	4620      	mov	r0, r4
 8006c84:	9308      	str	r3, [sp, #32]
 8006c86:	f000 fc6a 	bl	800755e <_Bfree>
 8006c8a:	9b08      	ldr	r3, [sp, #32]
 8006c8c:	b9a3      	cbnz	r3, 8006cb8 <_dtoa_r+0x9e0>
 8006c8e:	9a06      	ldr	r2, [sp, #24]
 8006c90:	b992      	cbnz	r2, 8006cb8 <_dtoa_r+0x9e0>
 8006c92:	9a07      	ldr	r2, [sp, #28]
 8006c94:	b982      	cbnz	r2, 8006cb8 <_dtoa_r+0x9e0>
 8006c96:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006c9a:	d029      	beq.n	8006cf0 <_dtoa_r+0xa18>
 8006c9c:	9b00      	ldr	r3, [sp, #0]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	dd01      	ble.n	8006ca6 <_dtoa_r+0x9ce>
 8006ca2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8006ca6:	9b05      	ldr	r3, [sp, #20]
 8006ca8:	1c5d      	adds	r5, r3, #1
 8006caa:	f883 8000 	strb.w	r8, [r3]
 8006cae:	e782      	b.n	8006bb6 <_dtoa_r+0x8de>
 8006cb0:	4630      	mov	r0, r6
 8006cb2:	e7c2      	b.n	8006c3a <_dtoa_r+0x962>
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	e7e3      	b.n	8006c80 <_dtoa_r+0x9a8>
 8006cb8:	9a00      	ldr	r2, [sp, #0]
 8006cba:	2a00      	cmp	r2, #0
 8006cbc:	db04      	blt.n	8006cc8 <_dtoa_r+0x9f0>
 8006cbe:	d125      	bne.n	8006d0c <_dtoa_r+0xa34>
 8006cc0:	9a06      	ldr	r2, [sp, #24]
 8006cc2:	bb1a      	cbnz	r2, 8006d0c <_dtoa_r+0xa34>
 8006cc4:	9a07      	ldr	r2, [sp, #28]
 8006cc6:	bb0a      	cbnz	r2, 8006d0c <_dtoa_r+0xa34>
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	ddec      	ble.n	8006ca6 <_dtoa_r+0x9ce>
 8006ccc:	2201      	movs	r2, #1
 8006cce:	9904      	ldr	r1, [sp, #16]
 8006cd0:	4620      	mov	r0, r4
 8006cd2:	f000 fdb5 	bl	8007840 <__lshift>
 8006cd6:	4639      	mov	r1, r7
 8006cd8:	9004      	str	r0, [sp, #16]
 8006cda:	f000 fe05 	bl	80078e8 <__mcmp>
 8006cde:	2800      	cmp	r0, #0
 8006ce0:	dc03      	bgt.n	8006cea <_dtoa_r+0xa12>
 8006ce2:	d1e0      	bne.n	8006ca6 <_dtoa_r+0x9ce>
 8006ce4:	f018 0f01 	tst.w	r8, #1
 8006ce8:	d0dd      	beq.n	8006ca6 <_dtoa_r+0x9ce>
 8006cea:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006cee:	d1d8      	bne.n	8006ca2 <_dtoa_r+0x9ca>
 8006cf0:	9b05      	ldr	r3, [sp, #20]
 8006cf2:	9a05      	ldr	r2, [sp, #20]
 8006cf4:	1c5d      	adds	r5, r3, #1
 8006cf6:	2339      	movs	r3, #57	; 0x39
 8006cf8:	7013      	strb	r3, [r2, #0]
 8006cfa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006cfe:	2b39      	cmp	r3, #57	; 0x39
 8006d00:	f105 32ff 	add.w	r2, r5, #4294967295
 8006d04:	d04f      	beq.n	8006da6 <_dtoa_r+0xace>
 8006d06:	3301      	adds	r3, #1
 8006d08:	7013      	strb	r3, [r2, #0]
 8006d0a:	e754      	b.n	8006bb6 <_dtoa_r+0x8de>
 8006d0c:	9a05      	ldr	r2, [sp, #20]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	f102 0501 	add.w	r5, r2, #1
 8006d14:	dd06      	ble.n	8006d24 <_dtoa_r+0xa4c>
 8006d16:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006d1a:	d0e9      	beq.n	8006cf0 <_dtoa_r+0xa18>
 8006d1c:	f108 0801 	add.w	r8, r8, #1
 8006d20:	9b05      	ldr	r3, [sp, #20]
 8006d22:	e7c2      	b.n	8006caa <_dtoa_r+0x9d2>
 8006d24:	9a02      	ldr	r2, [sp, #8]
 8006d26:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006d2a:	eba5 030b 	sub.w	r3, r5, fp
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d021      	beq.n	8006d76 <_dtoa_r+0xa9e>
 8006d32:	2300      	movs	r3, #0
 8006d34:	220a      	movs	r2, #10
 8006d36:	9904      	ldr	r1, [sp, #16]
 8006d38:	4620      	mov	r0, r4
 8006d3a:	f000 fc19 	bl	8007570 <__multadd>
 8006d3e:	45b1      	cmp	r9, r6
 8006d40:	9004      	str	r0, [sp, #16]
 8006d42:	f04f 0300 	mov.w	r3, #0
 8006d46:	f04f 020a 	mov.w	r2, #10
 8006d4a:	4649      	mov	r1, r9
 8006d4c:	4620      	mov	r0, r4
 8006d4e:	d105      	bne.n	8006d5c <_dtoa_r+0xa84>
 8006d50:	f000 fc0e 	bl	8007570 <__multadd>
 8006d54:	4681      	mov	r9, r0
 8006d56:	4606      	mov	r6, r0
 8006d58:	9505      	str	r5, [sp, #20]
 8006d5a:	e776      	b.n	8006c4a <_dtoa_r+0x972>
 8006d5c:	f000 fc08 	bl	8007570 <__multadd>
 8006d60:	4631      	mov	r1, r6
 8006d62:	4681      	mov	r9, r0
 8006d64:	2300      	movs	r3, #0
 8006d66:	220a      	movs	r2, #10
 8006d68:	4620      	mov	r0, r4
 8006d6a:	f000 fc01 	bl	8007570 <__multadd>
 8006d6e:	4606      	mov	r6, r0
 8006d70:	e7f2      	b.n	8006d58 <_dtoa_r+0xa80>
 8006d72:	f04f 0900 	mov.w	r9, #0
 8006d76:	2201      	movs	r2, #1
 8006d78:	9904      	ldr	r1, [sp, #16]
 8006d7a:	4620      	mov	r0, r4
 8006d7c:	f000 fd60 	bl	8007840 <__lshift>
 8006d80:	4639      	mov	r1, r7
 8006d82:	9004      	str	r0, [sp, #16]
 8006d84:	f000 fdb0 	bl	80078e8 <__mcmp>
 8006d88:	2800      	cmp	r0, #0
 8006d8a:	dcb6      	bgt.n	8006cfa <_dtoa_r+0xa22>
 8006d8c:	d102      	bne.n	8006d94 <_dtoa_r+0xabc>
 8006d8e:	f018 0f01 	tst.w	r8, #1
 8006d92:	d1b2      	bne.n	8006cfa <_dtoa_r+0xa22>
 8006d94:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006d98:	2b30      	cmp	r3, #48	; 0x30
 8006d9a:	f105 32ff 	add.w	r2, r5, #4294967295
 8006d9e:	f47f af0a 	bne.w	8006bb6 <_dtoa_r+0x8de>
 8006da2:	4615      	mov	r5, r2
 8006da4:	e7f6      	b.n	8006d94 <_dtoa_r+0xabc>
 8006da6:	4593      	cmp	fp, r2
 8006da8:	d105      	bne.n	8006db6 <_dtoa_r+0xade>
 8006daa:	2331      	movs	r3, #49	; 0x31
 8006dac:	f10a 0a01 	add.w	sl, sl, #1
 8006db0:	f88b 3000 	strb.w	r3, [fp]
 8006db4:	e6ff      	b.n	8006bb6 <_dtoa_r+0x8de>
 8006db6:	4615      	mov	r5, r2
 8006db8:	e79f      	b.n	8006cfa <_dtoa_r+0xa22>
 8006dba:	f8df b064 	ldr.w	fp, [pc, #100]	; 8006e20 <_dtoa_r+0xb48>
 8006dbe:	f7ff bac5 	b.w	800634c <_dtoa_r+0x74>
 8006dc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006dc4:	f8df b05c 	ldr.w	fp, [pc, #92]	; 8006e24 <_dtoa_r+0xb4c>
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	f43f aabf 	beq.w	800634c <_dtoa_r+0x74>
 8006dce:	f10b 0308 	add.w	r3, fp, #8
 8006dd2:	f7ff bab9 	b.w	8006348 <_dtoa_r+0x70>
 8006dd6:	9b06      	ldr	r3, [sp, #24]
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	f77f ae36 	ble.w	8006a4a <_dtoa_r+0x772>
 8006dde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006de0:	9307      	str	r3, [sp, #28]
 8006de2:	e64a      	b.n	8006a7a <_dtoa_r+0x7a2>
 8006de4:	9b02      	ldr	r3, [sp, #8]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	dc03      	bgt.n	8006df2 <_dtoa_r+0xb1a>
 8006dea:	9b06      	ldr	r3, [sp, #24]
 8006dec:	2b02      	cmp	r3, #2
 8006dee:	f73f aecd 	bgt.w	8006b8c <_dtoa_r+0x8b4>
 8006df2:	465d      	mov	r5, fp
 8006df4:	4639      	mov	r1, r7
 8006df6:	9804      	ldr	r0, [sp, #16]
 8006df8:	f7ff f9e0 	bl	80061bc <quorem>
 8006dfc:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006e00:	f805 8b01 	strb.w	r8, [r5], #1
 8006e04:	9a02      	ldr	r2, [sp, #8]
 8006e06:	eba5 030b 	sub.w	r3, r5, fp
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	ddb1      	ble.n	8006d72 <_dtoa_r+0xa9a>
 8006e0e:	2300      	movs	r3, #0
 8006e10:	220a      	movs	r2, #10
 8006e12:	9904      	ldr	r1, [sp, #16]
 8006e14:	4620      	mov	r0, r4
 8006e16:	f000 fbab 	bl	8007570 <__multadd>
 8006e1a:	9004      	str	r0, [sp, #16]
 8006e1c:	e7ea      	b.n	8006df4 <_dtoa_r+0xb1c>
 8006e1e:	bf00      	nop
 8006e20:	080082c2 	.word	0x080082c2
 8006e24:	080082e4 	.word	0x080082e4

08006e28 <__libc_fini_array>:
 8006e28:	b538      	push	{r3, r4, r5, lr}
 8006e2a:	4d07      	ldr	r5, [pc, #28]	; (8006e48 <__libc_fini_array+0x20>)
 8006e2c:	4c07      	ldr	r4, [pc, #28]	; (8006e4c <__libc_fini_array+0x24>)
 8006e2e:	1b64      	subs	r4, r4, r5
 8006e30:	10a4      	asrs	r4, r4, #2
 8006e32:	b91c      	cbnz	r4, 8006e3c <__libc_fini_array+0x14>
 8006e34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e38:	f001 b992 	b.w	8008160 <_fini>
 8006e3c:	3c01      	subs	r4, #1
 8006e3e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8006e42:	4798      	blx	r3
 8006e44:	e7f5      	b.n	8006e32 <__libc_fini_array+0xa>
 8006e46:	bf00      	nop
 8006e48:	08008510 	.word	0x08008510
 8006e4c:	08008514 	.word	0x08008514

08006e50 <_malloc_trim_r>:
 8006e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e54:	4605      	mov	r5, r0
 8006e56:	2008      	movs	r0, #8
 8006e58:	460c      	mov	r4, r1
 8006e5a:	f000 fede 	bl	8007c1a <sysconf>
 8006e5e:	4f23      	ldr	r7, [pc, #140]	; (8006eec <_malloc_trim_r+0x9c>)
 8006e60:	4680      	mov	r8, r0
 8006e62:	4628      	mov	r0, r5
 8006e64:	f000 fb4a 	bl	80074fc <__malloc_lock>
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	685e      	ldr	r6, [r3, #4]
 8006e6c:	f026 0603 	bic.w	r6, r6, #3
 8006e70:	1b34      	subs	r4, r6, r4
 8006e72:	3c11      	subs	r4, #17
 8006e74:	4444      	add	r4, r8
 8006e76:	fbb4 f4f8 	udiv	r4, r4, r8
 8006e7a:	3c01      	subs	r4, #1
 8006e7c:	fb08 f404 	mul.w	r4, r8, r4
 8006e80:	45a0      	cmp	r8, r4
 8006e82:	dd05      	ble.n	8006e90 <_malloc_trim_r+0x40>
 8006e84:	4628      	mov	r0, r5
 8006e86:	f000 fb3f 	bl	8007508 <__malloc_unlock>
 8006e8a:	2000      	movs	r0, #0
 8006e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e90:	2100      	movs	r1, #0
 8006e92:	4628      	mov	r0, r5
 8006e94:	f000 fe24 	bl	8007ae0 <_sbrk_r>
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	4433      	add	r3, r6
 8006e9c:	4298      	cmp	r0, r3
 8006e9e:	d1f1      	bne.n	8006e84 <_malloc_trim_r+0x34>
 8006ea0:	4261      	negs	r1, r4
 8006ea2:	4628      	mov	r0, r5
 8006ea4:	f000 fe1c 	bl	8007ae0 <_sbrk_r>
 8006ea8:	3001      	adds	r0, #1
 8006eaa:	d110      	bne.n	8006ece <_malloc_trim_r+0x7e>
 8006eac:	2100      	movs	r1, #0
 8006eae:	4628      	mov	r0, r5
 8006eb0:	f000 fe16 	bl	8007ae0 <_sbrk_r>
 8006eb4:	68ba      	ldr	r2, [r7, #8]
 8006eb6:	1a83      	subs	r3, r0, r2
 8006eb8:	2b0f      	cmp	r3, #15
 8006eba:	dde3      	ble.n	8006e84 <_malloc_trim_r+0x34>
 8006ebc:	490c      	ldr	r1, [pc, #48]	; (8006ef0 <_malloc_trim_r+0xa0>)
 8006ebe:	6809      	ldr	r1, [r1, #0]
 8006ec0:	1a40      	subs	r0, r0, r1
 8006ec2:	490c      	ldr	r1, [pc, #48]	; (8006ef4 <_malloc_trim_r+0xa4>)
 8006ec4:	f043 0301 	orr.w	r3, r3, #1
 8006ec8:	6008      	str	r0, [r1, #0]
 8006eca:	6053      	str	r3, [r2, #4]
 8006ecc:	e7da      	b.n	8006e84 <_malloc_trim_r+0x34>
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	4a08      	ldr	r2, [pc, #32]	; (8006ef4 <_malloc_trim_r+0xa4>)
 8006ed2:	1b36      	subs	r6, r6, r4
 8006ed4:	f046 0601 	orr.w	r6, r6, #1
 8006ed8:	605e      	str	r6, [r3, #4]
 8006eda:	6813      	ldr	r3, [r2, #0]
 8006edc:	4628      	mov	r0, r5
 8006ede:	1b1c      	subs	r4, r3, r4
 8006ee0:	6014      	str	r4, [r2, #0]
 8006ee2:	f000 fb11 	bl	8007508 <__malloc_unlock>
 8006ee6:	2001      	movs	r0, #1
 8006ee8:	e7d0      	b.n	8006e8c <_malloc_trim_r+0x3c>
 8006eea:	bf00      	nop
 8006eec:	20000544 	.word	0x20000544
 8006ef0:	2000094c 	.word	0x2000094c
 8006ef4:	2001395c 	.word	0x2001395c

08006ef8 <_free_r>:
 8006ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006efc:	4604      	mov	r4, r0
 8006efe:	4688      	mov	r8, r1
 8006f00:	2900      	cmp	r1, #0
 8006f02:	f000 80ab 	beq.w	800705c <_free_r+0x164>
 8006f06:	f000 faf9 	bl	80074fc <__malloc_lock>
 8006f0a:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8006f0e:	4d54      	ldr	r5, [pc, #336]	; (8007060 <_free_r+0x168>)
 8006f10:	f022 0001 	bic.w	r0, r2, #1
 8006f14:	f1a8 0308 	sub.w	r3, r8, #8
 8006f18:	181f      	adds	r7, r3, r0
 8006f1a:	68a9      	ldr	r1, [r5, #8]
 8006f1c:	687e      	ldr	r6, [r7, #4]
 8006f1e:	42b9      	cmp	r1, r7
 8006f20:	f026 0603 	bic.w	r6, r6, #3
 8006f24:	f002 0201 	and.w	r2, r2, #1
 8006f28:	d11b      	bne.n	8006f62 <_free_r+0x6a>
 8006f2a:	4430      	add	r0, r6
 8006f2c:	b93a      	cbnz	r2, 8006f3e <_free_r+0x46>
 8006f2e:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8006f32:	1a9b      	subs	r3, r3, r2
 8006f34:	4410      	add	r0, r2
 8006f36:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8006f3a:	60ca      	str	r2, [r1, #12]
 8006f3c:	6091      	str	r1, [r2, #8]
 8006f3e:	f040 0201 	orr.w	r2, r0, #1
 8006f42:	605a      	str	r2, [r3, #4]
 8006f44:	60ab      	str	r3, [r5, #8]
 8006f46:	4b47      	ldr	r3, [pc, #284]	; (8007064 <_free_r+0x16c>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4283      	cmp	r3, r0
 8006f4c:	d804      	bhi.n	8006f58 <_free_r+0x60>
 8006f4e:	4b46      	ldr	r3, [pc, #280]	; (8007068 <_free_r+0x170>)
 8006f50:	4620      	mov	r0, r4
 8006f52:	6819      	ldr	r1, [r3, #0]
 8006f54:	f7ff ff7c 	bl	8006e50 <_malloc_trim_r>
 8006f58:	4620      	mov	r0, r4
 8006f5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f5e:	f000 bad3 	b.w	8007508 <__malloc_unlock>
 8006f62:	607e      	str	r6, [r7, #4]
 8006f64:	2a00      	cmp	r2, #0
 8006f66:	d139      	bne.n	8006fdc <_free_r+0xe4>
 8006f68:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8006f6c:	1a5b      	subs	r3, r3, r1
 8006f6e:	4408      	add	r0, r1
 8006f70:	6899      	ldr	r1, [r3, #8]
 8006f72:	f105 0c08 	add.w	ip, r5, #8
 8006f76:	4561      	cmp	r1, ip
 8006f78:	d032      	beq.n	8006fe0 <_free_r+0xe8>
 8006f7a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8006f7e:	f8c1 c00c 	str.w	ip, [r1, #12]
 8006f82:	f8cc 1008 	str.w	r1, [ip, #8]
 8006f86:	19b9      	adds	r1, r7, r6
 8006f88:	6849      	ldr	r1, [r1, #4]
 8006f8a:	07c9      	lsls	r1, r1, #31
 8006f8c:	d40a      	bmi.n	8006fa4 <_free_r+0xac>
 8006f8e:	4430      	add	r0, r6
 8006f90:	68b9      	ldr	r1, [r7, #8]
 8006f92:	bb3a      	cbnz	r2, 8006fe4 <_free_r+0xec>
 8006f94:	4e35      	ldr	r6, [pc, #212]	; (800706c <_free_r+0x174>)
 8006f96:	42b1      	cmp	r1, r6
 8006f98:	d124      	bne.n	8006fe4 <_free_r+0xec>
 8006f9a:	e9c5 3304 	strd	r3, r3, [r5, #16]
 8006f9e:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	f040 0101 	orr.w	r1, r0, #1
 8006fa8:	6059      	str	r1, [r3, #4]
 8006faa:	5018      	str	r0, [r3, r0]
 8006fac:	2a00      	cmp	r2, #0
 8006fae:	d1d3      	bne.n	8006f58 <_free_r+0x60>
 8006fb0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8006fb4:	d21a      	bcs.n	8006fec <_free_r+0xf4>
 8006fb6:	08c0      	lsrs	r0, r0, #3
 8006fb8:	1081      	asrs	r1, r0, #2
 8006fba:	2201      	movs	r2, #1
 8006fbc:	408a      	lsls	r2, r1
 8006fbe:	6869      	ldr	r1, [r5, #4]
 8006fc0:	3001      	adds	r0, #1
 8006fc2:	430a      	orrs	r2, r1
 8006fc4:	606a      	str	r2, [r5, #4]
 8006fc6:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8006fca:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8006fce:	3a08      	subs	r2, #8
 8006fd0:	e9c3 1202 	strd	r1, r2, [r3, #8]
 8006fd4:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8006fd8:	60cb      	str	r3, [r1, #12]
 8006fda:	e7bd      	b.n	8006f58 <_free_r+0x60>
 8006fdc:	2200      	movs	r2, #0
 8006fde:	e7d2      	b.n	8006f86 <_free_r+0x8e>
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	e7d0      	b.n	8006f86 <_free_r+0x8e>
 8006fe4:	68fe      	ldr	r6, [r7, #12]
 8006fe6:	60ce      	str	r6, [r1, #12]
 8006fe8:	60b1      	str	r1, [r6, #8]
 8006fea:	e7db      	b.n	8006fa4 <_free_r+0xac>
 8006fec:	0a42      	lsrs	r2, r0, #9
 8006fee:	2a04      	cmp	r2, #4
 8006ff0:	d813      	bhi.n	800701a <_free_r+0x122>
 8006ff2:	0982      	lsrs	r2, r0, #6
 8006ff4:	3238      	adds	r2, #56	; 0x38
 8006ff6:	1c51      	adds	r1, r2, #1
 8006ff8:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8006ffc:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8007000:	428e      	cmp	r6, r1
 8007002:	d124      	bne.n	800704e <_free_r+0x156>
 8007004:	2001      	movs	r0, #1
 8007006:	1092      	asrs	r2, r2, #2
 8007008:	fa00 f202 	lsl.w	r2, r0, r2
 800700c:	6868      	ldr	r0, [r5, #4]
 800700e:	4302      	orrs	r2, r0
 8007010:	606a      	str	r2, [r5, #4]
 8007012:	e9c3 1602 	strd	r1, r6, [r3, #8]
 8007016:	60b3      	str	r3, [r6, #8]
 8007018:	e7de      	b.n	8006fd8 <_free_r+0xe0>
 800701a:	2a14      	cmp	r2, #20
 800701c:	d801      	bhi.n	8007022 <_free_r+0x12a>
 800701e:	325b      	adds	r2, #91	; 0x5b
 8007020:	e7e9      	b.n	8006ff6 <_free_r+0xfe>
 8007022:	2a54      	cmp	r2, #84	; 0x54
 8007024:	d802      	bhi.n	800702c <_free_r+0x134>
 8007026:	0b02      	lsrs	r2, r0, #12
 8007028:	326e      	adds	r2, #110	; 0x6e
 800702a:	e7e4      	b.n	8006ff6 <_free_r+0xfe>
 800702c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8007030:	d802      	bhi.n	8007038 <_free_r+0x140>
 8007032:	0bc2      	lsrs	r2, r0, #15
 8007034:	3277      	adds	r2, #119	; 0x77
 8007036:	e7de      	b.n	8006ff6 <_free_r+0xfe>
 8007038:	f240 5154 	movw	r1, #1364	; 0x554
 800703c:	428a      	cmp	r2, r1
 800703e:	bf9a      	itte	ls
 8007040:	0c82      	lsrls	r2, r0, #18
 8007042:	327c      	addls	r2, #124	; 0x7c
 8007044:	227e      	movhi	r2, #126	; 0x7e
 8007046:	e7d6      	b.n	8006ff6 <_free_r+0xfe>
 8007048:	6889      	ldr	r1, [r1, #8]
 800704a:	428e      	cmp	r6, r1
 800704c:	d004      	beq.n	8007058 <_free_r+0x160>
 800704e:	684a      	ldr	r2, [r1, #4]
 8007050:	f022 0203 	bic.w	r2, r2, #3
 8007054:	4282      	cmp	r2, r0
 8007056:	d8f7      	bhi.n	8007048 <_free_r+0x150>
 8007058:	68ce      	ldr	r6, [r1, #12]
 800705a:	e7da      	b.n	8007012 <_free_r+0x11a>
 800705c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007060:	20000544 	.word	0x20000544
 8007064:	20000950 	.word	0x20000950
 8007068:	2001398c 	.word	0x2001398c
 800706c:	2000054c 	.word	0x2000054c

08007070 <_localeconv_r>:
 8007070:	4b04      	ldr	r3, [pc, #16]	; (8007084 <_localeconv_r+0x14>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007076:	4b04      	ldr	r3, [pc, #16]	; (8007088 <_localeconv_r+0x18>)
 8007078:	2800      	cmp	r0, #0
 800707a:	bf08      	it	eq
 800707c:	4618      	moveq	r0, r3
 800707e:	30f0      	adds	r0, #240	; 0xf0
 8007080:	4770      	bx	lr
 8007082:	bf00      	nop
 8007084:	20000110 	.word	0x20000110
 8007088:	20000954 	.word	0x20000954

0800708c <__retarget_lock_acquire_recursive>:
 800708c:	4770      	bx	lr

0800708e <__retarget_lock_release_recursive>:
 800708e:	4770      	bx	lr

08007090 <_malloc_r>:
 8007090:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007094:	f101 050b 	add.w	r5, r1, #11
 8007098:	2d16      	cmp	r5, #22
 800709a:	4606      	mov	r6, r0
 800709c:	d906      	bls.n	80070ac <_malloc_r+0x1c>
 800709e:	f035 0507 	bics.w	r5, r5, #7
 80070a2:	d504      	bpl.n	80070ae <_malloc_r+0x1e>
 80070a4:	230c      	movs	r3, #12
 80070a6:	6033      	str	r3, [r6, #0]
 80070a8:	2400      	movs	r4, #0
 80070aa:	e1a8      	b.n	80073fe <_malloc_r+0x36e>
 80070ac:	2510      	movs	r5, #16
 80070ae:	428d      	cmp	r5, r1
 80070b0:	d3f8      	bcc.n	80070a4 <_malloc_r+0x14>
 80070b2:	4630      	mov	r0, r6
 80070b4:	f000 fa22 	bl	80074fc <__malloc_lock>
 80070b8:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 80070bc:	4fc0      	ldr	r7, [pc, #768]	; (80073c0 <_malloc_r+0x330>)
 80070be:	d238      	bcs.n	8007132 <_malloc_r+0xa2>
 80070c0:	f105 0208 	add.w	r2, r5, #8
 80070c4:	443a      	add	r2, r7
 80070c6:	f1a2 0108 	sub.w	r1, r2, #8
 80070ca:	6854      	ldr	r4, [r2, #4]
 80070cc:	428c      	cmp	r4, r1
 80070ce:	ea4f 03d5 	mov.w	r3, r5, lsr #3
 80070d2:	d102      	bne.n	80070da <_malloc_r+0x4a>
 80070d4:	68d4      	ldr	r4, [r2, #12]
 80070d6:	42a2      	cmp	r2, r4
 80070d8:	d010      	beq.n	80070fc <_malloc_r+0x6c>
 80070da:	6863      	ldr	r3, [r4, #4]
 80070dc:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80070e0:	f023 0303 	bic.w	r3, r3, #3
 80070e4:	60ca      	str	r2, [r1, #12]
 80070e6:	4423      	add	r3, r4
 80070e8:	6091      	str	r1, [r2, #8]
 80070ea:	685a      	ldr	r2, [r3, #4]
 80070ec:	f042 0201 	orr.w	r2, r2, #1
 80070f0:	605a      	str	r2, [r3, #4]
 80070f2:	4630      	mov	r0, r6
 80070f4:	f000 fa08 	bl	8007508 <__malloc_unlock>
 80070f8:	3408      	adds	r4, #8
 80070fa:	e180      	b.n	80073fe <_malloc_r+0x36e>
 80070fc:	3302      	adds	r3, #2
 80070fe:	4ab1      	ldr	r2, [pc, #708]	; (80073c4 <_malloc_r+0x334>)
 8007100:	693c      	ldr	r4, [r7, #16]
 8007102:	4294      	cmp	r4, r2
 8007104:	4611      	mov	r1, r2
 8007106:	d075      	beq.n	80071f4 <_malloc_r+0x164>
 8007108:	6860      	ldr	r0, [r4, #4]
 800710a:	f020 0c03 	bic.w	ip, r0, #3
 800710e:	ebac 0005 	sub.w	r0, ip, r5
 8007112:	280f      	cmp	r0, #15
 8007114:	dd48      	ble.n	80071a8 <_malloc_r+0x118>
 8007116:	1963      	adds	r3, r4, r5
 8007118:	f045 0501 	orr.w	r5, r5, #1
 800711c:	6065      	str	r5, [r4, #4]
 800711e:	e9c7 3304 	strd	r3, r3, [r7, #16]
 8007122:	e9c3 2202 	strd	r2, r2, [r3, #8]
 8007126:	f040 0201 	orr.w	r2, r0, #1
 800712a:	605a      	str	r2, [r3, #4]
 800712c:	f844 000c 	str.w	r0, [r4, ip]
 8007130:	e7df      	b.n	80070f2 <_malloc_r+0x62>
 8007132:	0a6b      	lsrs	r3, r5, #9
 8007134:	d02a      	beq.n	800718c <_malloc_r+0xfc>
 8007136:	2b04      	cmp	r3, #4
 8007138:	d812      	bhi.n	8007160 <_malloc_r+0xd0>
 800713a:	09ab      	lsrs	r3, r5, #6
 800713c:	3338      	adds	r3, #56	; 0x38
 800713e:	1c5a      	adds	r2, r3, #1
 8007140:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 8007144:	f1a2 0c08 	sub.w	ip, r2, #8
 8007148:	6854      	ldr	r4, [r2, #4]
 800714a:	4564      	cmp	r4, ip
 800714c:	d006      	beq.n	800715c <_malloc_r+0xcc>
 800714e:	6862      	ldr	r2, [r4, #4]
 8007150:	f022 0203 	bic.w	r2, r2, #3
 8007154:	1b50      	subs	r0, r2, r5
 8007156:	280f      	cmp	r0, #15
 8007158:	dd1c      	ble.n	8007194 <_malloc_r+0x104>
 800715a:	3b01      	subs	r3, #1
 800715c:	3301      	adds	r3, #1
 800715e:	e7ce      	b.n	80070fe <_malloc_r+0x6e>
 8007160:	2b14      	cmp	r3, #20
 8007162:	d801      	bhi.n	8007168 <_malloc_r+0xd8>
 8007164:	335b      	adds	r3, #91	; 0x5b
 8007166:	e7ea      	b.n	800713e <_malloc_r+0xae>
 8007168:	2b54      	cmp	r3, #84	; 0x54
 800716a:	d802      	bhi.n	8007172 <_malloc_r+0xe2>
 800716c:	0b2b      	lsrs	r3, r5, #12
 800716e:	336e      	adds	r3, #110	; 0x6e
 8007170:	e7e5      	b.n	800713e <_malloc_r+0xae>
 8007172:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8007176:	d802      	bhi.n	800717e <_malloc_r+0xee>
 8007178:	0beb      	lsrs	r3, r5, #15
 800717a:	3377      	adds	r3, #119	; 0x77
 800717c:	e7df      	b.n	800713e <_malloc_r+0xae>
 800717e:	f240 5254 	movw	r2, #1364	; 0x554
 8007182:	4293      	cmp	r3, r2
 8007184:	d804      	bhi.n	8007190 <_malloc_r+0x100>
 8007186:	0cab      	lsrs	r3, r5, #18
 8007188:	337c      	adds	r3, #124	; 0x7c
 800718a:	e7d8      	b.n	800713e <_malloc_r+0xae>
 800718c:	233f      	movs	r3, #63	; 0x3f
 800718e:	e7d6      	b.n	800713e <_malloc_r+0xae>
 8007190:	237e      	movs	r3, #126	; 0x7e
 8007192:	e7d4      	b.n	800713e <_malloc_r+0xae>
 8007194:	2800      	cmp	r0, #0
 8007196:	68e1      	ldr	r1, [r4, #12]
 8007198:	db04      	blt.n	80071a4 <_malloc_r+0x114>
 800719a:	68a3      	ldr	r3, [r4, #8]
 800719c:	60d9      	str	r1, [r3, #12]
 800719e:	608b      	str	r3, [r1, #8]
 80071a0:	18a3      	adds	r3, r4, r2
 80071a2:	e7a2      	b.n	80070ea <_malloc_r+0x5a>
 80071a4:	460c      	mov	r4, r1
 80071a6:	e7d0      	b.n	800714a <_malloc_r+0xba>
 80071a8:	2800      	cmp	r0, #0
 80071aa:	e9c7 2204 	strd	r2, r2, [r7, #16]
 80071ae:	db07      	blt.n	80071c0 <_malloc_r+0x130>
 80071b0:	44a4      	add	ip, r4
 80071b2:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80071b6:	f043 0301 	orr.w	r3, r3, #1
 80071ba:	f8cc 3004 	str.w	r3, [ip, #4]
 80071be:	e798      	b.n	80070f2 <_malloc_r+0x62>
 80071c0:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f080 8099 	bcs.w	80072fc <_malloc_r+0x26c>
 80071ca:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 80071ce:	ea4f 0eac 	mov.w	lr, ip, asr #2
 80071d2:	2201      	movs	r2, #1
 80071d4:	f10c 0c01 	add.w	ip, ip, #1
 80071d8:	fa02 f20e 	lsl.w	r2, r2, lr
 80071dc:	4310      	orrs	r0, r2
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	eb07 02cc 	add.w	r2, r7, ip, lsl #3
 80071e4:	f857 003c 	ldr.w	r0, [r7, ip, lsl #3]
 80071e8:	3a08      	subs	r2, #8
 80071ea:	e9c4 0202 	strd	r0, r2, [r4, #8]
 80071ee:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
 80071f2:	60c4      	str	r4, [r0, #12]
 80071f4:	2001      	movs	r0, #1
 80071f6:	109a      	asrs	r2, r3, #2
 80071f8:	fa00 f202 	lsl.w	r2, r0, r2
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	4290      	cmp	r0, r2
 8007200:	d326      	bcc.n	8007250 <_malloc_r+0x1c0>
 8007202:	4210      	tst	r0, r2
 8007204:	d106      	bne.n	8007214 <_malloc_r+0x184>
 8007206:	f023 0303 	bic.w	r3, r3, #3
 800720a:	0052      	lsls	r2, r2, #1
 800720c:	4210      	tst	r0, r2
 800720e:	f103 0304 	add.w	r3, r3, #4
 8007212:	d0fa      	beq.n	800720a <_malloc_r+0x17a>
 8007214:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
 8007218:	46e1      	mov	r9, ip
 800721a:	4698      	mov	r8, r3
 800721c:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8007220:	454c      	cmp	r4, r9
 8007222:	f040 80af 	bne.w	8007384 <_malloc_r+0x2f4>
 8007226:	f108 0801 	add.w	r8, r8, #1
 800722a:	f018 0f03 	tst.w	r8, #3
 800722e:	f109 0908 	add.w	r9, r9, #8
 8007232:	d1f3      	bne.n	800721c <_malloc_r+0x18c>
 8007234:	0798      	lsls	r0, r3, #30
 8007236:	f040 80e8 	bne.w	800740a <_malloc_r+0x37a>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	ea23 0302 	bic.w	r3, r3, r2
 8007240:	607b      	str	r3, [r7, #4]
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	0052      	lsls	r2, r2, #1
 8007246:	4290      	cmp	r0, r2
 8007248:	d302      	bcc.n	8007250 <_malloc_r+0x1c0>
 800724a:	2a00      	cmp	r2, #0
 800724c:	f040 80ec 	bne.w	8007428 <_malloc_r+0x398>
 8007250:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8007254:	f8da 4004 	ldr.w	r4, [sl, #4]
 8007258:	f024 0203 	bic.w	r2, r4, #3
 800725c:	42aa      	cmp	r2, r5
 800725e:	d303      	bcc.n	8007268 <_malloc_r+0x1d8>
 8007260:	1b53      	subs	r3, r2, r5
 8007262:	2b0f      	cmp	r3, #15
 8007264:	f300 8140 	bgt.w	80074e8 <_malloc_r+0x458>
 8007268:	4b57      	ldr	r3, [pc, #348]	; (80073c8 <_malloc_r+0x338>)
 800726a:	9200      	str	r2, [sp, #0]
 800726c:	2008      	movs	r0, #8
 800726e:	681c      	ldr	r4, [r3, #0]
 8007270:	f000 fcd3 	bl	8007c1a <sysconf>
 8007274:	4b55      	ldr	r3, [pc, #340]	; (80073cc <_malloc_r+0x33c>)
 8007276:	9a00      	ldr	r2, [sp, #0]
 8007278:	6819      	ldr	r1, [r3, #0]
 800727a:	3410      	adds	r4, #16
 800727c:	3101      	adds	r1, #1
 800727e:	442c      	add	r4, r5
 8007280:	bf1f      	itttt	ne
 8007282:	f104 34ff 	addne.w	r4, r4, #4294967295
 8007286:	1824      	addne	r4, r4, r0
 8007288:	4241      	negne	r1, r0
 800728a:	400c      	andne	r4, r1
 800728c:	4680      	mov	r8, r0
 800728e:	4621      	mov	r1, r4
 8007290:	4630      	mov	r0, r6
 8007292:	e9cd 2300 	strd	r2, r3, [sp]
 8007296:	f000 fc23 	bl	8007ae0 <_sbrk_r>
 800729a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800729e:	4683      	mov	fp, r0
 80072a0:	f000 80fb 	beq.w	800749a <_malloc_r+0x40a>
 80072a4:	9a00      	ldr	r2, [sp, #0]
 80072a6:	9b01      	ldr	r3, [sp, #4]
 80072a8:	eb0a 0102 	add.w	r1, sl, r2
 80072ac:	4281      	cmp	r1, r0
 80072ae:	d902      	bls.n	80072b6 <_malloc_r+0x226>
 80072b0:	45ba      	cmp	sl, r7
 80072b2:	f040 80f2 	bne.w	800749a <_malloc_r+0x40a>
 80072b6:	f8df 9120 	ldr.w	r9, [pc, #288]	; 80073d8 <_malloc_r+0x348>
 80072ba:	f8d9 0000 	ldr.w	r0, [r9]
 80072be:	4559      	cmp	r1, fp
 80072c0:	eb00 0e04 	add.w	lr, r0, r4
 80072c4:	f8c9 e000 	str.w	lr, [r9]
 80072c8:	f108 3cff 	add.w	ip, r8, #4294967295
 80072cc:	f040 80ae 	bne.w	800742c <_malloc_r+0x39c>
 80072d0:	ea11 0f0c 	tst.w	r1, ip
 80072d4:	f040 80aa 	bne.w	800742c <_malloc_r+0x39c>
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	4414      	add	r4, r2
 80072dc:	f044 0401 	orr.w	r4, r4, #1
 80072e0:	605c      	str	r4, [r3, #4]
 80072e2:	4a3b      	ldr	r2, [pc, #236]	; (80073d0 <_malloc_r+0x340>)
 80072e4:	f8d9 3000 	ldr.w	r3, [r9]
 80072e8:	6811      	ldr	r1, [r2, #0]
 80072ea:	428b      	cmp	r3, r1
 80072ec:	bf88      	it	hi
 80072ee:	6013      	strhi	r3, [r2, #0]
 80072f0:	4a38      	ldr	r2, [pc, #224]	; (80073d4 <_malloc_r+0x344>)
 80072f2:	6811      	ldr	r1, [r2, #0]
 80072f4:	428b      	cmp	r3, r1
 80072f6:	bf88      	it	hi
 80072f8:	6013      	strhi	r3, [r2, #0]
 80072fa:	e0ce      	b.n	800749a <_malloc_r+0x40a>
 80072fc:	ea4f 225c 	mov.w	r2, ip, lsr #9
 8007300:	2a04      	cmp	r2, #4
 8007302:	d818      	bhi.n	8007336 <_malloc_r+0x2a6>
 8007304:	ea4f 129c 	mov.w	r2, ip, lsr #6
 8007308:	3238      	adds	r2, #56	; 0x38
 800730a:	f102 0e01 	add.w	lr, r2, #1
 800730e:	eb07 08c2 	add.w	r8, r7, r2, lsl #3
 8007312:	f857 e03e 	ldr.w	lr, [r7, lr, lsl #3]
 8007316:	45f0      	cmp	r8, lr
 8007318:	d12b      	bne.n	8007372 <_malloc_r+0x2e2>
 800731a:	1092      	asrs	r2, r2, #2
 800731c:	f04f 0c01 	mov.w	ip, #1
 8007320:	fa0c f202 	lsl.w	r2, ip, r2
 8007324:	4310      	orrs	r0, r2
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	e9c4 e802 	strd	lr, r8, [r4, #8]
 800732c:	f8c8 4008 	str.w	r4, [r8, #8]
 8007330:	f8ce 400c 	str.w	r4, [lr, #12]
 8007334:	e75e      	b.n	80071f4 <_malloc_r+0x164>
 8007336:	2a14      	cmp	r2, #20
 8007338:	d801      	bhi.n	800733e <_malloc_r+0x2ae>
 800733a:	325b      	adds	r2, #91	; 0x5b
 800733c:	e7e5      	b.n	800730a <_malloc_r+0x27a>
 800733e:	2a54      	cmp	r2, #84	; 0x54
 8007340:	d803      	bhi.n	800734a <_malloc_r+0x2ba>
 8007342:	ea4f 321c 	mov.w	r2, ip, lsr #12
 8007346:	326e      	adds	r2, #110	; 0x6e
 8007348:	e7df      	b.n	800730a <_malloc_r+0x27a>
 800734a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800734e:	d803      	bhi.n	8007358 <_malloc_r+0x2c8>
 8007350:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 8007354:	3277      	adds	r2, #119	; 0x77
 8007356:	e7d8      	b.n	800730a <_malloc_r+0x27a>
 8007358:	f240 5e54 	movw	lr, #1364	; 0x554
 800735c:	4572      	cmp	r2, lr
 800735e:	bf9a      	itte	ls
 8007360:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8007364:	327c      	addls	r2, #124	; 0x7c
 8007366:	227e      	movhi	r2, #126	; 0x7e
 8007368:	e7cf      	b.n	800730a <_malloc_r+0x27a>
 800736a:	f8de e008 	ldr.w	lr, [lr, #8]
 800736e:	45f0      	cmp	r8, lr
 8007370:	d005      	beq.n	800737e <_malloc_r+0x2ee>
 8007372:	f8de 2004 	ldr.w	r2, [lr, #4]
 8007376:	f022 0203 	bic.w	r2, r2, #3
 800737a:	4562      	cmp	r2, ip
 800737c:	d8f5      	bhi.n	800736a <_malloc_r+0x2da>
 800737e:	f8de 800c 	ldr.w	r8, [lr, #12]
 8007382:	e7d1      	b.n	8007328 <_malloc_r+0x298>
 8007384:	6860      	ldr	r0, [r4, #4]
 8007386:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 800738a:	f020 0003 	bic.w	r0, r0, #3
 800738e:	eba0 0a05 	sub.w	sl, r0, r5
 8007392:	f1ba 0f0f 	cmp.w	sl, #15
 8007396:	dd21      	ble.n	80073dc <_malloc_r+0x34c>
 8007398:	68a2      	ldr	r2, [r4, #8]
 800739a:	1963      	adds	r3, r4, r5
 800739c:	f045 0501 	orr.w	r5, r5, #1
 80073a0:	6065      	str	r5, [r4, #4]
 80073a2:	f8c2 e00c 	str.w	lr, [r2, #12]
 80073a6:	f8ce 2008 	str.w	r2, [lr, #8]
 80073aa:	f04a 0201 	orr.w	r2, sl, #1
 80073ae:	e9c7 3304 	strd	r3, r3, [r7, #16]
 80073b2:	e9c3 1102 	strd	r1, r1, [r3, #8]
 80073b6:	605a      	str	r2, [r3, #4]
 80073b8:	f844 a000 	str.w	sl, [r4, r0]
 80073bc:	e699      	b.n	80070f2 <_malloc_r+0x62>
 80073be:	bf00      	nop
 80073c0:	20000544 	.word	0x20000544
 80073c4:	2000054c 	.word	0x2000054c
 80073c8:	2001398c 	.word	0x2001398c
 80073cc:	2000094c 	.word	0x2000094c
 80073d0:	20013984 	.word	0x20013984
 80073d4:	20013988 	.word	0x20013988
 80073d8:	2001395c 	.word	0x2001395c
 80073dc:	f1ba 0f00 	cmp.w	sl, #0
 80073e0:	db11      	blt.n	8007406 <_malloc_r+0x376>
 80073e2:	4420      	add	r0, r4
 80073e4:	6843      	ldr	r3, [r0, #4]
 80073e6:	f043 0301 	orr.w	r3, r3, #1
 80073ea:	6043      	str	r3, [r0, #4]
 80073ec:	f854 3f08 	ldr.w	r3, [r4, #8]!
 80073f0:	4630      	mov	r0, r6
 80073f2:	f8c3 e00c 	str.w	lr, [r3, #12]
 80073f6:	f8ce 3008 	str.w	r3, [lr, #8]
 80073fa:	f000 f885 	bl	8007508 <__malloc_unlock>
 80073fe:	4620      	mov	r0, r4
 8007400:	b003      	add	sp, #12
 8007402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007406:	4674      	mov	r4, lr
 8007408:	e70a      	b.n	8007220 <_malloc_r+0x190>
 800740a:	f1ac 0008 	sub.w	r0, ip, #8
 800740e:	f8dc c000 	ldr.w	ip, [ip]
 8007412:	4584      	cmp	ip, r0
 8007414:	f103 33ff 	add.w	r3, r3, #4294967295
 8007418:	f43f af0c 	beq.w	8007234 <_malloc_r+0x1a4>
 800741c:	e711      	b.n	8007242 <_malloc_r+0x1b2>
 800741e:	3304      	adds	r3, #4
 8007420:	0052      	lsls	r2, r2, #1
 8007422:	4210      	tst	r0, r2
 8007424:	d0fb      	beq.n	800741e <_malloc_r+0x38e>
 8007426:	e6f5      	b.n	8007214 <_malloc_r+0x184>
 8007428:	4643      	mov	r3, r8
 800742a:	e7fa      	b.n	8007422 <_malloc_r+0x392>
 800742c:	6818      	ldr	r0, [r3, #0]
 800742e:	9200      	str	r2, [sp, #0]
 8007430:	3001      	adds	r0, #1
 8007432:	bf1b      	ittet	ne
 8007434:	ebab 0101 	subne.w	r1, fp, r1
 8007438:	4471      	addne	r1, lr
 800743a:	f8c3 b000 	streq.w	fp, [r3]
 800743e:	f8c9 1000 	strne.w	r1, [r9]
 8007442:	f01b 0307 	ands.w	r3, fp, #7
 8007446:	bf1c      	itt	ne
 8007448:	f1c3 0308 	rsbne	r3, r3, #8
 800744c:	449b      	addne	fp, r3
 800744e:	445c      	add	r4, fp
 8007450:	4498      	add	r8, r3
 8007452:	ea04 030c 	and.w	r3, r4, ip
 8007456:	eba8 0803 	sub.w	r8, r8, r3
 800745a:	4641      	mov	r1, r8
 800745c:	4630      	mov	r0, r6
 800745e:	f000 fb3f 	bl	8007ae0 <_sbrk_r>
 8007462:	1c43      	adds	r3, r0, #1
 8007464:	bf04      	itt	eq
 8007466:	4658      	moveq	r0, fp
 8007468:	f04f 0800 	moveq.w	r8, #0
 800746c:	f8d9 3000 	ldr.w	r3, [r9]
 8007470:	f8c7 b008 	str.w	fp, [r7, #8]
 8007474:	eba0 000b 	sub.w	r0, r0, fp
 8007478:	4440      	add	r0, r8
 800747a:	4443      	add	r3, r8
 800747c:	f040 0001 	orr.w	r0, r0, #1
 8007480:	45ba      	cmp	sl, r7
 8007482:	9a00      	ldr	r2, [sp, #0]
 8007484:	f8c9 3000 	str.w	r3, [r9]
 8007488:	f8cb 0004 	str.w	r0, [fp, #4]
 800748c:	f43f af29 	beq.w	80072e2 <_malloc_r+0x252>
 8007490:	2a0f      	cmp	r2, #15
 8007492:	d810      	bhi.n	80074b6 <_malloc_r+0x426>
 8007494:	2301      	movs	r3, #1
 8007496:	f8cb 3004 	str.w	r3, [fp, #4]
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	685a      	ldr	r2, [r3, #4]
 800749e:	f022 0203 	bic.w	r2, r2, #3
 80074a2:	42aa      	cmp	r2, r5
 80074a4:	eba2 0305 	sub.w	r3, r2, r5
 80074a8:	d301      	bcc.n	80074ae <_malloc_r+0x41e>
 80074aa:	2b0f      	cmp	r3, #15
 80074ac:	dc1c      	bgt.n	80074e8 <_malloc_r+0x458>
 80074ae:	4630      	mov	r0, r6
 80074b0:	f000 f82a 	bl	8007508 <__malloc_unlock>
 80074b4:	e5f8      	b.n	80070a8 <_malloc_r+0x18>
 80074b6:	f8da 3004 	ldr.w	r3, [sl, #4]
 80074ba:	f1a2 040c 	sub.w	r4, r2, #12
 80074be:	f024 0407 	bic.w	r4, r4, #7
 80074c2:	f003 0301 	and.w	r3, r3, #1
 80074c6:	4323      	orrs	r3, r4
 80074c8:	f8ca 3004 	str.w	r3, [sl, #4]
 80074cc:	2205      	movs	r2, #5
 80074ce:	eb0a 0304 	add.w	r3, sl, r4
 80074d2:	2c0f      	cmp	r4, #15
 80074d4:	e9c3 2201 	strd	r2, r2, [r3, #4]
 80074d8:	f67f af03 	bls.w	80072e2 <_malloc_r+0x252>
 80074dc:	f10a 0108 	add.w	r1, sl, #8
 80074e0:	4630      	mov	r0, r6
 80074e2:	f7ff fd09 	bl	8006ef8 <_free_r>
 80074e6:	e6fc      	b.n	80072e2 <_malloc_r+0x252>
 80074e8:	68bc      	ldr	r4, [r7, #8]
 80074ea:	f045 0201 	orr.w	r2, r5, #1
 80074ee:	4425      	add	r5, r4
 80074f0:	f043 0301 	orr.w	r3, r3, #1
 80074f4:	6062      	str	r2, [r4, #4]
 80074f6:	60bd      	str	r5, [r7, #8]
 80074f8:	606b      	str	r3, [r5, #4]
 80074fa:	e5fa      	b.n	80070f2 <_malloc_r+0x62>

080074fc <__malloc_lock>:
 80074fc:	4801      	ldr	r0, [pc, #4]	; (8007504 <__malloc_lock+0x8>)
 80074fe:	f7ff bdc5 	b.w	800708c <__retarget_lock_acquire_recursive>
 8007502:	bf00      	nop
 8007504:	200139ec 	.word	0x200139ec

08007508 <__malloc_unlock>:
 8007508:	4801      	ldr	r0, [pc, #4]	; (8007510 <__malloc_unlock+0x8>)
 800750a:	f7ff bdc0 	b.w	800708e <__retarget_lock_release_recursive>
 800750e:	bf00      	nop
 8007510:	200139ec 	.word	0x200139ec

08007514 <_Balloc>:
 8007514:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8007516:	b570      	push	{r4, r5, r6, lr}
 8007518:	4605      	mov	r5, r0
 800751a:	460c      	mov	r4, r1
 800751c:	b17b      	cbz	r3, 800753e <_Balloc+0x2a>
 800751e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8007520:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8007524:	b9a0      	cbnz	r0, 8007550 <_Balloc+0x3c>
 8007526:	2101      	movs	r1, #1
 8007528:	fa01 f604 	lsl.w	r6, r1, r4
 800752c:	1d72      	adds	r2, r6, #5
 800752e:	0092      	lsls	r2, r2, #2
 8007530:	4628      	mov	r0, r5
 8007532:	f000 fbd5 	bl	8007ce0 <_calloc_r>
 8007536:	b148      	cbz	r0, 800754c <_Balloc+0x38>
 8007538:	e9c0 4601 	strd	r4, r6, [r0, #4]
 800753c:	e00b      	b.n	8007556 <_Balloc+0x42>
 800753e:	2221      	movs	r2, #33	; 0x21
 8007540:	2104      	movs	r1, #4
 8007542:	f000 fbcd 	bl	8007ce0 <_calloc_r>
 8007546:	64e8      	str	r0, [r5, #76]	; 0x4c
 8007548:	2800      	cmp	r0, #0
 800754a:	d1e8      	bne.n	800751e <_Balloc+0xa>
 800754c:	2000      	movs	r0, #0
 800754e:	bd70      	pop	{r4, r5, r6, pc}
 8007550:	6802      	ldr	r2, [r0, #0]
 8007552:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8007556:	2300      	movs	r3, #0
 8007558:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800755c:	e7f7      	b.n	800754e <_Balloc+0x3a>

0800755e <_Bfree>:
 800755e:	b131      	cbz	r1, 800756e <_Bfree+0x10>
 8007560:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8007562:	684a      	ldr	r2, [r1, #4]
 8007564:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007568:	6008      	str	r0, [r1, #0]
 800756a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800756e:	4770      	bx	lr

08007570 <__multadd>:
 8007570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007574:	690d      	ldr	r5, [r1, #16]
 8007576:	461f      	mov	r7, r3
 8007578:	4606      	mov	r6, r0
 800757a:	460c      	mov	r4, r1
 800757c:	f101 0c14 	add.w	ip, r1, #20
 8007580:	2300      	movs	r3, #0
 8007582:	f8dc 0000 	ldr.w	r0, [ip]
 8007586:	b281      	uxth	r1, r0
 8007588:	fb02 7101 	mla	r1, r2, r1, r7
 800758c:	0c0f      	lsrs	r7, r1, #16
 800758e:	0c00      	lsrs	r0, r0, #16
 8007590:	fb02 7000 	mla	r0, r2, r0, r7
 8007594:	b289      	uxth	r1, r1
 8007596:	3301      	adds	r3, #1
 8007598:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800759c:	429d      	cmp	r5, r3
 800759e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80075a2:	f84c 1b04 	str.w	r1, [ip], #4
 80075a6:	dcec      	bgt.n	8007582 <__multadd+0x12>
 80075a8:	b1d7      	cbz	r7, 80075e0 <__multadd+0x70>
 80075aa:	68a3      	ldr	r3, [r4, #8]
 80075ac:	42ab      	cmp	r3, r5
 80075ae:	dc12      	bgt.n	80075d6 <__multadd+0x66>
 80075b0:	6861      	ldr	r1, [r4, #4]
 80075b2:	4630      	mov	r0, r6
 80075b4:	3101      	adds	r1, #1
 80075b6:	f7ff ffad 	bl	8007514 <_Balloc>
 80075ba:	6922      	ldr	r2, [r4, #16]
 80075bc:	3202      	adds	r2, #2
 80075be:	f104 010c 	add.w	r1, r4, #12
 80075c2:	4680      	mov	r8, r0
 80075c4:	0092      	lsls	r2, r2, #2
 80075c6:	300c      	adds	r0, #12
 80075c8:	f7fd fb94 	bl	8004cf4 <memcpy>
 80075cc:	4621      	mov	r1, r4
 80075ce:	4630      	mov	r0, r6
 80075d0:	f7ff ffc5 	bl	800755e <_Bfree>
 80075d4:	4644      	mov	r4, r8
 80075d6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80075da:	3501      	adds	r5, #1
 80075dc:	615f      	str	r7, [r3, #20]
 80075de:	6125      	str	r5, [r4, #16]
 80075e0:	4620      	mov	r0, r4
 80075e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080075e6 <__hi0bits>:
 80075e6:	0c02      	lsrs	r2, r0, #16
 80075e8:	0412      	lsls	r2, r2, #16
 80075ea:	4603      	mov	r3, r0
 80075ec:	b9b2      	cbnz	r2, 800761c <__hi0bits+0x36>
 80075ee:	0403      	lsls	r3, r0, #16
 80075f0:	2010      	movs	r0, #16
 80075f2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80075f6:	bf04      	itt	eq
 80075f8:	021b      	lsleq	r3, r3, #8
 80075fa:	3008      	addeq	r0, #8
 80075fc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007600:	bf04      	itt	eq
 8007602:	011b      	lsleq	r3, r3, #4
 8007604:	3004      	addeq	r0, #4
 8007606:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800760a:	bf04      	itt	eq
 800760c:	009b      	lsleq	r3, r3, #2
 800760e:	3002      	addeq	r0, #2
 8007610:	2b00      	cmp	r3, #0
 8007612:	db06      	blt.n	8007622 <__hi0bits+0x3c>
 8007614:	005b      	lsls	r3, r3, #1
 8007616:	d503      	bpl.n	8007620 <__hi0bits+0x3a>
 8007618:	3001      	adds	r0, #1
 800761a:	4770      	bx	lr
 800761c:	2000      	movs	r0, #0
 800761e:	e7e8      	b.n	80075f2 <__hi0bits+0xc>
 8007620:	2020      	movs	r0, #32
 8007622:	4770      	bx	lr

08007624 <__lo0bits>:
 8007624:	6803      	ldr	r3, [r0, #0]
 8007626:	f013 0207 	ands.w	r2, r3, #7
 800762a:	4601      	mov	r1, r0
 800762c:	d00b      	beq.n	8007646 <__lo0bits+0x22>
 800762e:	07da      	lsls	r2, r3, #31
 8007630:	d423      	bmi.n	800767a <__lo0bits+0x56>
 8007632:	0798      	lsls	r0, r3, #30
 8007634:	bf49      	itett	mi
 8007636:	085b      	lsrmi	r3, r3, #1
 8007638:	089b      	lsrpl	r3, r3, #2
 800763a:	2001      	movmi	r0, #1
 800763c:	600b      	strmi	r3, [r1, #0]
 800763e:	bf5c      	itt	pl
 8007640:	600b      	strpl	r3, [r1, #0]
 8007642:	2002      	movpl	r0, #2
 8007644:	4770      	bx	lr
 8007646:	b298      	uxth	r0, r3
 8007648:	b9a8      	cbnz	r0, 8007676 <__lo0bits+0x52>
 800764a:	0c1b      	lsrs	r3, r3, #16
 800764c:	2010      	movs	r0, #16
 800764e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007652:	bf04      	itt	eq
 8007654:	0a1b      	lsreq	r3, r3, #8
 8007656:	3008      	addeq	r0, #8
 8007658:	071a      	lsls	r2, r3, #28
 800765a:	bf04      	itt	eq
 800765c:	091b      	lsreq	r3, r3, #4
 800765e:	3004      	addeq	r0, #4
 8007660:	079a      	lsls	r2, r3, #30
 8007662:	bf04      	itt	eq
 8007664:	089b      	lsreq	r3, r3, #2
 8007666:	3002      	addeq	r0, #2
 8007668:	07da      	lsls	r2, r3, #31
 800766a:	d402      	bmi.n	8007672 <__lo0bits+0x4e>
 800766c:	085b      	lsrs	r3, r3, #1
 800766e:	d006      	beq.n	800767e <__lo0bits+0x5a>
 8007670:	3001      	adds	r0, #1
 8007672:	600b      	str	r3, [r1, #0]
 8007674:	4770      	bx	lr
 8007676:	4610      	mov	r0, r2
 8007678:	e7e9      	b.n	800764e <__lo0bits+0x2a>
 800767a:	2000      	movs	r0, #0
 800767c:	4770      	bx	lr
 800767e:	2020      	movs	r0, #32
 8007680:	4770      	bx	lr

08007682 <__i2b>:
 8007682:	b510      	push	{r4, lr}
 8007684:	460c      	mov	r4, r1
 8007686:	2101      	movs	r1, #1
 8007688:	f7ff ff44 	bl	8007514 <_Balloc>
 800768c:	2201      	movs	r2, #1
 800768e:	6144      	str	r4, [r0, #20]
 8007690:	6102      	str	r2, [r0, #16]
 8007692:	bd10      	pop	{r4, pc}

08007694 <__multiply>:
 8007694:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007698:	4614      	mov	r4, r2
 800769a:	690a      	ldr	r2, [r1, #16]
 800769c:	6923      	ldr	r3, [r4, #16]
 800769e:	429a      	cmp	r2, r3
 80076a0:	bfb8      	it	lt
 80076a2:	460b      	movlt	r3, r1
 80076a4:	4688      	mov	r8, r1
 80076a6:	bfbc      	itt	lt
 80076a8:	46a0      	movlt	r8, r4
 80076aa:	461c      	movlt	r4, r3
 80076ac:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80076b0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80076b4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80076b8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80076bc:	eb07 0609 	add.w	r6, r7, r9
 80076c0:	42b3      	cmp	r3, r6
 80076c2:	bfb8      	it	lt
 80076c4:	3101      	addlt	r1, #1
 80076c6:	f7ff ff25 	bl	8007514 <_Balloc>
 80076ca:	f100 0514 	add.w	r5, r0, #20
 80076ce:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80076d2:	462b      	mov	r3, r5
 80076d4:	2200      	movs	r2, #0
 80076d6:	4573      	cmp	r3, lr
 80076d8:	d316      	bcc.n	8007708 <__multiply+0x74>
 80076da:	f104 0214 	add.w	r2, r4, #20
 80076de:	f108 0114 	add.w	r1, r8, #20
 80076e2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80076e6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80076ea:	9300      	str	r3, [sp, #0]
 80076ec:	9b00      	ldr	r3, [sp, #0]
 80076ee:	9201      	str	r2, [sp, #4]
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d80c      	bhi.n	800770e <__multiply+0x7a>
 80076f4:	2e00      	cmp	r6, #0
 80076f6:	dd03      	ble.n	8007700 <__multiply+0x6c>
 80076f8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d05d      	beq.n	80077bc <__multiply+0x128>
 8007700:	6106      	str	r6, [r0, #16]
 8007702:	b003      	add	sp, #12
 8007704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007708:	f843 2b04 	str.w	r2, [r3], #4
 800770c:	e7e3      	b.n	80076d6 <__multiply+0x42>
 800770e:	f8b2 b000 	ldrh.w	fp, [r2]
 8007712:	f1bb 0f00 	cmp.w	fp, #0
 8007716:	d023      	beq.n	8007760 <__multiply+0xcc>
 8007718:	4689      	mov	r9, r1
 800771a:	46ac      	mov	ip, r5
 800771c:	f04f 0800 	mov.w	r8, #0
 8007720:	f859 4b04 	ldr.w	r4, [r9], #4
 8007724:	f8dc a000 	ldr.w	sl, [ip]
 8007728:	b2a3      	uxth	r3, r4
 800772a:	fa1f fa8a 	uxth.w	sl, sl
 800772e:	fb0b a303 	mla	r3, fp, r3, sl
 8007732:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007736:	f8dc 4000 	ldr.w	r4, [ip]
 800773a:	4443      	add	r3, r8
 800773c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007740:	fb0b 840a 	mla	r4, fp, sl, r8
 8007744:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007748:	46e2      	mov	sl, ip
 800774a:	b29b      	uxth	r3, r3
 800774c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007750:	454f      	cmp	r7, r9
 8007752:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007756:	f84a 3b04 	str.w	r3, [sl], #4
 800775a:	d82b      	bhi.n	80077b4 <__multiply+0x120>
 800775c:	f8cc 8004 	str.w	r8, [ip, #4]
 8007760:	9b01      	ldr	r3, [sp, #4]
 8007762:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8007766:	3204      	adds	r2, #4
 8007768:	f1ba 0f00 	cmp.w	sl, #0
 800776c:	d020      	beq.n	80077b0 <__multiply+0x11c>
 800776e:	682b      	ldr	r3, [r5, #0]
 8007770:	4689      	mov	r9, r1
 8007772:	46a8      	mov	r8, r5
 8007774:	f04f 0b00 	mov.w	fp, #0
 8007778:	f8b9 c000 	ldrh.w	ip, [r9]
 800777c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8007780:	fb0a 440c 	mla	r4, sl, ip, r4
 8007784:	445c      	add	r4, fp
 8007786:	46c4      	mov	ip, r8
 8007788:	b29b      	uxth	r3, r3
 800778a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800778e:	f84c 3b04 	str.w	r3, [ip], #4
 8007792:	f859 3b04 	ldr.w	r3, [r9], #4
 8007796:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800779a:	0c1b      	lsrs	r3, r3, #16
 800779c:	fb0a b303 	mla	r3, sl, r3, fp
 80077a0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80077a4:	454f      	cmp	r7, r9
 80077a6:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80077aa:	d805      	bhi.n	80077b8 <__multiply+0x124>
 80077ac:	f8c8 3004 	str.w	r3, [r8, #4]
 80077b0:	3504      	adds	r5, #4
 80077b2:	e79b      	b.n	80076ec <__multiply+0x58>
 80077b4:	46d4      	mov	ip, sl
 80077b6:	e7b3      	b.n	8007720 <__multiply+0x8c>
 80077b8:	46e0      	mov	r8, ip
 80077ba:	e7dd      	b.n	8007778 <__multiply+0xe4>
 80077bc:	3e01      	subs	r6, #1
 80077be:	e799      	b.n	80076f4 <__multiply+0x60>

080077c0 <__pow5mult>:
 80077c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077c4:	4615      	mov	r5, r2
 80077c6:	f012 0203 	ands.w	r2, r2, #3
 80077ca:	4606      	mov	r6, r0
 80077cc:	460f      	mov	r7, r1
 80077ce:	d007      	beq.n	80077e0 <__pow5mult+0x20>
 80077d0:	3a01      	subs	r2, #1
 80077d2:	4c1a      	ldr	r4, [pc, #104]	; (800783c <__pow5mult+0x7c>)
 80077d4:	2300      	movs	r3, #0
 80077d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80077da:	f7ff fec9 	bl	8007570 <__multadd>
 80077de:	4607      	mov	r7, r0
 80077e0:	10ad      	asrs	r5, r5, #2
 80077e2:	d027      	beq.n	8007834 <__pow5mult+0x74>
 80077e4:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 80077e6:	b944      	cbnz	r4, 80077fa <__pow5mult+0x3a>
 80077e8:	f240 2171 	movw	r1, #625	; 0x271
 80077ec:	4630      	mov	r0, r6
 80077ee:	f7ff ff48 	bl	8007682 <__i2b>
 80077f2:	2300      	movs	r3, #0
 80077f4:	64b0      	str	r0, [r6, #72]	; 0x48
 80077f6:	4604      	mov	r4, r0
 80077f8:	6003      	str	r3, [r0, #0]
 80077fa:	f04f 0800 	mov.w	r8, #0
 80077fe:	07eb      	lsls	r3, r5, #31
 8007800:	d50a      	bpl.n	8007818 <__pow5mult+0x58>
 8007802:	4639      	mov	r1, r7
 8007804:	4622      	mov	r2, r4
 8007806:	4630      	mov	r0, r6
 8007808:	f7ff ff44 	bl	8007694 <__multiply>
 800780c:	4639      	mov	r1, r7
 800780e:	4681      	mov	r9, r0
 8007810:	4630      	mov	r0, r6
 8007812:	f7ff fea4 	bl	800755e <_Bfree>
 8007816:	464f      	mov	r7, r9
 8007818:	106d      	asrs	r5, r5, #1
 800781a:	d00b      	beq.n	8007834 <__pow5mult+0x74>
 800781c:	6820      	ldr	r0, [r4, #0]
 800781e:	b938      	cbnz	r0, 8007830 <__pow5mult+0x70>
 8007820:	4622      	mov	r2, r4
 8007822:	4621      	mov	r1, r4
 8007824:	4630      	mov	r0, r6
 8007826:	f7ff ff35 	bl	8007694 <__multiply>
 800782a:	6020      	str	r0, [r4, #0]
 800782c:	f8c0 8000 	str.w	r8, [r0]
 8007830:	4604      	mov	r4, r0
 8007832:	e7e4      	b.n	80077fe <__pow5mult+0x3e>
 8007834:	4638      	mov	r0, r7
 8007836:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800783a:	bf00      	nop
 800783c:	080083e8 	.word	0x080083e8

08007840 <__lshift>:
 8007840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007844:	460c      	mov	r4, r1
 8007846:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800784a:	6923      	ldr	r3, [r4, #16]
 800784c:	6849      	ldr	r1, [r1, #4]
 800784e:	eb0a 0903 	add.w	r9, sl, r3
 8007852:	68a3      	ldr	r3, [r4, #8]
 8007854:	4607      	mov	r7, r0
 8007856:	4616      	mov	r6, r2
 8007858:	f109 0501 	add.w	r5, r9, #1
 800785c:	42ab      	cmp	r3, r5
 800785e:	db32      	blt.n	80078c6 <__lshift+0x86>
 8007860:	4638      	mov	r0, r7
 8007862:	f7ff fe57 	bl	8007514 <_Balloc>
 8007866:	2300      	movs	r3, #0
 8007868:	4680      	mov	r8, r0
 800786a:	f100 0114 	add.w	r1, r0, #20
 800786e:	461a      	mov	r2, r3
 8007870:	4553      	cmp	r3, sl
 8007872:	db2b      	blt.n	80078cc <__lshift+0x8c>
 8007874:	6920      	ldr	r0, [r4, #16]
 8007876:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800787a:	f104 0314 	add.w	r3, r4, #20
 800787e:	f016 021f 	ands.w	r2, r6, #31
 8007882:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007886:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800788a:	d025      	beq.n	80078d8 <__lshift+0x98>
 800788c:	f1c2 0e20 	rsb	lr, r2, #32
 8007890:	2000      	movs	r0, #0
 8007892:	681e      	ldr	r6, [r3, #0]
 8007894:	468a      	mov	sl, r1
 8007896:	4096      	lsls	r6, r2
 8007898:	4330      	orrs	r0, r6
 800789a:	f84a 0b04 	str.w	r0, [sl], #4
 800789e:	f853 0b04 	ldr.w	r0, [r3], #4
 80078a2:	459c      	cmp	ip, r3
 80078a4:	fa20 f00e 	lsr.w	r0, r0, lr
 80078a8:	d814      	bhi.n	80078d4 <__lshift+0x94>
 80078aa:	6048      	str	r0, [r1, #4]
 80078ac:	b108      	cbz	r0, 80078b2 <__lshift+0x72>
 80078ae:	f109 0502 	add.w	r5, r9, #2
 80078b2:	3d01      	subs	r5, #1
 80078b4:	4638      	mov	r0, r7
 80078b6:	f8c8 5010 	str.w	r5, [r8, #16]
 80078ba:	4621      	mov	r1, r4
 80078bc:	f7ff fe4f 	bl	800755e <_Bfree>
 80078c0:	4640      	mov	r0, r8
 80078c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078c6:	3101      	adds	r1, #1
 80078c8:	005b      	lsls	r3, r3, #1
 80078ca:	e7c7      	b.n	800785c <__lshift+0x1c>
 80078cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80078d0:	3301      	adds	r3, #1
 80078d2:	e7cd      	b.n	8007870 <__lshift+0x30>
 80078d4:	4651      	mov	r1, sl
 80078d6:	e7dc      	b.n	8007892 <__lshift+0x52>
 80078d8:	3904      	subs	r1, #4
 80078da:	f853 2b04 	ldr.w	r2, [r3], #4
 80078de:	f841 2f04 	str.w	r2, [r1, #4]!
 80078e2:	459c      	cmp	ip, r3
 80078e4:	d8f9      	bhi.n	80078da <__lshift+0x9a>
 80078e6:	e7e4      	b.n	80078b2 <__lshift+0x72>

080078e8 <__mcmp>:
 80078e8:	6903      	ldr	r3, [r0, #16]
 80078ea:	690a      	ldr	r2, [r1, #16]
 80078ec:	1a9b      	subs	r3, r3, r2
 80078ee:	b530      	push	{r4, r5, lr}
 80078f0:	d10c      	bne.n	800790c <__mcmp+0x24>
 80078f2:	0092      	lsls	r2, r2, #2
 80078f4:	3014      	adds	r0, #20
 80078f6:	3114      	adds	r1, #20
 80078f8:	1884      	adds	r4, r0, r2
 80078fa:	4411      	add	r1, r2
 80078fc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007900:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007904:	4295      	cmp	r5, r2
 8007906:	d003      	beq.n	8007910 <__mcmp+0x28>
 8007908:	d305      	bcc.n	8007916 <__mcmp+0x2e>
 800790a:	2301      	movs	r3, #1
 800790c:	4618      	mov	r0, r3
 800790e:	bd30      	pop	{r4, r5, pc}
 8007910:	42a0      	cmp	r0, r4
 8007912:	d3f3      	bcc.n	80078fc <__mcmp+0x14>
 8007914:	e7fa      	b.n	800790c <__mcmp+0x24>
 8007916:	f04f 33ff 	mov.w	r3, #4294967295
 800791a:	e7f7      	b.n	800790c <__mcmp+0x24>

0800791c <__mdiff>:
 800791c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007920:	460d      	mov	r5, r1
 8007922:	4607      	mov	r7, r0
 8007924:	4611      	mov	r1, r2
 8007926:	4628      	mov	r0, r5
 8007928:	4614      	mov	r4, r2
 800792a:	f7ff ffdd 	bl	80078e8 <__mcmp>
 800792e:	1e06      	subs	r6, r0, #0
 8007930:	d108      	bne.n	8007944 <__mdiff+0x28>
 8007932:	4631      	mov	r1, r6
 8007934:	4638      	mov	r0, r7
 8007936:	f7ff fded 	bl	8007514 <_Balloc>
 800793a:	2301      	movs	r3, #1
 800793c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007944:	bfa4      	itt	ge
 8007946:	4623      	movge	r3, r4
 8007948:	462c      	movge	r4, r5
 800794a:	4638      	mov	r0, r7
 800794c:	6861      	ldr	r1, [r4, #4]
 800794e:	bfa6      	itte	ge
 8007950:	461d      	movge	r5, r3
 8007952:	2600      	movge	r6, #0
 8007954:	2601      	movlt	r6, #1
 8007956:	f7ff fddd 	bl	8007514 <_Balloc>
 800795a:	692b      	ldr	r3, [r5, #16]
 800795c:	60c6      	str	r6, [r0, #12]
 800795e:	6926      	ldr	r6, [r4, #16]
 8007960:	f105 0914 	add.w	r9, r5, #20
 8007964:	f104 0214 	add.w	r2, r4, #20
 8007968:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800796c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007970:	f100 0514 	add.w	r5, r0, #20
 8007974:	f04f 0e00 	mov.w	lr, #0
 8007978:	f852 ab04 	ldr.w	sl, [r2], #4
 800797c:	f859 4b04 	ldr.w	r4, [r9], #4
 8007980:	fa1e f18a 	uxtah	r1, lr, sl
 8007984:	b2a3      	uxth	r3, r4
 8007986:	1ac9      	subs	r1, r1, r3
 8007988:	0c23      	lsrs	r3, r4, #16
 800798a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800798e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007992:	b289      	uxth	r1, r1
 8007994:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007998:	45c8      	cmp	r8, r9
 800799a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800799e:	4694      	mov	ip, r2
 80079a0:	f845 3b04 	str.w	r3, [r5], #4
 80079a4:	d8e8      	bhi.n	8007978 <__mdiff+0x5c>
 80079a6:	45bc      	cmp	ip, r7
 80079a8:	d304      	bcc.n	80079b4 <__mdiff+0x98>
 80079aa:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80079ae:	b183      	cbz	r3, 80079d2 <__mdiff+0xb6>
 80079b0:	6106      	str	r6, [r0, #16]
 80079b2:	e7c5      	b.n	8007940 <__mdiff+0x24>
 80079b4:	f85c 1b04 	ldr.w	r1, [ip], #4
 80079b8:	fa1e f381 	uxtah	r3, lr, r1
 80079bc:	141a      	asrs	r2, r3, #16
 80079be:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80079c2:	b29b      	uxth	r3, r3
 80079c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80079c8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80079cc:	f845 3b04 	str.w	r3, [r5], #4
 80079d0:	e7e9      	b.n	80079a6 <__mdiff+0x8a>
 80079d2:	3e01      	subs	r6, #1
 80079d4:	e7e9      	b.n	80079aa <__mdiff+0x8e>

080079d6 <__d2b>:
 80079d6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80079da:	460e      	mov	r6, r1
 80079dc:	2101      	movs	r1, #1
 80079de:	ec59 8b10 	vmov	r8, r9, d0
 80079e2:	4615      	mov	r5, r2
 80079e4:	f7ff fd96 	bl	8007514 <_Balloc>
 80079e8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80079ec:	4607      	mov	r7, r0
 80079ee:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80079f2:	bb34      	cbnz	r4, 8007a42 <__d2b+0x6c>
 80079f4:	9301      	str	r3, [sp, #4]
 80079f6:	f1b8 0300 	subs.w	r3, r8, #0
 80079fa:	d027      	beq.n	8007a4c <__d2b+0x76>
 80079fc:	a802      	add	r0, sp, #8
 80079fe:	f840 3d08 	str.w	r3, [r0, #-8]!
 8007a02:	f7ff fe0f 	bl	8007624 <__lo0bits>
 8007a06:	9900      	ldr	r1, [sp, #0]
 8007a08:	b1f0      	cbz	r0, 8007a48 <__d2b+0x72>
 8007a0a:	9a01      	ldr	r2, [sp, #4]
 8007a0c:	f1c0 0320 	rsb	r3, r0, #32
 8007a10:	fa02 f303 	lsl.w	r3, r2, r3
 8007a14:	430b      	orrs	r3, r1
 8007a16:	40c2      	lsrs	r2, r0
 8007a18:	617b      	str	r3, [r7, #20]
 8007a1a:	9201      	str	r2, [sp, #4]
 8007a1c:	9b01      	ldr	r3, [sp, #4]
 8007a1e:	61bb      	str	r3, [r7, #24]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	bf14      	ite	ne
 8007a24:	2102      	movne	r1, #2
 8007a26:	2101      	moveq	r1, #1
 8007a28:	6139      	str	r1, [r7, #16]
 8007a2a:	b1c4      	cbz	r4, 8007a5e <__d2b+0x88>
 8007a2c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007a30:	4404      	add	r4, r0
 8007a32:	6034      	str	r4, [r6, #0]
 8007a34:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007a38:	6028      	str	r0, [r5, #0]
 8007a3a:	4638      	mov	r0, r7
 8007a3c:	b003      	add	sp, #12
 8007a3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a46:	e7d5      	b.n	80079f4 <__d2b+0x1e>
 8007a48:	6179      	str	r1, [r7, #20]
 8007a4a:	e7e7      	b.n	8007a1c <__d2b+0x46>
 8007a4c:	a801      	add	r0, sp, #4
 8007a4e:	f7ff fde9 	bl	8007624 <__lo0bits>
 8007a52:	9b01      	ldr	r3, [sp, #4]
 8007a54:	617b      	str	r3, [r7, #20]
 8007a56:	2101      	movs	r1, #1
 8007a58:	6139      	str	r1, [r7, #16]
 8007a5a:	3020      	adds	r0, #32
 8007a5c:	e7e5      	b.n	8007a2a <__d2b+0x54>
 8007a5e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007a62:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007a66:	6030      	str	r0, [r6, #0]
 8007a68:	6918      	ldr	r0, [r3, #16]
 8007a6a:	f7ff fdbc 	bl	80075e6 <__hi0bits>
 8007a6e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007a72:	e7e1      	b.n	8007a38 <__d2b+0x62>

08007a74 <frexp>:
 8007a74:	b570      	push	{r4, r5, r6, lr}
 8007a76:	2100      	movs	r1, #0
 8007a78:	ec55 4b10 	vmov	r4, r5, d0
 8007a7c:	6001      	str	r1, [r0, #0]
 8007a7e:	4916      	ldr	r1, [pc, #88]	; (8007ad8 <frexp+0x64>)
 8007a80:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007a84:	428b      	cmp	r3, r1
 8007a86:	4606      	mov	r6, r0
 8007a88:	462a      	mov	r2, r5
 8007a8a:	dc22      	bgt.n	8007ad2 <frexp+0x5e>
 8007a8c:	ee10 1a10 	vmov	r1, s0
 8007a90:	4319      	orrs	r1, r3
 8007a92:	d01e      	beq.n	8007ad2 <frexp+0x5e>
 8007a94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a98:	da0d      	bge.n	8007ab6 <frexp+0x42>
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	4b0f      	ldr	r3, [pc, #60]	; (8007adc <frexp+0x68>)
 8007a9e:	ee10 0a10 	vmov	r0, s0
 8007aa2:	4629      	mov	r1, r5
 8007aa4:	f7f8 fdb8 	bl	8000618 <__aeabi_dmul>
 8007aa8:	460a      	mov	r2, r1
 8007aaa:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007aae:	f06f 0135 	mvn.w	r1, #53	; 0x35
 8007ab2:	4604      	mov	r4, r0
 8007ab4:	6031      	str	r1, [r6, #0]
 8007ab6:	6831      	ldr	r1, [r6, #0]
 8007ab8:	151b      	asrs	r3, r3, #20
 8007aba:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8007abe:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8007ac2:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8007ac6:	440b      	add	r3, r1
 8007ac8:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8007acc:	6033      	str	r3, [r6, #0]
 8007ace:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 8007ad2:	ec45 4b10 	vmov	d0, r4, r5
 8007ad6:	bd70      	pop	{r4, r5, r6, pc}
 8007ad8:	7fefffff 	.word	0x7fefffff
 8007adc:	43500000 	.word	0x43500000

08007ae0 <_sbrk_r>:
 8007ae0:	b538      	push	{r3, r4, r5, lr}
 8007ae2:	4c06      	ldr	r4, [pc, #24]	; (8007afc <_sbrk_r+0x1c>)
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	4605      	mov	r5, r0
 8007ae8:	4608      	mov	r0, r1
 8007aea:	6023      	str	r3, [r4, #0]
 8007aec:	f000 fb0e 	bl	800810c <_sbrk>
 8007af0:	1c43      	adds	r3, r0, #1
 8007af2:	d102      	bne.n	8007afa <_sbrk_r+0x1a>
 8007af4:	6823      	ldr	r3, [r4, #0]
 8007af6:	b103      	cbz	r3, 8007afa <_sbrk_r+0x1a>
 8007af8:	602b      	str	r3, [r5, #0]
 8007afa:	bd38      	pop	{r3, r4, r5, pc}
 8007afc:	200139f4 	.word	0x200139f4

08007b00 <strncpy>:
 8007b00:	b570      	push	{r4, r5, r6, lr}
 8007b02:	3901      	subs	r1, #1
 8007b04:	4604      	mov	r4, r0
 8007b06:	b902      	cbnz	r2, 8007b0a <strncpy+0xa>
 8007b08:	bd70      	pop	{r4, r5, r6, pc}
 8007b0a:	4623      	mov	r3, r4
 8007b0c:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8007b10:	f803 5b01 	strb.w	r5, [r3], #1
 8007b14:	1e56      	subs	r6, r2, #1
 8007b16:	b92d      	cbnz	r5, 8007b24 <strncpy+0x24>
 8007b18:	4414      	add	r4, r2
 8007b1a:	42a3      	cmp	r3, r4
 8007b1c:	d0f4      	beq.n	8007b08 <strncpy+0x8>
 8007b1e:	f803 5b01 	strb.w	r5, [r3], #1
 8007b22:	e7fa      	b.n	8007b1a <strncpy+0x1a>
 8007b24:	461c      	mov	r4, r3
 8007b26:	4632      	mov	r2, r6
 8007b28:	e7ed      	b.n	8007b06 <strncpy+0x6>

08007b2a <__ssprint_r>:
 8007b2a:	6893      	ldr	r3, [r2, #8]
 8007b2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b30:	4681      	mov	r9, r0
 8007b32:	460c      	mov	r4, r1
 8007b34:	4616      	mov	r6, r2
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d05e      	beq.n	8007bf8 <__ssprint_r+0xce>
 8007b3a:	f04f 0b00 	mov.w	fp, #0
 8007b3e:	f8d2 a000 	ldr.w	sl, [r2]
 8007b42:	465f      	mov	r7, fp
 8007b44:	b357      	cbz	r7, 8007b9c <__ssprint_r+0x72>
 8007b46:	68a3      	ldr	r3, [r4, #8]
 8007b48:	429f      	cmp	r7, r3
 8007b4a:	d340      	bcc.n	8007bce <__ssprint_r+0xa4>
 8007b4c:	89a2      	ldrh	r2, [r4, #12]
 8007b4e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007b52:	d03c      	beq.n	8007bce <__ssprint_r+0xa4>
 8007b54:	6825      	ldr	r5, [r4, #0]
 8007b56:	6921      	ldr	r1, [r4, #16]
 8007b58:	eba5 0801 	sub.w	r8, r5, r1
 8007b5c:	6965      	ldr	r5, [r4, #20]
 8007b5e:	2302      	movs	r3, #2
 8007b60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007b64:	fb95 f5f3 	sdiv	r5, r5, r3
 8007b68:	f108 0301 	add.w	r3, r8, #1
 8007b6c:	443b      	add	r3, r7
 8007b6e:	429d      	cmp	r5, r3
 8007b70:	bf38      	it	cc
 8007b72:	461d      	movcc	r5, r3
 8007b74:	0553      	lsls	r3, r2, #21
 8007b76:	d544      	bpl.n	8007c02 <__ssprint_r+0xd8>
 8007b78:	4629      	mov	r1, r5
 8007b7a:	4648      	mov	r0, r9
 8007b7c:	f7ff fa88 	bl	8007090 <_malloc_r>
 8007b80:	b988      	cbnz	r0, 8007ba6 <__ssprint_r+0x7c>
 8007b82:	230c      	movs	r3, #12
 8007b84:	f8c9 3000 	str.w	r3, [r9]
 8007b88:	89a3      	ldrh	r3, [r4, #12]
 8007b8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b8e:	81a3      	strh	r3, [r4, #12]
 8007b90:	2300      	movs	r3, #0
 8007b92:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8007b96:	f04f 30ff 	mov.w	r0, #4294967295
 8007b9a:	e02f      	b.n	8007bfc <__ssprint_r+0xd2>
 8007b9c:	e9da b700 	ldrd	fp, r7, [sl]
 8007ba0:	f10a 0a08 	add.w	sl, sl, #8
 8007ba4:	e7ce      	b.n	8007b44 <__ssprint_r+0x1a>
 8007ba6:	4642      	mov	r2, r8
 8007ba8:	6921      	ldr	r1, [r4, #16]
 8007baa:	9001      	str	r0, [sp, #4]
 8007bac:	f7fd f8a2 	bl	8004cf4 <memcpy>
 8007bb0:	89a2      	ldrh	r2, [r4, #12]
 8007bb2:	9b01      	ldr	r3, [sp, #4]
 8007bb4:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8007bb8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007bbc:	81a2      	strh	r2, [r4, #12]
 8007bbe:	6123      	str	r3, [r4, #16]
 8007bc0:	6165      	str	r5, [r4, #20]
 8007bc2:	4443      	add	r3, r8
 8007bc4:	eba5 0508 	sub.w	r5, r5, r8
 8007bc8:	6023      	str	r3, [r4, #0]
 8007bca:	60a5      	str	r5, [r4, #8]
 8007bcc:	463b      	mov	r3, r7
 8007bce:	42bb      	cmp	r3, r7
 8007bd0:	bf28      	it	cs
 8007bd2:	463b      	movcs	r3, r7
 8007bd4:	461a      	mov	r2, r3
 8007bd6:	4659      	mov	r1, fp
 8007bd8:	6820      	ldr	r0, [r4, #0]
 8007bda:	9301      	str	r3, [sp, #4]
 8007bdc:	f000 f8c6 	bl	8007d6c <memmove>
 8007be0:	68a2      	ldr	r2, [r4, #8]
 8007be2:	9b01      	ldr	r3, [sp, #4]
 8007be4:	1ad2      	subs	r2, r2, r3
 8007be6:	60a2      	str	r2, [r4, #8]
 8007be8:	6822      	ldr	r2, [r4, #0]
 8007bea:	4413      	add	r3, r2
 8007bec:	6023      	str	r3, [r4, #0]
 8007bee:	68b3      	ldr	r3, [r6, #8]
 8007bf0:	1bdf      	subs	r7, r3, r7
 8007bf2:	60b7      	str	r7, [r6, #8]
 8007bf4:	2f00      	cmp	r7, #0
 8007bf6:	d1d1      	bne.n	8007b9c <__ssprint_r+0x72>
 8007bf8:	2000      	movs	r0, #0
 8007bfa:	6070      	str	r0, [r6, #4]
 8007bfc:	b003      	add	sp, #12
 8007bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c02:	462a      	mov	r2, r5
 8007c04:	4648      	mov	r0, r9
 8007c06:	f000 f8cb 	bl	8007da0 <_realloc_r>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	2800      	cmp	r0, #0
 8007c0e:	d1d6      	bne.n	8007bbe <__ssprint_r+0x94>
 8007c10:	6921      	ldr	r1, [r4, #16]
 8007c12:	4648      	mov	r0, r9
 8007c14:	f7ff f970 	bl	8006ef8 <_free_r>
 8007c18:	e7b3      	b.n	8007b82 <__ssprint_r+0x58>

08007c1a <sysconf>:
 8007c1a:	2808      	cmp	r0, #8
 8007c1c:	b508      	push	{r3, lr}
 8007c1e:	d006      	beq.n	8007c2e <sysconf+0x14>
 8007c20:	f000 f88c 	bl	8007d3c <__errno>
 8007c24:	2316      	movs	r3, #22
 8007c26:	6003      	str	r3, [r0, #0]
 8007c28:	f04f 30ff 	mov.w	r0, #4294967295
 8007c2c:	bd08      	pop	{r3, pc}
 8007c2e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007c32:	e7fb      	b.n	8007c2c <sysconf+0x12>

08007c34 <__register_exitproc>:
 8007c34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c38:	4c26      	ldr	r4, [pc, #152]	; (8007cd4 <__register_exitproc+0xa0>)
 8007c3a:	4606      	mov	r6, r0
 8007c3c:	6820      	ldr	r0, [r4, #0]
 8007c3e:	4698      	mov	r8, r3
 8007c40:	460f      	mov	r7, r1
 8007c42:	4691      	mov	r9, r2
 8007c44:	f7ff fa22 	bl	800708c <__retarget_lock_acquire_recursive>
 8007c48:	4b23      	ldr	r3, [pc, #140]	; (8007cd8 <__register_exitproc+0xa4>)
 8007c4a:	681d      	ldr	r5, [r3, #0]
 8007c4c:	f8d5 0148 	ldr.w	r0, [r5, #328]	; 0x148
 8007c50:	b918      	cbnz	r0, 8007c5a <__register_exitproc+0x26>
 8007c52:	f505 70a6 	add.w	r0, r5, #332	; 0x14c
 8007c56:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 8007c5a:	6843      	ldr	r3, [r0, #4]
 8007c5c:	2b1f      	cmp	r3, #31
 8007c5e:	dd19      	ble.n	8007c94 <__register_exitproc+0x60>
 8007c60:	4b1e      	ldr	r3, [pc, #120]	; (8007cdc <__register_exitproc+0xa8>)
 8007c62:	b933      	cbnz	r3, 8007c72 <__register_exitproc+0x3e>
 8007c64:	6820      	ldr	r0, [r4, #0]
 8007c66:	f7ff fa12 	bl	800708e <__retarget_lock_release_recursive>
 8007c6a:	f04f 30ff 	mov.w	r0, #4294967295
 8007c6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c72:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8007c76:	f3af 8000 	nop.w
 8007c7a:	2800      	cmp	r0, #0
 8007c7c:	d0f2      	beq.n	8007c64 <__register_exitproc+0x30>
 8007c7e:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 8007c82:	6003      	str	r3, [r0, #0]
 8007c84:	2200      	movs	r2, #0
 8007c86:	6042      	str	r2, [r0, #4]
 8007c88:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 8007c8c:	f8c0 2188 	str.w	r2, [r0, #392]	; 0x188
 8007c90:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
 8007c94:	6843      	ldr	r3, [r0, #4]
 8007c96:	b19e      	cbz	r6, 8007cc0 <__register_exitproc+0x8c>
 8007c98:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
 8007ca2:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
 8007ca6:	409a      	lsls	r2, r3
 8007ca8:	4311      	orrs	r1, r2
 8007caa:	2e02      	cmp	r6, #2
 8007cac:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
 8007cb0:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
 8007cb4:	bf02      	ittt	eq
 8007cb6:	f8d0 118c 	ldreq.w	r1, [r0, #396]	; 0x18c
 8007cba:	430a      	orreq	r2, r1
 8007cbc:	f8c0 218c 	streq.w	r2, [r0, #396]	; 0x18c
 8007cc0:	1c5a      	adds	r2, r3, #1
 8007cc2:	3302      	adds	r3, #2
 8007cc4:	6042      	str	r2, [r0, #4]
 8007cc6:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
 8007cca:	6820      	ldr	r0, [r4, #0]
 8007ccc:	f7ff f9df 	bl	800708e <__retarget_lock_release_recursive>
 8007cd0:	2000      	movs	r0, #0
 8007cd2:	e7cc      	b.n	8007c6e <__register_exitproc+0x3a>
 8007cd4:	20000540 	.word	0x20000540
 8007cd8:	0800828c 	.word	0x0800828c
 8007cdc:	00000000 	.word	0x00000000

08007ce0 <_calloc_r>:
 8007ce0:	b510      	push	{r4, lr}
 8007ce2:	4351      	muls	r1, r2
 8007ce4:	f7ff f9d4 	bl	8007090 <_malloc_r>
 8007ce8:	4604      	mov	r4, r0
 8007cea:	b198      	cbz	r0, 8007d14 <_calloc_r+0x34>
 8007cec:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8007cf0:	f022 0203 	bic.w	r2, r2, #3
 8007cf4:	3a04      	subs	r2, #4
 8007cf6:	2a24      	cmp	r2, #36	; 0x24
 8007cf8:	d81b      	bhi.n	8007d32 <_calloc_r+0x52>
 8007cfa:	2a13      	cmp	r2, #19
 8007cfc:	d917      	bls.n	8007d2e <_calloc_r+0x4e>
 8007cfe:	2100      	movs	r1, #0
 8007d00:	2a1b      	cmp	r2, #27
 8007d02:	e9c0 1100 	strd	r1, r1, [r0]
 8007d06:	d807      	bhi.n	8007d18 <_calloc_r+0x38>
 8007d08:	f100 0308 	add.w	r3, r0, #8
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	e9c3 2200 	strd	r2, r2, [r3]
 8007d12:	609a      	str	r2, [r3, #8]
 8007d14:	4620      	mov	r0, r4
 8007d16:	bd10      	pop	{r4, pc}
 8007d18:	2a24      	cmp	r2, #36	; 0x24
 8007d1a:	e9c0 1102 	strd	r1, r1, [r0, #8]
 8007d1e:	bf11      	iteee	ne
 8007d20:	f100 0310 	addne.w	r3, r0, #16
 8007d24:	6101      	streq	r1, [r0, #16]
 8007d26:	f100 0318 	addeq.w	r3, r0, #24
 8007d2a:	6141      	streq	r1, [r0, #20]
 8007d2c:	e7ee      	b.n	8007d0c <_calloc_r+0x2c>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	e7ec      	b.n	8007d0c <_calloc_r+0x2c>
 8007d32:	2100      	movs	r1, #0
 8007d34:	f7fc ffe9 	bl	8004d0a <memset>
 8007d38:	e7ec      	b.n	8007d14 <_calloc_r+0x34>
	...

08007d3c <__errno>:
 8007d3c:	4b01      	ldr	r3, [pc, #4]	; (8007d44 <__errno+0x8>)
 8007d3e:	6818      	ldr	r0, [r3, #0]
 8007d40:	4770      	bx	lr
 8007d42:	bf00      	nop
 8007d44:	20000110 	.word	0x20000110

08007d48 <__ascii_mbtowc>:
 8007d48:	b082      	sub	sp, #8
 8007d4a:	b901      	cbnz	r1, 8007d4e <__ascii_mbtowc+0x6>
 8007d4c:	a901      	add	r1, sp, #4
 8007d4e:	b142      	cbz	r2, 8007d62 <__ascii_mbtowc+0x1a>
 8007d50:	b14b      	cbz	r3, 8007d66 <__ascii_mbtowc+0x1e>
 8007d52:	7813      	ldrb	r3, [r2, #0]
 8007d54:	600b      	str	r3, [r1, #0]
 8007d56:	7812      	ldrb	r2, [r2, #0]
 8007d58:	1c10      	adds	r0, r2, #0
 8007d5a:	bf18      	it	ne
 8007d5c:	2001      	movne	r0, #1
 8007d5e:	b002      	add	sp, #8
 8007d60:	4770      	bx	lr
 8007d62:	4610      	mov	r0, r2
 8007d64:	e7fb      	b.n	8007d5e <__ascii_mbtowc+0x16>
 8007d66:	f06f 0001 	mvn.w	r0, #1
 8007d6a:	e7f8      	b.n	8007d5e <__ascii_mbtowc+0x16>

08007d6c <memmove>:
 8007d6c:	4288      	cmp	r0, r1
 8007d6e:	b510      	push	{r4, lr}
 8007d70:	eb01 0302 	add.w	r3, r1, r2
 8007d74:	d807      	bhi.n	8007d86 <memmove+0x1a>
 8007d76:	1e42      	subs	r2, r0, #1
 8007d78:	4299      	cmp	r1, r3
 8007d7a:	d00a      	beq.n	8007d92 <memmove+0x26>
 8007d7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d80:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007d84:	e7f8      	b.n	8007d78 <memmove+0xc>
 8007d86:	4283      	cmp	r3, r0
 8007d88:	d9f5      	bls.n	8007d76 <memmove+0xa>
 8007d8a:	1881      	adds	r1, r0, r2
 8007d8c:	1ad2      	subs	r2, r2, r3
 8007d8e:	42d3      	cmn	r3, r2
 8007d90:	d100      	bne.n	8007d94 <memmove+0x28>
 8007d92:	bd10      	pop	{r4, pc}
 8007d94:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007d98:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007d9c:	e7f7      	b.n	8007d8e <memmove+0x22>
	...

08007da0 <_realloc_r>:
 8007da0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007da4:	4682      	mov	sl, r0
 8007da6:	460c      	mov	r4, r1
 8007da8:	b929      	cbnz	r1, 8007db6 <_realloc_r+0x16>
 8007daa:	4611      	mov	r1, r2
 8007dac:	b003      	add	sp, #12
 8007dae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007db2:	f7ff b96d 	b.w	8007090 <_malloc_r>
 8007db6:	9201      	str	r2, [sp, #4]
 8007db8:	f7ff fba0 	bl	80074fc <__malloc_lock>
 8007dbc:	9a01      	ldr	r2, [sp, #4]
 8007dbe:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8007dc2:	f102 080b 	add.w	r8, r2, #11
 8007dc6:	f1b8 0f16 	cmp.w	r8, #22
 8007dca:	f1a4 0908 	sub.w	r9, r4, #8
 8007dce:	f025 0603 	bic.w	r6, r5, #3
 8007dd2:	d90b      	bls.n	8007dec <_realloc_r+0x4c>
 8007dd4:	f038 0807 	bics.w	r8, r8, #7
 8007dd8:	d50a      	bpl.n	8007df0 <_realloc_r+0x50>
 8007dda:	230c      	movs	r3, #12
 8007ddc:	f8ca 3000 	str.w	r3, [sl]
 8007de0:	f04f 0b00 	mov.w	fp, #0
 8007de4:	4658      	mov	r0, fp
 8007de6:	b003      	add	sp, #12
 8007de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dec:	f04f 0810 	mov.w	r8, #16
 8007df0:	4590      	cmp	r8, r2
 8007df2:	d3f2      	bcc.n	8007dda <_realloc_r+0x3a>
 8007df4:	45b0      	cmp	r8, r6
 8007df6:	f340 8170 	ble.w	80080da <_realloc_r+0x33a>
 8007dfa:	49a9      	ldr	r1, [pc, #676]	; (80080a0 <_realloc_r+0x300>)
 8007dfc:	9101      	str	r1, [sp, #4]
 8007dfe:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8007e02:	eb09 0306 	add.w	r3, r9, r6
 8007e06:	459c      	cmp	ip, r3
 8007e08:	6858      	ldr	r0, [r3, #4]
 8007e0a:	d005      	beq.n	8007e18 <_realloc_r+0x78>
 8007e0c:	f020 0101 	bic.w	r1, r0, #1
 8007e10:	4419      	add	r1, r3
 8007e12:	6849      	ldr	r1, [r1, #4]
 8007e14:	07cf      	lsls	r7, r1, #31
 8007e16:	d447      	bmi.n	8007ea8 <_realloc_r+0x108>
 8007e18:	f020 0003 	bic.w	r0, r0, #3
 8007e1c:	459c      	cmp	ip, r3
 8007e1e:	eb06 0700 	add.w	r7, r6, r0
 8007e22:	d119      	bne.n	8007e58 <_realloc_r+0xb8>
 8007e24:	f108 0110 	add.w	r1, r8, #16
 8007e28:	42b9      	cmp	r1, r7
 8007e2a:	dc3f      	bgt.n	8007eac <_realloc_r+0x10c>
 8007e2c:	eb09 0308 	add.w	r3, r9, r8
 8007e30:	9a01      	ldr	r2, [sp, #4]
 8007e32:	eba7 0708 	sub.w	r7, r7, r8
 8007e36:	f047 0701 	orr.w	r7, r7, #1
 8007e3a:	6093      	str	r3, [r2, #8]
 8007e3c:	605f      	str	r7, [r3, #4]
 8007e3e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8007e42:	f003 0301 	and.w	r3, r3, #1
 8007e46:	ea43 0308 	orr.w	r3, r3, r8
 8007e4a:	f844 3c04 	str.w	r3, [r4, #-4]
 8007e4e:	4650      	mov	r0, sl
 8007e50:	f7ff fb5a 	bl	8007508 <__malloc_unlock>
 8007e54:	46a3      	mov	fp, r4
 8007e56:	e7c5      	b.n	8007de4 <_realloc_r+0x44>
 8007e58:	45b8      	cmp	r8, r7
 8007e5a:	dc27      	bgt.n	8007eac <_realloc_r+0x10c>
 8007e5c:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8007e60:	60da      	str	r2, [r3, #12]
 8007e62:	6093      	str	r3, [r2, #8]
 8007e64:	eba7 0008 	sub.w	r0, r7, r8
 8007e68:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8007e6c:	280f      	cmp	r0, #15
 8007e6e:	f002 0201 	and.w	r2, r2, #1
 8007e72:	eb09 0307 	add.w	r3, r9, r7
 8007e76:	f240 8132 	bls.w	80080de <_realloc_r+0x33e>
 8007e7a:	eb09 0108 	add.w	r1, r9, r8
 8007e7e:	ea48 0202 	orr.w	r2, r8, r2
 8007e82:	f040 0001 	orr.w	r0, r0, #1
 8007e86:	f8c9 2004 	str.w	r2, [r9, #4]
 8007e8a:	6048      	str	r0, [r1, #4]
 8007e8c:	685a      	ldr	r2, [r3, #4]
 8007e8e:	f042 0201 	orr.w	r2, r2, #1
 8007e92:	605a      	str	r2, [r3, #4]
 8007e94:	3108      	adds	r1, #8
 8007e96:	4650      	mov	r0, sl
 8007e98:	f7ff f82e 	bl	8006ef8 <_free_r>
 8007e9c:	4650      	mov	r0, sl
 8007e9e:	f7ff fb33 	bl	8007508 <__malloc_unlock>
 8007ea2:	f109 0b08 	add.w	fp, r9, #8
 8007ea6:	e79d      	b.n	8007de4 <_realloc_r+0x44>
 8007ea8:	2000      	movs	r0, #0
 8007eaa:	4603      	mov	r3, r0
 8007eac:	07e9      	lsls	r1, r5, #31
 8007eae:	f100 80c6 	bmi.w	800803e <_realloc_r+0x29e>
 8007eb2:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8007eb6:	eba9 0505 	sub.w	r5, r9, r5
 8007eba:	6869      	ldr	r1, [r5, #4]
 8007ebc:	f021 0103 	bic.w	r1, r1, #3
 8007ec0:	eb01 0b06 	add.w	fp, r1, r6
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	f000 8086 	beq.w	8007fd6 <_realloc_r+0x236>
 8007eca:	459c      	cmp	ip, r3
 8007ecc:	eb00 070b 	add.w	r7, r0, fp
 8007ed0:	d149      	bne.n	8007f66 <_realloc_r+0x1c6>
 8007ed2:	f108 0310 	add.w	r3, r8, #16
 8007ed6:	42bb      	cmp	r3, r7
 8007ed8:	dc7d      	bgt.n	8007fd6 <_realloc_r+0x236>
 8007eda:	46ab      	mov	fp, r5
 8007edc:	68eb      	ldr	r3, [r5, #12]
 8007ede:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 8007ee2:	60d3      	str	r3, [r2, #12]
 8007ee4:	609a      	str	r2, [r3, #8]
 8007ee6:	1f32      	subs	r2, r6, #4
 8007ee8:	2a24      	cmp	r2, #36	; 0x24
 8007eea:	d837      	bhi.n	8007f5c <_realloc_r+0x1bc>
 8007eec:	2a13      	cmp	r2, #19
 8007eee:	d933      	bls.n	8007f58 <_realloc_r+0x1b8>
 8007ef0:	6823      	ldr	r3, [r4, #0]
 8007ef2:	60ab      	str	r3, [r5, #8]
 8007ef4:	6863      	ldr	r3, [r4, #4]
 8007ef6:	60eb      	str	r3, [r5, #12]
 8007ef8:	2a1b      	cmp	r2, #27
 8007efa:	d81b      	bhi.n	8007f34 <_realloc_r+0x194>
 8007efc:	3408      	adds	r4, #8
 8007efe:	f105 0310 	add.w	r3, r5, #16
 8007f02:	6822      	ldr	r2, [r4, #0]
 8007f04:	601a      	str	r2, [r3, #0]
 8007f06:	6862      	ldr	r2, [r4, #4]
 8007f08:	605a      	str	r2, [r3, #4]
 8007f0a:	68a2      	ldr	r2, [r4, #8]
 8007f0c:	609a      	str	r2, [r3, #8]
 8007f0e:	eb05 0308 	add.w	r3, r5, r8
 8007f12:	9a01      	ldr	r2, [sp, #4]
 8007f14:	eba7 0708 	sub.w	r7, r7, r8
 8007f18:	f047 0701 	orr.w	r7, r7, #1
 8007f1c:	6093      	str	r3, [r2, #8]
 8007f1e:	605f      	str	r7, [r3, #4]
 8007f20:	686b      	ldr	r3, [r5, #4]
 8007f22:	f003 0301 	and.w	r3, r3, #1
 8007f26:	ea43 0308 	orr.w	r3, r3, r8
 8007f2a:	606b      	str	r3, [r5, #4]
 8007f2c:	4650      	mov	r0, sl
 8007f2e:	f7ff faeb 	bl	8007508 <__malloc_unlock>
 8007f32:	e757      	b.n	8007de4 <_realloc_r+0x44>
 8007f34:	68a3      	ldr	r3, [r4, #8]
 8007f36:	612b      	str	r3, [r5, #16]
 8007f38:	68e3      	ldr	r3, [r4, #12]
 8007f3a:	616b      	str	r3, [r5, #20]
 8007f3c:	2a24      	cmp	r2, #36	; 0x24
 8007f3e:	bf01      	itttt	eq
 8007f40:	6923      	ldreq	r3, [r4, #16]
 8007f42:	61ab      	streq	r3, [r5, #24]
 8007f44:	6962      	ldreq	r2, [r4, #20]
 8007f46:	61ea      	streq	r2, [r5, #28]
 8007f48:	bf19      	ittee	ne
 8007f4a:	3410      	addne	r4, #16
 8007f4c:	f105 0318 	addne.w	r3, r5, #24
 8007f50:	f105 0320 	addeq.w	r3, r5, #32
 8007f54:	3418      	addeq	r4, #24
 8007f56:	e7d4      	b.n	8007f02 <_realloc_r+0x162>
 8007f58:	465b      	mov	r3, fp
 8007f5a:	e7d2      	b.n	8007f02 <_realloc_r+0x162>
 8007f5c:	4621      	mov	r1, r4
 8007f5e:	4658      	mov	r0, fp
 8007f60:	f7ff ff04 	bl	8007d6c <memmove>
 8007f64:	e7d3      	b.n	8007f0e <_realloc_r+0x16e>
 8007f66:	45b8      	cmp	r8, r7
 8007f68:	dc35      	bgt.n	8007fd6 <_realloc_r+0x236>
 8007f6a:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8007f6e:	4628      	mov	r0, r5
 8007f70:	60da      	str	r2, [r3, #12]
 8007f72:	6093      	str	r3, [r2, #8]
 8007f74:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8007f78:	68eb      	ldr	r3, [r5, #12]
 8007f7a:	60d3      	str	r3, [r2, #12]
 8007f7c:	609a      	str	r2, [r3, #8]
 8007f7e:	1f32      	subs	r2, r6, #4
 8007f80:	2a24      	cmp	r2, #36	; 0x24
 8007f82:	d824      	bhi.n	8007fce <_realloc_r+0x22e>
 8007f84:	2a13      	cmp	r2, #19
 8007f86:	d908      	bls.n	8007f9a <_realloc_r+0x1fa>
 8007f88:	6823      	ldr	r3, [r4, #0]
 8007f8a:	60ab      	str	r3, [r5, #8]
 8007f8c:	6863      	ldr	r3, [r4, #4]
 8007f8e:	60eb      	str	r3, [r5, #12]
 8007f90:	2a1b      	cmp	r2, #27
 8007f92:	d80a      	bhi.n	8007faa <_realloc_r+0x20a>
 8007f94:	3408      	adds	r4, #8
 8007f96:	f105 0010 	add.w	r0, r5, #16
 8007f9a:	6823      	ldr	r3, [r4, #0]
 8007f9c:	6003      	str	r3, [r0, #0]
 8007f9e:	6863      	ldr	r3, [r4, #4]
 8007fa0:	6043      	str	r3, [r0, #4]
 8007fa2:	68a3      	ldr	r3, [r4, #8]
 8007fa4:	6083      	str	r3, [r0, #8]
 8007fa6:	46a9      	mov	r9, r5
 8007fa8:	e75c      	b.n	8007e64 <_realloc_r+0xc4>
 8007faa:	68a3      	ldr	r3, [r4, #8]
 8007fac:	612b      	str	r3, [r5, #16]
 8007fae:	68e3      	ldr	r3, [r4, #12]
 8007fb0:	616b      	str	r3, [r5, #20]
 8007fb2:	2a24      	cmp	r2, #36	; 0x24
 8007fb4:	bf01      	itttt	eq
 8007fb6:	6923      	ldreq	r3, [r4, #16]
 8007fb8:	61ab      	streq	r3, [r5, #24]
 8007fba:	6963      	ldreq	r3, [r4, #20]
 8007fbc:	61eb      	streq	r3, [r5, #28]
 8007fbe:	bf19      	ittee	ne
 8007fc0:	3410      	addne	r4, #16
 8007fc2:	f105 0018 	addne.w	r0, r5, #24
 8007fc6:	f105 0020 	addeq.w	r0, r5, #32
 8007fca:	3418      	addeq	r4, #24
 8007fcc:	e7e5      	b.n	8007f9a <_realloc_r+0x1fa>
 8007fce:	4621      	mov	r1, r4
 8007fd0:	f7ff fecc 	bl	8007d6c <memmove>
 8007fd4:	e7e7      	b.n	8007fa6 <_realloc_r+0x206>
 8007fd6:	45d8      	cmp	r8, fp
 8007fd8:	dc31      	bgt.n	800803e <_realloc_r+0x29e>
 8007fda:	4628      	mov	r0, r5
 8007fdc:	68eb      	ldr	r3, [r5, #12]
 8007fde:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8007fe2:	60d3      	str	r3, [r2, #12]
 8007fe4:	609a      	str	r2, [r3, #8]
 8007fe6:	1f32      	subs	r2, r6, #4
 8007fe8:	2a24      	cmp	r2, #36	; 0x24
 8007fea:	d824      	bhi.n	8008036 <_realloc_r+0x296>
 8007fec:	2a13      	cmp	r2, #19
 8007fee:	d908      	bls.n	8008002 <_realloc_r+0x262>
 8007ff0:	6823      	ldr	r3, [r4, #0]
 8007ff2:	60ab      	str	r3, [r5, #8]
 8007ff4:	6863      	ldr	r3, [r4, #4]
 8007ff6:	60eb      	str	r3, [r5, #12]
 8007ff8:	2a1b      	cmp	r2, #27
 8007ffa:	d80a      	bhi.n	8008012 <_realloc_r+0x272>
 8007ffc:	3408      	adds	r4, #8
 8007ffe:	f105 0010 	add.w	r0, r5, #16
 8008002:	6823      	ldr	r3, [r4, #0]
 8008004:	6003      	str	r3, [r0, #0]
 8008006:	6863      	ldr	r3, [r4, #4]
 8008008:	6043      	str	r3, [r0, #4]
 800800a:	68a3      	ldr	r3, [r4, #8]
 800800c:	6083      	str	r3, [r0, #8]
 800800e:	465f      	mov	r7, fp
 8008010:	e7c9      	b.n	8007fa6 <_realloc_r+0x206>
 8008012:	68a3      	ldr	r3, [r4, #8]
 8008014:	612b      	str	r3, [r5, #16]
 8008016:	68e3      	ldr	r3, [r4, #12]
 8008018:	616b      	str	r3, [r5, #20]
 800801a:	2a24      	cmp	r2, #36	; 0x24
 800801c:	bf01      	itttt	eq
 800801e:	6923      	ldreq	r3, [r4, #16]
 8008020:	61ab      	streq	r3, [r5, #24]
 8008022:	6963      	ldreq	r3, [r4, #20]
 8008024:	61eb      	streq	r3, [r5, #28]
 8008026:	bf19      	ittee	ne
 8008028:	3410      	addne	r4, #16
 800802a:	f105 0018 	addne.w	r0, r5, #24
 800802e:	f105 0020 	addeq.w	r0, r5, #32
 8008032:	3418      	addeq	r4, #24
 8008034:	e7e5      	b.n	8008002 <_realloc_r+0x262>
 8008036:	4621      	mov	r1, r4
 8008038:	f7ff fe98 	bl	8007d6c <memmove>
 800803c:	e7e7      	b.n	800800e <_realloc_r+0x26e>
 800803e:	4611      	mov	r1, r2
 8008040:	4650      	mov	r0, sl
 8008042:	f7ff f825 	bl	8007090 <_malloc_r>
 8008046:	4683      	mov	fp, r0
 8008048:	2800      	cmp	r0, #0
 800804a:	f43f af6f 	beq.w	8007f2c <_realloc_r+0x18c>
 800804e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8008052:	f023 0301 	bic.w	r3, r3, #1
 8008056:	444b      	add	r3, r9
 8008058:	f1a0 0208 	sub.w	r2, r0, #8
 800805c:	4293      	cmp	r3, r2
 800805e:	d105      	bne.n	800806c <_realloc_r+0x2cc>
 8008060:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8008064:	f027 0703 	bic.w	r7, r7, #3
 8008068:	4437      	add	r7, r6
 800806a:	e6fb      	b.n	8007e64 <_realloc_r+0xc4>
 800806c:	1f32      	subs	r2, r6, #4
 800806e:	2a24      	cmp	r2, #36	; 0x24
 8008070:	d82f      	bhi.n	80080d2 <_realloc_r+0x332>
 8008072:	2a13      	cmp	r2, #19
 8008074:	d92a      	bls.n	80080cc <_realloc_r+0x32c>
 8008076:	6823      	ldr	r3, [r4, #0]
 8008078:	6003      	str	r3, [r0, #0]
 800807a:	6863      	ldr	r3, [r4, #4]
 800807c:	6043      	str	r3, [r0, #4]
 800807e:	2a1b      	cmp	r2, #27
 8008080:	d810      	bhi.n	80080a4 <_realloc_r+0x304>
 8008082:	f104 0208 	add.w	r2, r4, #8
 8008086:	f100 0308 	add.w	r3, r0, #8
 800808a:	6811      	ldr	r1, [r2, #0]
 800808c:	6019      	str	r1, [r3, #0]
 800808e:	6851      	ldr	r1, [r2, #4]
 8008090:	6059      	str	r1, [r3, #4]
 8008092:	6892      	ldr	r2, [r2, #8]
 8008094:	609a      	str	r2, [r3, #8]
 8008096:	4621      	mov	r1, r4
 8008098:	4650      	mov	r0, sl
 800809a:	f7fe ff2d 	bl	8006ef8 <_free_r>
 800809e:	e745      	b.n	8007f2c <_realloc_r+0x18c>
 80080a0:	20000544 	.word	0x20000544
 80080a4:	68a3      	ldr	r3, [r4, #8]
 80080a6:	6083      	str	r3, [r0, #8]
 80080a8:	68e3      	ldr	r3, [r4, #12]
 80080aa:	60c3      	str	r3, [r0, #12]
 80080ac:	2a24      	cmp	r2, #36	; 0x24
 80080ae:	bf01      	itttt	eq
 80080b0:	6923      	ldreq	r3, [r4, #16]
 80080b2:	6103      	streq	r3, [r0, #16]
 80080b4:	6961      	ldreq	r1, [r4, #20]
 80080b6:	6141      	streq	r1, [r0, #20]
 80080b8:	bf19      	ittee	ne
 80080ba:	f104 0210 	addne.w	r2, r4, #16
 80080be:	f100 0310 	addne.w	r3, r0, #16
 80080c2:	f104 0218 	addeq.w	r2, r4, #24
 80080c6:	f100 0318 	addeq.w	r3, r0, #24
 80080ca:	e7de      	b.n	800808a <_realloc_r+0x2ea>
 80080cc:	4603      	mov	r3, r0
 80080ce:	4622      	mov	r2, r4
 80080d0:	e7db      	b.n	800808a <_realloc_r+0x2ea>
 80080d2:	4621      	mov	r1, r4
 80080d4:	f7ff fe4a 	bl	8007d6c <memmove>
 80080d8:	e7dd      	b.n	8008096 <_realloc_r+0x2f6>
 80080da:	4637      	mov	r7, r6
 80080dc:	e6c2      	b.n	8007e64 <_realloc_r+0xc4>
 80080de:	4317      	orrs	r7, r2
 80080e0:	f8c9 7004 	str.w	r7, [r9, #4]
 80080e4:	685a      	ldr	r2, [r3, #4]
 80080e6:	f042 0201 	orr.w	r2, r2, #1
 80080ea:	605a      	str	r2, [r3, #4]
 80080ec:	e6d6      	b.n	8007e9c <_realloc_r+0xfc>
 80080ee:	bf00      	nop

080080f0 <__ascii_wctomb>:
 80080f0:	b149      	cbz	r1, 8008106 <__ascii_wctomb+0x16>
 80080f2:	2aff      	cmp	r2, #255	; 0xff
 80080f4:	bf85      	ittet	hi
 80080f6:	238a      	movhi	r3, #138	; 0x8a
 80080f8:	6003      	strhi	r3, [r0, #0]
 80080fa:	700a      	strbls	r2, [r1, #0]
 80080fc:	f04f 30ff 	movhi.w	r0, #4294967295
 8008100:	bf98      	it	ls
 8008102:	2001      	movls	r0, #1
 8008104:	4770      	bx	lr
 8008106:	4608      	mov	r0, r1
 8008108:	4770      	bx	lr
	...

0800810c <_sbrk>:
 800810c:	4b0d      	ldr	r3, [pc, #52]	; (8008144 <_sbrk+0x38>)
 800810e:	6819      	ldr	r1, [r3, #0]
 8008110:	b510      	push	{r4, lr}
 8008112:	4602      	mov	r2, r0
 8008114:	b909      	cbnz	r1, 800811a <_sbrk+0xe>
 8008116:	490c      	ldr	r1, [pc, #48]	; (8008148 <_sbrk+0x3c>)
 8008118:	6019      	str	r1, [r3, #0]
 800811a:	6818      	ldr	r0, [r3, #0]
 800811c:	4669      	mov	r1, sp
 800811e:	4402      	add	r2, r0
 8008120:	428a      	cmp	r2, r1
 8008122:	d806      	bhi.n	8008132 <_sbrk+0x26>
 8008124:	4909      	ldr	r1, [pc, #36]	; (800814c <_sbrk+0x40>)
 8008126:	4c0a      	ldr	r4, [pc, #40]	; (8008150 <_sbrk+0x44>)
 8008128:	6809      	ldr	r1, [r1, #0]
 800812a:	42a1      	cmp	r1, r4
 800812c:	d008      	beq.n	8008140 <_sbrk+0x34>
 800812e:	428a      	cmp	r2, r1
 8008130:	d906      	bls.n	8008140 <_sbrk+0x34>
 8008132:	f7ff fe03 	bl	8007d3c <__errno>
 8008136:	230c      	movs	r3, #12
 8008138:	6003      	str	r3, [r0, #0]
 800813a:	f04f 30ff 	mov.w	r0, #4294967295
 800813e:	bd10      	pop	{r4, pc}
 8008140:	601a      	str	r2, [r3, #0]
 8008142:	e7fc      	b.n	800813e <_sbrk+0x32>
 8008144:	20013990 	.word	0x20013990
 8008148:	200139f8 	.word	0x200139f8
 800814c:	20000ac0 	.word	0x20000ac0
 8008150:	cafedead 	.word	0xcafedead

08008154 <_init>:
 8008154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008156:	bf00      	nop
 8008158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800815a:	bc08      	pop	{r3}
 800815c:	469e      	mov	lr, r3
 800815e:	4770      	bx	lr

08008160 <_fini>:
 8008160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008162:	bf00      	nop
 8008164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008166:	bc08      	pop	{r3}
 8008168:	469e      	mov	lr, r3
 800816a:	4770      	bx	lr
